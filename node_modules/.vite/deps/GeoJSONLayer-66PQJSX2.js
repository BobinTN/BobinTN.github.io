import {
  l
} from "./chunk-UIBKJIZ5.js";
import "./chunk-KMTPMPRR.js";
import {
  c as c4
} from "./chunk-ADNT35Y3.js";
import {
  p
} from "./chunk-3F7Z2GZ4.js";
import "./chunk-BVTDQR4O.js";
import {
  c as c3
} from "./chunk-JDVR6MOC.js";
import "./chunk-DYYHVSPV.js";
import "./chunk-UIN5EOGE.js";
import {
  n
} from "./chunk-ZRKSP45X.js";
import "./chunk-DT2VHQBL.js";
import {
  s as s3
} from "./chunk-KLPBCYCG.js";
import {
  p as p2
} from "./chunk-3HOLDCR2.js";
import {
  i
} from "./chunk-DCL3YBJN.js";
import {
  C
} from "./chunk-3ZWLSDVT.js";
import {
  o as o2
} from "./chunk-5DLICG33.js";
import {
  a as a3
} from "./chunk-ZILXWPAR.js";
import {
  p as p3
} from "./chunk-HPFRYEGX.js";
import {
  m as m3,
  u
} from "./chunk-F64GI7MS.js";
import "./chunk-4LDWKTSM.js";
import {
  j as j2
} from "./chunk-POSLR7O2.js";
import {
  f as f2
} from "./chunk-VOYU5TTK.js";
import {
  a as a2
} from "./chunk-P5VIVFJT.js";
import "./chunk-SA3C7GIT.js";
import "./chunk-P3R45ANF.js";
import {
  t
} from "./chunk-PIEUUBJ5.js";
import {
  u as u2
} from "./chunk-YIAYIZOZ.js";
import {
  m as m2
} from "./chunk-P5GW5DPX.js";
import {
  I as I2,
  c as c5,
  d as d2,
  f as f3,
  g as g2,
  m as m4,
  p as p6,
  y as y3
} from "./chunk-VIOPOI6P.js";
import "./chunk-DOALI2C2.js";
import "./chunk-E3I4MGUC.js";
import "./chunk-UHNBENSV.js";
import "./chunk-GDKL26HH.js";
import "./chunk-2CL4LRYG.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-HKYMYCLL.js";
import "./chunk-ICVVQFO6.js";
import {
  d
} from "./chunk-BYK6DXRK.js";
import "./chunk-UTCX6DGX.js";
import "./chunk-7VNZ6V2N.js";
import "./chunk-VKTTTBW2.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-OCLKX5SY.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-HX5GOVNX.js";
import "./chunk-2Q2Q2Z4U.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-HU7QYAVQ.js";
import {
  b
} from "./chunk-45OAWGCA.js";
import "./chunk-X2TA76Q5.js";
import "./chunk-T3Y5GTKO.js";
import {
  y as y2
} from "./chunk-XN6LAULS.js";
import "./chunk-M7OEQQRX.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-6B7VJB6C.js";
import "./chunk-GAJBN4TM.js";
import {
  b as b2
} from "./chunk-YXRSJYLG.js";
import {
  p as p4
} from "./chunk-KBKTS574.js";
import "./chunk-6ABSX3YY.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-FWR4JURK.js";
import {
  k as k2
} from "./chunk-BELGAUAK.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-HITXLR5N.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-4TSAC52K.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-2AXFVQBN.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import {
  g,
  p as p5
} from "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import {
  o
} from "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-BHJVWW2P.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import {
  j
} from "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import {
  c as c2
} from "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import {
  m
} from "./chunk-CCXEAKIM.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import {
  f
} from "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import {
  I
} from "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a,
  k
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import {
  has
} from "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/graphics/sources/GeoJSONSource.js
var p7 = class extends m {
  constructor() {
    super(...arguments), this.type = "geojson", this.refresh = k(async (e2) => {
      await this.load();
      const { extent: t2, timeExtent: r } = await this._connection.invoke("refresh", e2);
      return this.sourceJSON.extent = t2, r && (this.sourceJSON.timeInfo.timeExtent = [r.start, r.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(e2) {
    const t2 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this._startWorker(t2)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  applyEdits(e2) {
    return this.load().then(() => this._applyEdits(e2));
  }
  openPorts() {
    return this.load().then(() => this._connection.openPorts());
  }
  queryFeatures(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatures", e2 ? e2.toJSON() : null, t2)).then((e3) => d.fromJSON(e3));
  }
  queryFeaturesJSON(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatures", e2 ? e2.toJSON() : null, t2));
  }
  queryFeatureCount(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatureCount", e2 ? e2.toJSON() : null, t2));
  }
  queryObjectIds(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryObjectIds", e2 ? e2.toJSON() : null, t2));
  }
  queryExtent(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryExtent", e2 ? e2.toJSON() : null, t2)).then((e3) => ({ count: e3.count, extent: M.fromJSON(e3.extent) }));
  }
  querySnapping(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("querySnapping", e2, t2));
  }
  _applyEdits(e2) {
    if (!this._connection)
      throw new s2("geojson-layer-source:edit-failure", "Memory source not loaded");
    const r = this.layer.objectIdField, o3 = [], s4 = [], i2 = [];
    if (e2.addFeatures)
      for (const t2 of e2.addFeatures)
        o3.push(this._serializeFeature(t2));
    if (e2.deleteFeatures)
      for (const t2 of e2.deleteFeatures)
        "objectId" in t2 && null != t2.objectId ? s4.push(t2.objectId) : "attributes" in t2 && null != t2.attributes[r] && s4.push(t2.attributes[r]);
    if (e2.updateFeatures)
      for (const t2 of e2.updateFeatures)
        i2.push(this._serializeFeature(t2));
    return this._connection.invoke("applyEdits", { adds: o3, updates: i2, deletes: s4 }).then(({ extent: e3, timeExtent: t2, featureEditResults: r2 }) => (this.sourceJSON.extent = e3, t2 && (this.sourceJSON.timeInfo.timeExtent = [t2.start, t2.end]), this._createEditsResult(r2)));
  }
  _createEditsResult(e2) {
    return { addFeatureResults: e2.addResults ? e2.addResults.map(this._createFeatureEditResult, this) : [], updateFeatureResults: e2.updateResults ? e2.updateResults.map(this._createFeatureEditResult, this) : [], deleteFeatureResults: e2.deleteResults ? e2.deleteResults.map(this._createFeatureEditResult, this) : [], addAttachmentResults: [], updateAttachmentResults: [], deleteAttachmentResults: [] };
  }
  _createFeatureEditResult(e2) {
    const r = true === e2.success ? null : e2.error || { code: void 0, description: void 0 };
    return { objectId: e2.objectId, globalId: e2.globalId, error: r ? new s2("geojson-layer-source:edit-failure", r.description, { code: r.code }) : null };
  }
  _serializeFeature(e2) {
    const { attributes: t2 } = e2, r = this._geometryForSerialization(e2);
    return r ? { geometry: r.toJSON(), attributes: t2 } : { attributes: t2 };
  }
  _geometryForSerialization(e2) {
    const { geometry: t2 } = e2;
    return null == t2 ? null : "mesh" === t2.type || "extent" === t2.type ? j.fromExtent(t2.extent) : t2;
  }
  async _startWorker(e2) {
    this._connection = await p4("GeoJSONSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: e2, registryTarget: this });
    const { fields: t2, spatialReference: r, hasZ: s4, geometryType: n2, objectIdField: a4, url: l2, timeInfo: c6, customParameters: d3 } = this.layer, p8 = "defaults" === this.layer.originOf("spatialReference"), m5 = { url: l2, customParameters: d3, fields: t2 && t2.map((e3) => e3.toJSON()), geometryType: o.toJSON(n2), hasZ: s4, objectIdField: a4, timeInfo: c6 ? c6.toJSON() : null, spatialReference: p8 ? null : r && r.toJSON() }, y4 = await this._connection.invoke("load", m5, { signal: e2 });
    for (const i2 of y4.warnings)
      s.getLogger(this.layer).warn("#load()", `$${i2.message} (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { warning: i2 });
    y4.featureErrors.length && s.getLogger(this.layer).warn("#load()", `Encountered ${y4.featureErrors.length} validation errors while loading features. (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { errors: y4.featureErrors }), this.sourceJSON = y4.layerDefinition, this.capabilities = l(this.sourceJSON.hasZ, true);
  }
};
e([y()], p7.prototype, "capabilities", void 0), e([y()], p7.prototype, "type", void 0), e([y({ constructOnly: true })], p7.prototype, "layer", void 0), e([y()], p7.prototype, "sourceJSON", void 0), p7 = e([c("esri.layers.graphics.sources.GeoJSONSource")], p7);

// node_modules/@arcgis/core/layers/GeoJSONLayer.js
var B = s3();
var M2 = class extends c4(o2(c3(p(a2(a3(t(f2(u2(j2(m2(b2))))))))))) {
  constructor(e2) {
    super(e2), this.copyright = null, this.dateFieldsTimeZone = null, this.definitionExpression = null, this.displayField = null, this.editingEnabled = false, this.elevationInfo = null, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.hasZ = void 0, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "GeoJSON", this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new p7({ layer: this }), this.spatialReference = f.WGS84, this.templates = null, this.title = "GeoJSON", this.type = "geojson", this.typeIdField = null, this.types = null;
  }
  destroy() {
    var _a;
    (_a = this.source) == null ? void 0 : _a.destroy();
  }
  load(e2) {
    const t2 = this.loadFromPortal({ supportedTypes: ["GeoJson"], supportsData: false }, e2).catch(a).then(() => this.source.load(e2)).then(() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo"], "service"), p5(this.renderer, this.fieldsIndex), g(this.timeInfo, this.fieldsIndex);
    });
    return this.addResolvingPromise(t2), Promise.resolve(this);
  }
  get capabilities() {
    return this.source ? this.source.capabilities : null;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  get parsedUrl() {
    return this.url ? I(this.url) : null;
  }
  set renderer(e2) {
    p5(e2, this.fieldsIndex), this._set("renderer", e2);
  }
  set url(e2) {
    if (!e2)
      return void this._set("url", e2);
    const t2 = I(e2);
    this._set("url", t2.path), t2.query && (this.customParameters = { ...this.customParameters, ...t2.query });
  }
  async applyEdits(e2, t2) {
    const { applyEdits: r } = await import("./editingSupport-FJFXL3HI.js");
    await this.load();
    const i2 = await r(this, this.source, e2, t2);
    return this.read({ extent: this.source.sourceJSON.extent, timeInfo: this.source.sourceJSON.timeInfo }, { origin: "service", ignoreDefaults: true }), i2;
  }
  on(e2, t2) {
    return super.on(e2, t2);
  }
  createPopupTemplate(e2) {
    return p3(this, e2);
  }
  createQuery() {
    var _a;
    const e2 = new b(), t2 = (_a = this.capabilities) == null ? void 0 : _a.data;
    e2.returnGeometry = true, t2 && t2.supportsZ && (e2.returnZ = true), e2.outFields = ["*"], e2.where = this.definitionExpression || "1=1";
    const { timeOffset: r, timeExtent: i2 } = this;
    return e2.timeExtent = null != r && null != i2 ? i2.offset(-r.value, r.unit) : i2 || null, e2;
  }
  getFieldDomain(e2, t2) {
    let r, i2 = false;
    const o3 = t2 == null ? void 0 : t2.feature, s4 = o3 == null ? void 0 : o3.attributes, p8 = this.typeIdField && (s4 == null ? void 0 : s4[this.typeIdField]);
    return null != p8 && this.types && (i2 = this.types.some((t3) => t3.id == p8 && (r = t3.domains && t3.domains[e2], r && "inherited" === r.type && (r = this._getLayerDomain(e2)), true))), i2 || r || (r = this._getLayerDomain(e2)), r;
  }
  getField(e2) {
    return this.fieldsIndex.get(e2);
  }
  queryFeatures(e2, t2) {
    return this.load().then(() => this.source.queryFeatures(b.from(e2) || this.createQuery(), t2)).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const t3 of e3.features)
          t3.layer = t3.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, t2) {
    return this.load().then(() => this.source.queryObjectIds(b.from(e2) || this.createQuery(), t2));
  }
  queryFeatureCount(e2, t2) {
    return this.load().then(() => this.source.queryFeatureCount(b.from(e2) || this.createQuery(), t2));
  }
  queryExtent(e2, t2) {
    return this.load().then(() => this.source.queryExtent(b.from(e2) || this.createQuery(), t2));
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e2, updates: t2 } = await this.source.refresh(this.customParameters);
      return null != t2 && this.read(t2, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e2;
    } catch {
    }
    return false;
  }
  _getLayerDomain(e2) {
    if (!this.fields)
      return null;
    let t2 = null;
    return this.fields.some((r) => (r.name === e2 && (t2 = r.domain), !!t2)), t2;
  }
};
e([y({ readOnly: true, json: { read: false, write: false } })], M2.prototype, "capabilities", null), e([y({ type: String })], M2.prototype, "copyright", void 0), e([y({ readOnly: true })], M2.prototype, "createQueryVersion", null), e([y(c2("dateFieldsTimeReference"))], M2.prototype, "dateFieldsTimeZone", void 0), e([y({ readOnly: true })], M2.prototype, "defaultPopupTemplate", null), e([y({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], M2.prototype, "definitionExpression", void 0), e([y({ type: String })], M2.prototype, "displayField", void 0), e([y({ type: Boolean })], M2.prototype, "editingEnabled", void 0), e([y(f3)], M2.prototype, "elevationInfo", void 0), e([y({ type: [y2], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], M2.prototype, "fields", void 0), e([y(B.fieldsIndex)], M2.prototype, "fieldsIndex", void 0), e([y({ type: M, json: { name: "extent" } })], M2.prototype, "fullExtent", void 0), e([y({ type: ["point", "polygon", "polyline", "multipoint"], json: { read: { reader: o.read } } })], M2.prototype, "geometryType", void 0), e([y({ type: Boolean })], M2.prototype, "hasZ", void 0), e([y(I2)], M2.prototype, "id", void 0), e([y({ type: Boolean, readOnly: true })], M2.prototype, "isTable", null), e([y(m4)], M2.prototype, "labelsVisible", void 0), e([y({ type: [C], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: i }, write: true } })], M2.prototype, "labelingInfo", void 0), e([y(c5)], M2.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide"] })], M2.prototype, "listMode", void 0), e([y({ type: String, json: { name: "layerDefinition.objectIdField", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "objectIdField" } } } })], M2.prototype, "objectIdField", void 0), e([y(g2)], M2.prototype, "opacity", void 0), e([y({ type: ["GeoJSON"] })], M2.prototype, "operationalLayerType", void 0), e([y({ readOnly: true })], M2.prototype, "parsedUrl", null), e([y(y3)], M2.prototype, "popupEnabled", void 0), e([y({ type: k2, json: { name: "popupInfo", write: true } })], M2.prototype, "popupTemplate", void 0), e([y({ types: m3, json: { name: "layerDefinition.drawingInfo.renderer", write: true, origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: u } } } })], M2.prototype, "renderer", null), e([y(p6)], M2.prototype, "screenSizePerspectiveEnabled", void 0), e([y({ readOnly: true })], M2.prototype, "source", void 0), e([y({ type: f })], M2.prototype, "spatialReference", void 0), e([y({ type: [p2] })], M2.prototype, "templates", void 0), e([y()], M2.prototype, "title", void 0), e([y({ json: { read: false }, readOnly: true })], M2.prototype, "type", void 0), e([y({ type: String, readOnly: true })], M2.prototype, "typeIdField", void 0), e([y({ type: [n] })], M2.prototype, "types", void 0), e([y(d2)], M2.prototype, "url", null), M2 = e([c("esri.layers.GeoJSONLayer")], M2);
var k3 = M2;
export {
  k3 as default
};
//# sourceMappingURL=GeoJSONLayer-66PQJSX2.js.map
