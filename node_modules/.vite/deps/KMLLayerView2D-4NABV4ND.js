import {
  m as m2
} from "./chunk-BXOPIFFF.js";
import {
  N,
  o
} from "./chunk-F3L5SDRN.js";
import {
  i as i2
} from "./chunk-R6XZFUCV.js";
import "./chunk-FUZOO24T.js";
import "./chunk-UQHFLGCY.js";
import "./chunk-UGJNQG6H.js";
import {
  re
} from "./chunk-VGF3CFL5.js";
import "./chunk-HBFRNOJQ.js";
import "./chunk-EQVODNOJ.js";
import "./chunk-MPQZTJY3.js";
import "./chunk-HU7IF5IM.js";
import "./chunk-BIFYNKHZ.js";
import {
  a
} from "./chunk-V2JH6QRN.js";
import {
  b as b3,
  f as f3,
  w
} from "./chunk-CYLAAUEO.js";
import {
  m,
  u as u2
} from "./chunk-SBC4OSBO.js";
import {
  n
} from "./chunk-IF6ORLWU.js";
import "./chunk-AZKAB65C.js";
import "./chunk-BV5PCIP6.js";
import "./chunk-BXZIEADJ.js";
import "./chunk-L7TO2DFS.js";
import "./chunk-PTWYQEPE.js";
import {
  b as b2,
  d as d2,
  g
} from "./chunk-J4M3ZRJI.js";
import "./chunk-DJ3H5D5X.js";
import "./chunk-BNTQULGG.js";
import {
  E
} from "./chunk-A6KO3R3G.js";
import {
  T,
  e2 as e3
} from "./chunk-T56C4ORZ.js";
import "./chunk-RN5RTM2J.js";
import {
  C,
  ee
} from "./chunk-OQKR5TK4.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-JWWTIFGY.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-NI23WAWZ.js";
import "./chunk-GBFYGM27.js";
import "./chunk-5JIGIHKI.js";
import "./chunk-NB4VIBDC.js";
import "./chunk-5JUAGSVT.js";
import "./chunk-HVJP4M5N.js";
import "./chunk-2M3E5AI7.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-BRF3NTLN.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-GSATUKJ4.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-WR3GXMXV.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-46VITINB.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import {
  D,
  G,
  U,
  X
} from "./chunk-RCLKRKWR.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-JLSYG6MV.js";
import {
  i
} from "./chunk-5BUKVFNB.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import "./chunk-ZBT4RUU7.js";
import "./chunk-DZE6ZO7Z.js";
import "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import "./chunk-EY7PGBJG.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-DYYHVSPV.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-DCL3YBJN.js";
import "./chunk-3ZWLSDVT.js";
import "./chunk-F64GI7MS.js";
import "./chunk-4LDWKTSM.js";
import "./chunk-P3R45ANF.js";
import "./chunk-UHNBENSV.js";
import "./chunk-GDKL26HH.js";
import "./chunk-2CL4LRYG.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-HKYMYCLL.js";
import "./chunk-ICVVQFO6.js";
import "./chunk-BYK6DXRK.js";
import "./chunk-7VNZ6V2N.js";
import "./chunk-VKTTTBW2.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-OCLKX5SY.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-HX5GOVNX.js";
import "./chunk-2Q2Q2Z4U.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-XN6LAULS.js";
import "./chunk-M7OEQQRX.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-FWR4JURK.js";
import "./chunk-BELGAUAK.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-HITXLR5N.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-4TSAC52K.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-RHT6WWRD.js";
import {
  f as f2
} from "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import {
  _,
  b
} from "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  d
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import {
  V
} from "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import "./chunk-CCXEAKIM.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import {
  x2 as x
} from "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import {
  f
} from "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import {
  A,
  j,
  r,
  v
} from "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import {
  e as e2,
  u
} from "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/support/imageReprojection.js
var l = class _l {
  constructor(t) {
    if (this._ownsRctx = false, t)
      this._ownsRctx = false, this._rctx = t;
    else {
      if (_l._instance)
        return _l._instanceRefCount++, _l._instance;
      _l._instanceRefCount = 1, _l._instance = this, this._ownsRctx = true;
      const t2 = document.createElement("canvas").getContext("webgl");
      t2.getExtension("OES_texture_float"), this._rctx = new N(t2, {});
    }
    const e4 = { applyProjection: true, bilinear: false, bicubic: false }, r2 = o("raster/reproject", "raster/reproject", /* @__PURE__ */ new Map([["a_position", 0]]), e4);
    this._program = this._rctx.programCache.acquire(r2.shaders.vertexShader, r2.shaders.fragmentShader, r2.attributes), this._rctx.useProgram(this._program), this._program.setUniform1f("u_opacity", 1), this._program.setUniform1i("u_image", 0), this._program.setUniform1i("u_flipY", 0), this._program.setUniform1i("u_transformGrid", 1), this._quad = new n(this._rctx, [0, 0, 1, 0, 0, 1, 1, 1]);
  }
  reprojectTexture(t, s, n2 = false) {
    const o2 = b(t.extent, s), m3 = new x({ x: (t.extent.xmax - t.extent.xmin) / t.texture.descriptor.width, y: (t.extent.ymax - t.extent.ymin) / t.texture.descriptor.height, spatialReference: t.extent.spatialReference }), { x: _2, y: g2 } = C(m3, s, t.extent);
    let l2 = (_2 + g2) / 2;
    const w2 = Math.round((o2.xmax - o2.xmin) / l2), b4 = Math.round((o2.ymax - o2.ymin) / l2);
    l2 = (o2.width / w2 + o2.height / b4) / 2;
    const j3 = new x({ x: l2, y: l2, spatialReference: o2.spatialReference }), D2 = ee({ projectedExtent: o2, srcBufferExtent: t.extent, pixelSize: j3, hasWrapAround: true, spacing: [16, 16] }), R = m2(this._rctx, D2), C3 = new e3(w2, b4);
    C3.wrapMode = D.CLAMP_TO_EDGE;
    const T2 = new E(this._rctx, C3);
    this._rctx.bindFramebuffer(T2), this._rctx.setViewport(0, 0, w2, b4), this._rctx.useProgram(this._program), this._rctx.bindTexture(t.texture, 0), this._rctx.bindTexture(R, 1), this._quad.bind();
    const { width: y2 = 0, height: E2 = 0 } = t.texture.descriptor;
    if (this._program.setUniform2f("u_srcImageSize", y2, E2), this._program.setUniform2fv("u_transformSpacing", D2.spacing), this._program.setUniform2fv("u_transformGridSize", D2.size), this._program.setUniform2f("u_targetImageSize", w2, b4), this._quad.draw(), this._quad.unbind(), this._rctx.useProgram(null), this._rctx.bindFramebuffer(null), R.dispose(), n2) {
      const { width: t2, height: e4 } = T2, r2 = new ImageData(t2 ?? 0, e4 ?? 0);
      T2.readPixels(0, 0, t2 ?? 0, e4 ?? 0, G.RGBA, U.UNSIGNED_BYTE, r2.data);
      const i3 = T2.detachColorTexture(X.COLOR_ATTACHMENT0);
      return T2.dispose(), { texture: i3, extent: o2, imageData: r2 };
    }
    const M2 = T2.detachColorTexture(X.COLOR_ATTACHMENT0);
    return T2.dispose(), { texture: M2, extent: o2 };
  }
  reprojectBitmapData(t, e4) {
    const r2 = f3(t.bitmapData) ? w(t.bitmapData) : t.bitmapData, i3 = new e3();
    i3.wrapMode = D.CLAMP_TO_EDGE, i3.width = t.bitmapData.width, i3.height = t.bitmapData.height;
    const a2 = new T(this._rctx, i3, r2), o2 = this.reprojectTexture({ texture: a2, extent: t.extent }, e4, true);
    o2.texture.dispose();
    const m3 = document.createElement("canvas"), p = o2.imageData;
    m3.width = p.width, m3.height = p.height;
    return m3.getContext("2d").putImageData(p, 0, 0), { bitmapData: m3, extent: o2.extent };
  }
  async loadAndReprojectBitmapData(e4, r2, i3) {
    const a2 = (await j(e4, { responseType: "image" })).data, s = document.createElement("canvas");
    s.width = a2.width, s.height = a2.height;
    const n2 = s.getContext("2d");
    n2.drawImage(a2, 0, 0);
    const o2 = n2.getImageData(0, 0, s.width, s.height);
    if (r2.spatialReference.equals(i3))
      return { bitmapData: o2, extent: r2 };
    const m3 = this.reprojectBitmapData({ bitmapData: o2, extent: r2 }, i3);
    return { bitmapData: m3.bitmapData, extent: m3.extent };
  }
  destroy() {
    this._ownsRctx ? (_l._instanceRefCount--, 0 === _l._instanceRefCount && (this._quad.dispose(), this._program.dispose(), this._rctx.dispose(), _l._instance = null)) : (this._quad.dispose(), this._program.dispose());
  }
};
l._instanceRefCount = 0;

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var C2 = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var j2 = class extends m(u2) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new a(), this._kmlVisualData = new C2(), this._fetchController = null, this.allVisiblePoints = new i(), this.allVisiblePolylines = new i(), this.allVisiblePolygons = new i(), this.allVisibleMapImages = new V();
  }
  async hitTest(e4, i3) {
    var _a, _b, _c;
    const t = this.layer;
    return [(_a = this._pointsView) == null ? void 0 : _a.hitTest(e4), (_b = this._polylinesView) == null ? void 0 : _b.hitTest(e4), (_c = this._polygonsView) == null ? void 0 : _c.hitTest(e4)].flat().filter(Boolean).map((i4) => (i4.layer = t, i4.sourceLayer = t, { type: "graphic", graphic: i4, layer: t, mapPoint: e4 }));
  }
  update(e4) {
    this._polygonsView && this._polygonsView.processUpdate(e4), this._polylinesView && this._polylinesView.processUpdate(e4), this._pointsView && this._pointsView.processUpdate(e4);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new re({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new re({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new re({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.addAttachHandles([this.allVisibleMapImages.on("change", (e4) => {
      e4.added.forEach((e5) => this._addMapImage(e5)), e4.removed.forEach((e5) => this._removeMapImage(e5));
    }), d(() => this.layer.visibleSublayers, (e4) => {
      for (const [i3, t] of this._kmlVisualData.allSublayers)
        t.visibility = 0;
      for (const i3 of e4) {
        const e5 = this._kmlVisualData.allSublayers.get(i3.id);
        e5 && (e5.visibility = 1);
      }
      this._refreshCollections();
    })]), this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)), this._imageReprojector = new l();
  }
  detach() {
    this._fetchController = e2(this._fetchController), this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView = u(this._polygonsView), this._polylinesView = u(this._polylinesView), this._pointsView = u(this._pointsView), this._imageReprojector = u(this._imageReprojector);
  }
  moveStart() {
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e4) {
    var _a, _b;
    (((_a = this.view.spatialReference) == null ? void 0 : _a.isWGS84) || ((_b = this.view.spatialReference) == null ? void 0 : _b.isWebMercator)) && this._imageReprojector.loadAndReprojectBitmapData(e4.href, M.fromJSON(e4.extent), this.view.spatialReference).then((i3) => {
      const t = new b3(i3.bitmapData);
      t.x = i3.extent.xmin, t.y = i3.extent.ymax, t.resolution = i3.extent.width / i3.bitmapData.width, t.rotation = e4.rotation, this._mapImageContainer.addChild(t), this._bitmapIndex.set(e4, t);
    });
  }
  async _getViewDependentUrl(e4, t) {
    const { viewFormat: s, viewBoundScale: a2, httpQuery: o2 } = e4;
    if (null != s) {
      if (null == t)
        throw new Error("Loading this network link requires a view state.");
      let n2;
      if (await _(), null != a2 && 1 !== a2) {
        const e5 = new M(t.extent);
        e5.expand(a2), n2 = e5;
      } else
        n2 = t.extent;
      n2 = b(n2, f.WGS84);
      const h = b(n2, f.WebMercator), y2 = n2.xmin, g2 = n2.xmax, w2 = n2.ymin, _2 = n2.ymax, b4 = t.size[0] * t.pixelRatio, V2 = t.size[1] * t.pixelRatio, f4 = Math.max(h.width, h.height), v2 = { "[bboxWest]": y2.toString(), "[bboxEast]": g2.toString(), "[bboxSouth]": w2.toString(), "[bboxNorth]": _2.toString(), "[lookatLon]": n2.center.x.toString(), "[lookatLat]": n2.center.y.toString(), "[lookatRange]": f4.toString(), "[lookatTilt]": "0", "[lookatHeading]": t.rotation.toString(), "[lookatTerrainLon]": n2.center.x.toString(), "[lookatTerrainLat]": n2.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": n2.center.x.toString(), "[cameraLat]": n2.center.y.toString(), "[cameraAlt]": f4.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": b4.toString(), "[vertPixels]": V2.toString(), "[terrainEnabled]": "0", "[clientVersion]": r, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, S = (e5) => {
        for (const i3 in e5) {
          let t2;
          for (t2 in v2)
            e5[i3] = e5[i3].replace(t2, v2[t2]);
        }
      }, I = A(s);
      S(I);
      let x2 = {};
      null != o2 && (x2 = A(o2), S(x2));
      const C3 = f2(e4.href);
      C3.query = { ...C3.query, ...I, ...x2 };
      return `${C3.path}?${v(I)}`;
    }
    return e4.href;
  }
  async _fetchService(e4) {
    const i3 = new C2();
    await this._loadVisualData(this.layer.url, i3, e4), this._kmlVisualData = i3, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4));
  }
  _isSublayerVisible(e4) {
    const i3 = this._kmlVisualData.allSublayers.get(e4);
    return !!(i3 == null ? void 0 : i3.visibility) && (-1 === i3.parentFolderId || this._isSublayerVisible(i3.parentFolderId));
  }
  _loadVisualData(e4, i3, t) {
    return this._fetchParsedKML(e4, t).then(async (e5) => {
      for (const s of e5.sublayers) {
        i3.allSublayers.set(s.id, s);
        const e6 = s.points ? await b2(s.points) : [], a2 = s.polylines ? await b2(s.polylines) : [], o2 = s.polygons ? await b2(s.polygons) : [], l2 = s.mapImages || [];
        if (i3.allPoints.push(...e6.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allPolylines.push(...a2.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allPolygons.push(...o2.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allMapImages.push(...l2.map((e7) => ({ item: e7, sublayerId: s.id }))), s.networkLink) {
          const e7 = await this._getViewDependentUrl(s.networkLink, this.view.state);
          await this._loadVisualData(e7, i3, t);
        }
      }
    });
  }
  _fetchParsedKML(e4, i3) {
    return g(e4, this.layer.spatialReference, this.layer.refreshInterval, i3).then((e5) => d2(e5.data));
  }
  _removeMapImage(e4) {
    const i3 = this._bitmapIndex.get(e4);
    i3 && (this._mapImageContainer.removeChild(i3), this._bitmapIndex.delete(e4));
  }
};
e([y()], j2.prototype, "_pointsView", void 0), e([y()], j2.prototype, "_polylinesView", void 0), e([y()], j2.prototype, "_polygonsView", void 0), e([y()], j2.prototype, "updating", void 0), j2 = e([c("esri.views.2d.layers.KMLLayerView2D")], j2);
var k = j2;
export {
  k as default
};
//# sourceMappingURL=KMLLayerView2D-4NABV4ND.js.map
