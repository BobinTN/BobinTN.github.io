import {
  p
} from "./chunk-AOJ6OCPK.js";
import {
  S
} from "./chunk-BHJVWW2P.js";
import {
  j as j2
} from "./chunk-XXFXRXFH.js";
import {
  j,
  t3 as t
} from "./chunk-R5DM4YAB.js";
import {
  a
} from "./chunk-RFPH3ZTZ.js";
import {
  s3 as s
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/layers/support/associatedFeatureServiceUtils.js
async function l(r, e) {
  const t2 = p(r);
  if (!t2)
    throw new s("invalid-url", "Invalid scene service url");
  const a2 = { ...e, sceneServerUrl: t2.url.path, layerId: t2.sublayer ?? void 0 };
  if (a2.sceneLayerItem ?? (a2.sceneLayerItem = await s2(a2)), null == a2.sceneLayerItem)
    return f(a2.sceneServerUrl.replace("/SceneServer", "/FeatureServer"), a2);
  const i = await y(a2);
  if (!(i == null ? void 0 : i.url))
    throw new s("related-service-not-found", "Could not find feature service through portal item relationship");
  const l2 = await f(i.url, a2);
  return l2.portalItem = i, l2;
}
async function s2(r) {
  const e = (await c(r)).serviceItemId;
  if (!e)
    return null;
  const n = new S({ id: e, apiKey: r.apiKey }), o = await u(r);
  null != o && (n.portal = new j2({ url: o }));
  try {
    return n.load({ signal: r.signal });
  } catch (l2) {
    return a(l2), null;
  }
}
async function c(r) {
  if (r.rootDocument)
    return r.rootDocument;
  const n = { query: { f: "json", token: r.apiKey }, responseType: "json", signal: r.signal };
  try {
    const t2 = await j(r.sceneServerUrl, n);
    r.rootDocument = t2.data;
  } catch {
    r.rootDocument = {};
  }
  return r.rootDocument;
}
async function u(n) {
  var _a;
  const o = (_a = t) == null ? void 0 : _a.findServerInfo(n.sceneServerUrl);
  if (o == null ? void 0 : o.owningSystemUrl)
    return o.owningSystemUrl;
  const a2 = n.sceneServerUrl.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
  try {
    const r = (await j(a2, { query: { f: "json" }, responseType: "json", signal: n.signal })).data.owningSystemUrl;
    if (r)
      return r;
  } catch (i) {
    a(i);
  }
  return null;
}
async function f(r, t2) {
  const a2 = p(r);
  if (!a2)
    throw new s("invalid-feature-service-url", "Invalid feature service url");
  const i = a2.url.path, l2 = t2.layerId;
  if (null == l2)
    return { serverUrl: i };
  const s3 = c(t2), u2 = (r2) => {
    const n = { query: { f: "json" }, responseType: "json", authMode: r2, signal: t2.signal };
    return j(i, n);
  }, f2 = u2("anonymous").catch(() => u2("no-prompt")), [y2, m] = await Promise.all([f2, s3]), p2 = m == null ? void 0 : m.layers, d = y2.data && y2.data.layers;
  if (!Array.isArray(d))
    throw new Error("expected layers array");
  if (Array.isArray(p2))
    for (let e = 0; e < Math.min(p2.length, d.length); e++) {
      if (p2[e].id === l2)
        return { serverUrl: i, layerId: d[e].id };
    }
  else if (null != l2 && l2 < d.length)
    return { serverUrl: i, layerId: d[l2].id };
  throw new Error("could not find matching associated sublayer");
}
async function y({ sceneLayerItem: r, signal: e }) {
  if (!r)
    return null;
  try {
    const n = (await r.fetchRelatedItems({ relationshipType: "Service2Service", direction: "reverse" }, { signal: e })).find((r2) => "Feature Service" === r2.type) || null;
    if (!n)
      return null;
    const t2 = new S({ portal: n.portal, id: n.id });
    return await t2.load(), t2;
  } catch (n) {
    return a(n), null;
  }
}

export {
  l
};
//# sourceMappingURL=chunk-XUTOEHFJ.js.map
