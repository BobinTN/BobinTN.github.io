import {
  E,
  T,
  a,
  e,
  u
} from "./chunk-T56C4ORZ.js";
import {
  A,
  B,
  C,
  F,
  G,
  M,
  U,
  V,
  X,
  n,
  t
} from "./chunk-RCLKRKWR.js";
import {
  n as n2
} from "./chunk-MVXU4PVF.js";
import {
  r
} from "./chunk-WGO3VFQP.js";
import {
  s2 as s
} from "./chunk-WJ3HJKNC.js";
import {
  f,
  i,
  p
} from "./chunk-4V6374PV.js";

// node_modules/@arcgis/core/views/webgl/BufferObject.js
var _ = s.getLogger("esri.views.webgl.BufferObject");
var h = class _h {
  static createIndex(e2, t2, r2) {
    return new _h(e2, A.ELEMENT_ARRAY_BUFFER, t2, r2);
  }
  static createVertex(e2, t2, r2) {
    return new _h(e2, A.ARRAY_BUFFER, t2, r2);
  }
  static createUniform(e2, t2, r2) {
    if (e2.type !== n2.WEBGL2)
      throw new Error("Uniform buffers are supported in WebGL2 only!");
    return new _h(e2, A.UNIFORM_BUFFER, t2, r2);
  }
  static createPixelPack(e2, t2 = F.STREAM_READ, r2) {
    if (e2.type !== n2.WEBGL2)
      throw new Error("Pixel pack buffers are supported in WebGL2 only!");
    const i4 = new _h(e2, A.PIXEL_PACK_BUFFER, t2);
    return r2 && i4.setSize(r2), i4;
  }
  static createPixelUnpack(e2, t2 = F.STREAM_DRAW, r2) {
    if (e2.type !== n2.WEBGL2)
      throw new Error("Pixel unpack buffers are supported in WebGL2 only!");
    return new _h(e2, A.PIXEL_UNPACK_BUFFER, t2, r2);
  }
  constructor(e2, t2, r2, i4) {
    this._context = e2, this.bufferType = t2, this.usage = r2, this._glName = null, this._size = -1, this._indexType = void 0, e2.instanceCounter.increment(V.BufferObject, this), this._glName = this._context.gl.createBuffer(), u(this._context.gl), i4 && this.setData(i4);
  }
  get glName() {
    return this._glName;
  }
  get size() {
    return this._size;
  }
  get indexType() {
    return this._indexType;
  }
  get byteLength() {
    return this.bufferType === A.ELEMENT_ARRAY_BUFFER ? this._indexType === C.UNSIGNED_INT ? 4 * this._size : 2 * this._size : this._size;
  }
  get _isVAOAware() {
    return this.bufferType === A.ELEMENT_ARRAY_BUFFER || this.bufferType === A.ARRAY_BUFFER;
  }
  dispose() {
    var _a;
    if ((_a = this._context) == null ? void 0 : _a.gl) {
      if (this._glName) {
        this._context.gl.deleteBuffer(this._glName), this._glName = null;
      }
      this._context.instanceCounter.decrement(V.BufferObject, this), this._context = null;
    } else
      this._glName && _.warn("Leaked WebGL buffer object");
  }
  setSize(e2, t2 = null) {
    if (e2 <= 0 && _.error("Buffer size needs to be positive!"), this.bufferType === A.ELEMENT_ARRAY_BUFFER && null != t2)
      switch (this._indexType = t2, t2) {
        case C.UNSIGNED_SHORT:
          e2 *= 2;
          break;
        case C.UNSIGNED_INT:
          e2 *= 4;
      }
    this._setBufferData(e2);
  }
  setData(e2) {
    if (!e2)
      return;
    let t2 = e2.byteLength;
    this.bufferType === A.ELEMENT_ARRAY_BUFFER && (i(e2) && (t2 /= 2, this._indexType = C.UNSIGNED_SHORT), f(e2) && (t2 /= 4, this._indexType = C.UNSIGNED_INT)), this._setBufferData(t2, e2);
  }
  _setBufferData(e2, t2 = null) {
    this._size = e2;
    const r2 = this._context.getBoundVAO();
    this._isVAOAware && this._context.bindVAO(null), this._context.bindBuffer(this);
    const i4 = this._context.gl;
    null != t2 ? i4.bufferData(this.bufferType, t2, this.usage) : i4.bufferData(this.bufferType, e2, this.usage), u(i4), this._isVAOAware && this._context.bindVAO(r2);
  }
  setSubData(e2, t2, r2, i4) {
    if (!e2)
      return;
    (t2 < 0 || t2 * e2.BYTES_PER_ELEMENT >= this.byteLength) && _.error("offset is out of range!"), r2 >= i4 && _.error("end must be bigger than start!"), (t2 + (i4 - r2)) * e2.BYTES_PER_ELEMENT > this.byteLength && _.error("An attempt to write beyond the end of the buffer!");
    const o = this._context.getBoundVAO();
    this._isVAOAware && this._context.bindVAO(null), this._context.bindBuffer(this);
    const a2 = this._context.gl;
    if (this._context.type === n2.WEBGL2)
      a2.bufferSubData(this.bufferType, t2 * e2.BYTES_PER_ELEMENT, e2, r2, i4 - r2);
    else {
      const s2 = 0 === r2 && i4 === e2.length ? e2 : e2.subarray(r2, i4);
      a2.bufferSubData(this.bufferType, t2 * e2.BYTES_PER_ELEMENT, s2);
    }
    u(a2), this._isVAOAware && this._context.bindVAO(o);
  }
  getSubData(e2, t2 = 0, r2, i4) {
    if (this._context.type !== n2.WEBGL2)
      return void _.error("Get buffer subdata is supported in WebGL2 only!");
    if (r2 < 0 || i4 < 0)
      return void _.error("Problem getting subdata: offset and length were less than zero!");
    const s2 = E2(e2) ? e2.BYTES_PER_ELEMENT : 1;
    if (s2 * ((r2 ?? 0) + (i4 ?? 0)) > e2.byteLength)
      return void _.error("Problem getting subdata: offset and length exceeded destination size!");
    t2 + s2 * (i4 ?? 0) > this.byteLength && _.warn("Potential problem getting subdata: requested data exceeds buffer size!");
    const a2 = this._context.gl;
    this._context.bindBuffer(this, A.COPY_READ_BUFFER), a2.getBufferSubData(A.COPY_READ_BUFFER, t2, e2, r2, i4), this._context.unbindBuffer(A.COPY_READ_BUFFER);
  }
  async getSubDataAsync(e2, t2 = 0, r2, i4) {
    this._context.type === n2.WEBGL2 ? (await this._context.clientWaitAsync(), this.getSubData(e2, t2, r2, i4)) : _.error("Get buffer subdata is supported in WebGL2 only!");
  }
};
function E2(t2) {
  return p(t2);
}

// node_modules/@arcgis/core/views/webgl/RenderbufferDescriptor.js
var i2 = class {
  constructor(t2, i4, h3 = i4) {
    this.internalFormat = t2, this.width = i4, this.height = h3, this.multisampled = false, this.samples = 1;
  }
};
function h2(i4) {
  return i4.width <= 0 || i4.height <= 0 || null == i4.internalFormat ? 0 : i4.width * i4.height * E(i4.internalFormat);
}

// node_modules/@arcgis/core/views/webgl/Renderbuffer.js
var i3 = class {
  constructor(s2, i4) {
    this._context = s2, this._descriptor = i4, this.type = e.RenderBuffer, this._context.instanceCounter.increment(V.Renderbuffer, this);
    const n3 = this._context.gl;
    this.glName = n3.createRenderbuffer(), this._context.bindRenderbuffer(this);
    const { width: o, height: h3, internalFormat: c, multisampled: f2 } = i4;
    if (f2) {
      if (this._context.type !== n2.WEBGL2)
        throw new Error("Multisampled renderbuffers are not supported in WebGL1!");
      n3.renderbufferStorageMultisample(n3.RENDERBUFFER, this.samples, c, o, h3);
    } else
      n3.renderbufferStorage(n3.RENDERBUFFER, c, o, h3);
  }
  get descriptor() {
    return this._descriptor;
  }
  get samples() {
    const e2 = this._descriptor.samples, t2 = this._context.parameters.maxSamples;
    return e2 ? Math.min(e2, t2) : t2;
  }
  get gpuMemoryUsage() {
    return h2(this._descriptor);
  }
  resize(e2, t2) {
    const r2 = this._descriptor;
    if (r2.width === e2 && r2.height === t2)
      return;
    r2.width = e2, r2.height = t2;
    const s2 = this._context.gl;
    if (this._context.bindRenderbuffer(this), r2.multisampled) {
      s2.renderbufferStorageMultisample(s2.RENDERBUFFER, this.samples, r2.internalFormat, r2.width, r2.height);
    } else
      s2.renderbufferStorage(s2.RENDERBUFFER, r2.internalFormat, r2.width, r2.height);
  }
  dispose() {
    this._context && (this._context.gl.deleteRenderbuffer(this.glName), this._context.instanceCounter.decrement(V.Renderbuffer, this), this._context = null);
  }
};

// node_modules/@arcgis/core/views/webgl/FramebufferObject.js
var x = s.getLogger("esri.views.webgl.FramebufferObject");
var E3 = class _E {
  constructor(t2, e2, i4 = null) {
    this._context = t2, this._glName = null, this._colorAttachments = /* @__PURE__ */ new Map(), this._depthStencilBuffer = null, this._depthStencilTexture = null, this._initialized = false, t2.instanceCounter.increment(V.FramebufferObject, this);
    const r2 = g(e2) ? e2 : new T(this._context, e2);
    if (this._colorAttachments.set(X.COLOR_ATTACHMENT0, r2), this._validateTextureDescriptor(r2.descriptor), this._validateColorAttachmentPoint(X.COLOR_ATTACHMENT0), null != i4)
      if (b(i4))
        this._context.capabilities.depthTexture || console.error("Setting the depth/stencil texture as an attachment requires WEBGL_depth_texture or WebGL2"), this._depthStencilTexture = g(i4) ? i4 : new T(this._context, i4), this._validateTextureDescriptor(this._depthStencilTexture.descriptor);
      else {
        const t3 = A2(i4) ? i4 : new i3(this._context, i4);
        this._depthStencilBuffer = t3, this._validateRenderBufferDescriptor(t3.descriptor);
      }
  }
  dispose() {
    var _a, _b;
    if (0 === this._colorAttachments.size && !this._glName)
      return;
    const t2 = this._context.getBoundFramebufferObject();
    if (this._colorAttachments.forEach((t3, e2) => {
      var _a2;
      return (_a2 = this.detachColorTexture(e2)) == null ? void 0 : _a2.dispose();
    }), (_a = this.detachDepthStencilBuffer()) == null ? void 0 : _a.dispose(), (_b = this.detachDepthStencilTexture()) == null ? void 0 : _b.dispose(), this._glName) {
      this._context.gl.deleteFramebuffer(this._glName), this._glName = null;
    }
    this._context.bindFramebuffer(t2), this._context.instanceCounter.decrement(V.FramebufferObject, this);
  }
  get glName() {
    return this._glName;
  }
  get colorTexture() {
    return this._colorAttachments.get(X.COLOR_ATTACHMENT0);
  }
  get depthStencil() {
    return this._depthStencilTexture || this._depthStencilBuffer;
  }
  get depthStencilTexture() {
    return this._depthStencilTexture;
  }
  get width() {
    var _a;
    const t2 = this._colorAttachments.get(X.COLOR_ATTACHMENT0);
    return ((_a = t2 == null ? void 0 : t2.descriptor) == null ? void 0 : _a.width) ?? 0;
  }
  get height() {
    var _a;
    const t2 = this._colorAttachments.get(X.COLOR_ATTACHMENT0);
    return ((_a = t2 == null ? void 0 : t2.descriptor) == null ? void 0 : _a.height) ?? 0;
  }
  get gpuMemoryUsage() {
    var _a;
    return [...this._colorAttachments].reduce((t2, [e2, i4]) => t2 + i4.gpuMemoryUsage, ((_a = this.depthStencil) == null ? void 0 : _a.gpuMemoryUsage) ?? 0);
  }
  getColorTexture(t2) {
    const e2 = this._colorAttachments.get(t2);
    return e2 && g(e2) ? e2 : null;
  }
  get colorAttachments() {
    return [...this._colorAttachments.keys()];
  }
  attachColorTexture(t2, e2 = X.COLOR_ATTACHMENT0) {
    var _a;
    if (!t2)
      return;
    this._validateColorAttachmentPoint(e2);
    const i4 = t2.descriptor;
    this._validateTextureDescriptor(i4), (_a = this.detachColorTexture(e2)) == null ? void 0 : _a.dispose(), this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(t2.glName, e2)), this._colorAttachments.set(e2, t2);
  }
  detachColorTexture(t2 = X.COLOR_ATTACHMENT0) {
    const e2 = this._colorAttachments.get(t2);
    if (e2) {
      if (this._initialized) {
        const e3 = this._context.getBoundFramebufferObject();
        this._context.bindFramebuffer(this), this._framebufferTexture2D(null, t2), this._context.bindFramebuffer(e3);
      }
      return this._colorAttachments.delete(t2), e2;
    }
  }
  setColorTextureTarget(t2, e2 = X.COLOR_ATTACHMENT0) {
    const i4 = this._colorAttachments.get(e2);
    i4 && this._framebufferTexture2D(i4.glName, e2, t2);
  }
  attachDepthStencil(t2) {
    if (t2)
      switch (t2.type) {
        case e.Texture:
          return this._attachDepthStencilTexture(t2);
        case e.RenderBuffer:
          return this._attachDepthStencilBuffer(t2);
      }
  }
  _attachDepthStencilTexture(t2) {
    var _a;
    if (null == t2)
      return;
    const e2 = t2.descriptor;
    e2.pixelFormat !== G.DEPTH_STENCIL && e2.pixelFormat !== G.DEPTH24_STENCIL8 && console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!"), e2.dataType !== U.UNSIGNED_INT_24_8 && console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"), this._context.capabilities.depthTexture || console.error("Extension WEBGL_depth_texture isn't supported therefore it is no possible to set the depth/stencil texture!"), this._validateTextureDescriptor(e2), this._disposeDepthStencilAttachments(), this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(t2.glName, t)), (_a = this._depthStencilTexture) == null ? void 0 : _a.dispose(), this._depthStencilTexture = t2;
  }
  detachDepthStencilTexture() {
    const t2 = this._depthStencilTexture;
    return t2 && this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(null, t)), this._depthStencilTexture = null, t2;
  }
  _attachDepthStencilBuffer(t2) {
    if (null == t2)
      return;
    const e2 = t2.descriptor;
    if (this._validateRenderBufferDescriptor(e2), this._disposeDepthStencilAttachments(), this._initialized) {
      this._context.bindFramebuffer(this);
      const i4 = this._context.gl, r2 = this._getGLAttachmentPoint(e2);
      i4.framebufferRenderbuffer(n.FRAMEBUFFER, r2, i4.RENDERBUFFER, t2.glName);
    }
    this._depthStencilBuffer = t2;
  }
  detachDepthStencilBuffer() {
    const t2 = this._depthStencilBuffer;
    if (t2 && this._initialized) {
      this._context.bindFramebuffer(this);
      const e2 = this._context.gl, i4 = this._getGLAttachmentPoint(t2.descriptor);
      e2.framebufferRenderbuffer(n.FRAMEBUFFER, i4, e2.RENDERBUFFER, null);
    }
    return this._depthStencilBuffer = null, t2;
  }
  copyToTexture(t2, e2, i4, r2, s2, h3, n3) {
    (t2 < 0 || e2 < 0 || s2 < 0 || h3 < 0) && console.error("Offsets cannot be negative!"), (i4 <= 0 || r2 <= 0) && console.error("Copy width and height must be greater than zero!");
    const o = n3.descriptor;
    n3.descriptor.target !== M.TEXTURE_2D && console.error("Texture target must be TEXTURE_2D!"), (null == (o == null ? void 0 : o.width) || null == (o == null ? void 0 : o.height) || t2 + i4 > this.width || e2 + r2 > this.height || s2 + i4 > o.width || h3 + r2 > o.height) && console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");
    const c = this._context, a2 = c.bindTexture(n3, T.TEXTURE_UNIT_FOR_UPDATES);
    c.setActiveTexture(T.TEXTURE_UNIT_FOR_UPDATES), c.bindFramebuffer(this), c.gl.copyTexSubImage2D(M.TEXTURE_2D, 0, s2, h3, t2, e2, i4, r2), c.bindTexture(a2, T.TEXTURE_UNIT_FOR_UPDATES);
  }
  readPixels(t2, e2, i4, r2, s2, h3, n3) {
    (i4 <= 0 || r2 <= 0) && console.error("Copy width and height must be greater than zero!"), n3 || console.error("Target memory is not initialized!"), this._context.bindFramebuffer(this), this._context.gl.readPixels(t2, e2, i4, r2, s2, h3, n3);
  }
  async readPixelsAsync(t2, e2, h3, n3, o, c, a2) {
    if (this._context.type !== n2.WEBGL2)
      return a() && console.warn("Attempting to read pixels using pixel buffer object without WebGL2"), void this.readPixels(t2, e2, h3, n3, o, c, a2);
    const u2 = this._context.gl, _2 = h.createPixelPack(this._context, F.STREAM_READ, a2.byteLength);
    this._context.bindBuffer(_2), this._context.bindFramebuffer(this), u2.readPixels(t2, e2, h3, n3, o, c, 0), this._context.unbindBuffer(A.PIXEL_PACK_BUFFER), await _2.getSubDataAsync(a2), _2.dispose();
  }
  resize(t2, e2) {
    var _a, _b;
    if (this.width === t2 && this.height === e2)
      return;
    const i4 = { width: t2, height: e2 };
    S(i4, this._context.parameters.maxTextureSize), this._colorAttachments.forEach((t3) => t3.resize(i4.width, i4.height)), (_a = this._depthStencilTexture) == null ? void 0 : _a.resize(i4.width, i4.height), this._initialized && (S(i4, this._context.parameters.maxRenderbufferSize), (_b = this._depthStencilBuffer) == null ? void 0 : _b.resize(i4.width, i4.height), this._context.getBoundFramebufferObject() === this && this._context.bindFramebuffer(null), this._initialized = false);
  }
  initializeAndBind(t2 = n.FRAMEBUFFER) {
    const e2 = this._context.gl;
    if (this._initialized)
      return void e2.bindFramebuffer(t2, this.glName);
    this._glName && e2.deleteFramebuffer(this._glName);
    const i4 = e2.createFramebuffer();
    if (e2.bindFramebuffer(t2, i4), this._colorAttachments.forEach((e3, i5) => this._framebufferTexture2D(e3.glName, i5, R(e3), t2)), this._depthStencilBuffer) {
      const i5 = this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);
      e2.framebufferRenderbuffer(t2, i5, e2.RENDERBUFFER, this._depthStencilBuffer.glName);
    } else
      this._depthStencilTexture && this._framebufferTexture2D(this._depthStencilTexture.glName, e2.DEPTH_STENCIL_ATTACHMENT, R(this._depthStencilTexture), t2);
    if (a()) {
      e2.checkFramebufferStatus(t2) !== e2.FRAMEBUFFER_COMPLETE && console.error("Framebuffer is incomplete!");
    }
    this._glName = i4, this._initialized = true;
  }
  _framebufferTexture2D(t2, e2 = X.COLOR_ATTACHMENT0, i4 = M.TEXTURE_2D, r2 = n.FRAMEBUFFER, s2 = 0) {
    this._context.gl.framebufferTexture2D(r2, e2, i4, t2, s2);
  }
  _disposeDepthStencilAttachments() {
    const t2 = this._context.gl;
    if (this._depthStencilBuffer) {
      if (this._initialized) {
        this._context.bindFramebuffer(this);
        const e2 = this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);
        t2.framebufferRenderbuffer(n.FRAMEBUFFER, e2, t2.RENDERBUFFER, null);
      }
      this._depthStencilBuffer = r(this._depthStencilBuffer);
    }
    this._depthStencilTexture && (this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(null, t2.DEPTH_STENCIL_ATTACHMENT)), this._depthStencilTexture = r(this._depthStencilTexture));
  }
  _validateTextureDescriptor(t2) {
    t2.target !== M.TEXTURE_2D && t2.target !== M.TEXTURE_CUBE_MAP && console.error("Texture type must be TEXTURE_2D or TEXTURE_CUBE_MAP!"), S(t2, this._context.parameters.maxTextureSize), this._validateBufferDimensions(t2);
  }
  _validateRenderBufferDescriptor(t2) {
    S(t2, this._context.parameters.maxRenderbufferSize), this._validateBufferDimensions(t2);
  }
  _validateBufferDimensions(t2) {
    t2.width <= 0 && (t2.width = this.width), t2.height <= 0 && (t2.height = this.height), this.width > 0 && this.height > 0 && (this.width === t2.width && this.height === t2.height || console.error("Attachment size must match framebuffer size!"));
  }
  _getGLAttachmentPoint(t2) {
    switch (t2.internalFormat) {
      case B.DEPTH_COMPONENT16:
      case B.DEPTH_COMPONENT24:
      case B.DEPTH_COMPONENT32F:
        return this._context.gl.DEPTH_ATTACHMENT;
      case B.DEPTH24_STENCIL8:
      case B.DEPTH32F_STENCIL8:
      case B.DEPTH_STENCIL:
        return this._context.gl.DEPTH_STENCIL_ATTACHMENT;
      case B.STENCIL_INDEX8:
        return this._context.gl.STENCIL_ATTACHMENT;
    }
  }
  _validateColorAttachmentPoint(e2) {
    if (-1 === _E._MAX_COLOR_ATTACHMENTS) {
      const t2 = this._context.capabilities.drawBuffers;
      if (t2) {
        const e3 = this._context.gl;
        _E._MAX_COLOR_ATTACHMENTS = e3.getParameter(t2.MAX_COLOR_ATTACHMENTS);
      } else
        _E._MAX_COLOR_ATTACHMENTS = 1;
    }
    const i4 = e2 - X.COLOR_ATTACHMENT0;
    i4 + 1 > _E._MAX_COLOR_ATTACHMENTS && s.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject", `illegal attachment point for color attachment: ${i4 + 1}. Implementation supports up to ${_E._MAX_COLOR_ATTACHMENTS} color attachments`);
  }
};
function g(t2) {
  return null != t2 && "type" in t2 && t2.type === e.Texture;
}
function A2(t2) {
  return null != t2 && "type" in t2 && t2.type === e.RenderBuffer;
}
function b(t2) {
  return g(t2) || null != t2 && "pixelFormat" in t2;
}
function S(t2, e2) {
  const i4 = Math.max(t2.width, t2.height);
  if (i4 > e2) {
    x.warn(`Resizing FBO attachment size ${t2.width}x${t2.height} to device limit ${e2}`);
    const r2 = e2 / i4;
    return t2.width = Math.round(t2.width * r2), t2.height = Math.round(t2.height * r2), false;
  }
  return true;
}
function R(t2) {
  return t2.descriptor.target === M.TEXTURE_CUBE_MAP ? M.TEXTURE_CUBE_MAP_POSITIVE_X : M.TEXTURE_2D;
}
E3._MAX_COLOR_ATTACHMENTS = -1;

export {
  h,
  i2 as i,
  i3 as i2,
  E3 as E
};
//# sourceMappingURL=chunk-A6KO3R3G.js.map
