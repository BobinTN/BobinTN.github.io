import {
  N,
  P,
  a,
  a2 as a3,
  a3 as a4,
  c,
  c3 as c2,
  d,
  d3 as d2,
  d4 as d3,
  e as e3,
  e2 as e4,
  e3 as e5,
  e4 as e6,
  f2 as f,
  h3 as h,
  h4 as h2,
  i,
  i2,
  l,
  l2,
  m,
  n as n2,
  o,
  o2 as o3,
  o3 as o5,
  o5 as o6,
  o6 as o9,
  p,
  s,
  s2 as s4,
  t,
  t2,
  t4 as t3,
  u,
  x
} from "./chunk-73EPNGYH.js";
import {
  o as o4
} from "./chunk-BNTQULGG.js";
import {
  s as s2
} from "./chunk-2CJ4SBZD.js";
import {
  e as e7
} from "./chunk-LGRHAUSA.js";
import {
  a as a2,
  o as o7,
  o3 as o8,
  s as s3
} from "./chunk-55WTSNPL.js";
import {
  o as o2
} from "./chunk-RN5RTM2J.js";
import {
  e
} from "./chunk-GLBAW5CR.js";
import {
  e as e2
} from "./chunk-76KPSQLT.js";
import {
  n
} from "./chunk-TWNBDJHC.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js
function e8(e9, o10) {
  const n4 = e9.fragment;
  switch (n4.code.add(o2`struct ShadingNormalParameters {
vec3 normalView;
vec3 viewDirection;
} shadingParams;`), o10.doubleSidedMode) {
    case i3.None:
      n4.code.add(o2`vec3 shadingNormal(ShadingNormalParameters params) {
return normalize(params.normalView);
}`);
      break;
    case i3.View:
      n4.code.add(o2`vec3 shadingNormal(ShadingNormalParameters params) {
return dot(params.normalView, params.viewDirection) > 0.0 ? normalize(-params.normalView) : normalize(params.normalView);
}`);
      break;
    case i3.WindingOrder:
      n4.code.add(o2`vec3 shadingNormal(ShadingNormalParameters params) {
return gl_FrontFacing ? normalize(params.normalView) : normalize(-params.normalView);
}`);
      break;
    default:
      n(o10.doubleSidedMode);
    case i3.COUNT:
  }
}
var i3;
!function(a6) {
  a6[a6.None = 0] = "None", a6[a6.View = 1] = "View", a6[a6.WindingOrder = 2] = "WindingOrder", a6[a6.COUNT = 3] = "COUNT";
}(i3 || (i3 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js
function m2(m3, c3) {
  const i5 = m3.fragment;
  c3.hasVertexTangents ? (m3.attributes.add(e.TANGENT, "vec4"), m3.varyings.add("vTangent", "vec4"), c3.doubleSidedMode === i3.WindingOrder ? i5.code.add(o2`mat3 computeTangentSpace(vec3 normal) {
float tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;
vec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);
vec3 bitangent = cross(normal, tangent) * tangentHeadedness;
return mat3(tangent, bitangent, normal);
}`) : i5.code.add(o2`mat3 computeTangentSpace(vec3 normal) {
float tangentHeadedness = vTangent.w;
vec3 tangent = normalize(vTangent.xyz);
vec3 bitangent = cross(normal, tangent) * tangentHeadedness;
return mat3(tangent, bitangent, normal);
}`)) : i5.code.add(o2`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {
vec3 Q1 = dFdx(pos);
vec3 Q2 = dFdy(pos);
vec2 stx = dFdx(st);
vec2 sty = dFdy(st);
float det = stx.t * sty.s - sty.t * stx.s;
vec3 T = stx.t * Q2 - sty.t * Q1;
T = T - normal * dot(normal, T);
T *= inversesqrt(max(dot(T,T), 1.e-10));
vec3 B = sign(det) * cross(normal, T);
return mat3(T, B, normal);
}`), c3.textureCoordinateType !== d.None && (m3.include(s, c3), i5.uniforms.add(c3.pbrTextureBindType === a2.Pass ? new s3("normalTexture", (e9) => e9.textureNormal) : new s2("normalTexture", (e9) => e9.textureNormal)), i5.code.add(o2`vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {
vec3 rawNormal = textureLookup(normalTexture, uv).rgb * 2.0 - 1.0;
return tangentSpace * rawNormal;
}`));
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js
function a5(a6) {
  a6.vertex.uniforms.add(new e4("colorTextureTransformMatrix", (e9) => null != e9.colorTextureTransformMatrix ? e9.colorTextureTransformMatrix : e2())), a6.varyings.add("colorUV", "vec2"), a6.vertex.code.add(o2`void forwardColorUV(){
colorUV = (colorTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}
function s5(a6) {
  a6.vertex.uniforms.add(new e4("normalTextureTransformMatrix", (e9) => null != e9.normalTextureTransformMatrix ? e9.normalTextureTransformMatrix : e2())), a6.varyings.add("normalUV", "vec2"), a6.vertex.code.add(o2`void forwardNormalUV(){
normalUV = (normalTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}
function i4(a6) {
  a6.vertex.uniforms.add(new e4("emissiveTextureTransformMatrix", (e9) => null != e9.emissiveTextureTransformMatrix ? e9.emissiveTextureTransformMatrix : e2())), a6.varyings.add("emissiveUV", "vec2"), a6.vertex.code.add(o2`void forwardEmissiveUV(){
emissiveUV = (emissiveTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}
function n3(a6) {
  a6.vertex.uniforms.add(new e4("occlusionTextureTransformMatrix", (e9) => null != e9.occlusionTextureTransformMatrix ? e9.occlusionTextureTransformMatrix : e2())), a6.varyings.add("occlusionUV", "vec2"), a6.vertex.code.add(o2`void forwardOcclusionUV(){
occlusionUV = (occlusionTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}
function t4(a6) {
  a6.vertex.uniforms.add(new e4("metallicRoughnessTextureTransformMatrix", (e9) => null != e9.metallicRoughnessTextureTransformMatrix ? e9.metallicRoughnessTextureTransformMatrix : e2())), a6.varyings.add("metallicRoughnessUV", "vec2"), a6.vertex.code.add(o2`void forwardMetallicRoughnessUV(){
metallicRoughnessUV = (metallicRoughnessTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`);
}

// node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js
function H(H2) {
  const J2 = new o8(), { vertex: K, fragment: Q, varyings: X } = J2;
  if (d3(K, H2), J2.include(o5), X.add("vpos", "vec3"), J2.include(l2, H2), J2.include(N, H2), J2.include(a3, H2), H2.hasColorTextureTransform && J2.include(a5), H2.output === o.Color || H2.output === o.Alpha) {
    H2.hasNormalTextureTransform && J2.include(s5), H2.hasEmissionTextureTransform && J2.include(i4), H2.hasOcclusionTextureTransform && J2.include(n3), H2.hasMetallicRoughnessTextureTransform && J2.include(t4), f(K, H2), J2.include(t, H2), J2.include(o6, H2);
    const o10 = H2.normalType === a.Attribute || H2.normalType === a.Compressed;
    o10 && H2.offsetBackfaces && J2.include(e5), J2.include(m2, H2), J2.include(c2, H2), H2.instancedColor && J2.attributes.add(e.INSTANCECOLOR, "vec4"), X.add("vPositionLocal", "vec3"), J2.include(o3, H2), J2.include(d2, H2), J2.include(i, H2), J2.include(e6, H2), K.uniforms.add(new e7("externalColor", (e9) => e9.externalColor)), X.add("vcolorExt", "vec4"), H2.multipassEnabled && X.add("depth", "float"), K.code.add(o2`
      void main(void) {
        forwardNormalizedVertexColor();
        vcolorExt = externalColor;
        ${H2.instancedColor ? "vcolorExt *= instanceColor * 0.003921568627451;" : ""}
        vcolorExt *= vvColor();
        vcolorExt *= getSymbolColor();
        forwardColorMixMode();

        if (vcolorExt.a < ${o2.float(t2)}) {
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
        } else {
          vpos = getVertexInLocalOriginSpace();
          vPositionLocal = vpos - view[3].xyz;
          vpos = subtractOrigin(vpos);
          ${o10 ? o2`vNormalWorld = dpNormal(vvLocalNormal(normalModel()));` : ""}
          vpos = addVerticalOffset(vpos, localOrigin);
          ${H2.hasVertexTangents ? "vTangent = dpTransformVertexTangent(tangent);" : ""}
          gl_Position = transformPosition(proj, view, vpos);
          ${o10 && H2.offsetBackfaces ? "gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);" : ""}
        }

        ${H2.multipassEnabled ? "depth = (view * vec4(vpos, 1.0)).z;" : ""}
        forwardLinearDepth();
        forwardTextureCoordinates();
        ${H2.hasColorTextureTransform ? o2`forwardColorUV();` : ""}
        ${H2.hasNormalTextureTransform ? o2`forwardNormalUV();` : ""}
        ${H2.hasEmissionTextureTransform ? o2`forwardEmissiveUV();` : ""}
        ${H2.hasOcclusionTextureTransform ? o2`forwardOcclusionUV();` : ""}
        ${H2.hasMetallicRoughnessTextureTransform ? o2`forwardMetallicRoughnessUV();` : ""}
      }
    `);
  }
  switch (H2.output) {
    case o.Alpha:
      J2.include(P, H2), J2.include(s4, H2), J2.include(o9, H2), Q.uniforms.add(new o7("opacity", (e9) => e9.opacity), new o7("layerOpacity", (e9) => e9.layerOpacity)), H2.hasColorTexture && Q.uniforms.add(new s3("tex", (e9) => e9.texture)), Q.include(i2), Q.code.add(o2`
      void main() {
        discardBySlice(vpos);
        ${H2.multipassEnabled ? "terrainDepthTest(depth);" : ""}
        ${H2.hasColorTexture ? o2`
                vec4 texColor = texture(tex, ${H2.hasColorTextureTransform ? o2`colorUV` : o2`vuv0`});
                ${H2.textureAlphaPremultiplied ? "texColor.rgb /= texColor.a;" : ""}
                discardOrAdjustAlpha(texColor);` : o2`vec4 texColor = vec4(1.0);`}
        ${H2.hasVertexColors ? o2`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : o2`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}
        fragColor = vec4(opacity_);
      }
    `);
      break;
    case o.Color:
      J2.include(P, H2), J2.include(p, H2), J2.include(t3, H2), J2.include(s4, H2), J2.include(H2.instancedDoublePrecision ? x : m, H2), J2.include(o9, H2), f(Q, H2), Q.uniforms.add(K.uniforms.get("localOrigin"), new e3("ambient", (e9) => e9.ambient), new e3("diffuse", (e9) => e9.diffuse), new o7("opacity", (e9) => e9.opacity), new o7("layerOpacity", (e9) => e9.layerOpacity)), H2.hasColorTexture && Q.uniforms.add(new s3("tex", (e9) => e9.texture)), J2.include(l, H2), J2.include(n2, H2), Q.include(i2), J2.include(e8, H2), u(Q), h2(Q), a4(Q), Q.code.add(o2`
      void main() {
        discardBySlice(vpos);
        ${H2.multipassEnabled ? "terrainDepthTest(depth);" : ""}
        ${H2.hasColorTexture ? o2`
                vec4 texColor = texture(tex, ${H2.hasColorTextureTransform ? o2`colorUV` : o2`vuv0`});
                ${H2.textureAlphaPremultiplied ? "texColor.rgb /= texColor.a;" : ""}
                discardOrAdjustAlpha(texColor);` : o2`vec4 texColor = vec4(1.0);`}
        shadingParams.viewDirection = normalize(vpos - cameraPosition);
        ${H2.normalType === a.ScreenDerivative ? o2`
                vec3 normal = screenDerivativeNormal(vPositionLocal);` : o2`
                shadingParams.normalView = vNormalWorld;
                vec3 normal = shadingNormal(shadingParams);`}
        ${H2.pbrMode === c.Normal ? "applyPBRFactors();" : ""}
        float ssao = evaluateAmbientOcclusionInverse();
        ssao *= getBakedOcclusion();

        vec3 posWorld = vpos + localOrigin;

        float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);
        float shadow = ${H2.receiveShadows ? "readShadowMap(vpos, linearDepth)" : H2.spherical ? "lightingGlobalFactor * (1.0 - additionalAmbientScale)" : "0.0"};

        vec3 matColor = max(ambient, diffuse);
        ${H2.hasVertexColors ? o2`
                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : o2`
                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}
        ${H2.hasNormalTexture ? o2`
                mat3 tangentSpace = ${H2.hasVertexTangents ? "computeTangentSpace(normal);" : "computeTangentSpace(normal, vpos, vuv0);"}
                vec3 shadingNormal = computeTextureNormal(tangentSpace, ${H2.hasNormalTextureTransform ? o2`normalUV` : "vuv0"});` : o2`vec3 shadingNormal = normal;`}
        vec3 normalGround = ${H2.spherical ? o2`normalize(posWorld);` : o2`vec3(0.0, 0.0, 1.0);`}

        ${H2.snowCover ? o2`
                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));
                albedo = mix(albedo, vec3(1), snow);
                shadingNormal = mix(shadingNormal, normal, snow);
                ssao = mix(ssao, 1.0, snow);` : ""}

        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;

        ${H2.pbrMode === c.Normal || H2.pbrMode === c.Schematic ? o2`
                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];
                ${H2.snowCover ? o2`
                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);
                        emission = mix(emission, vec3(0.0), snow);` : ""}

                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : o2`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}
        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);
        ${H2.transparencyPassType === o4.Color ? o2`fragColor = premultiplyAlpha(fragColor);` : ""}
      }
    `);
  }
  return J2.include(h, H2), J2;
}
var J = Object.freeze(Object.defineProperty({ __proto__: null, build: H }, Symbol.toStringTag, { value: "Module" }));

export {
  i3 as i,
  H,
  J
};
//# sourceMappingURL=chunk-GY6EZXAJ.js.map
