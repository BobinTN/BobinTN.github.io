import {
  c as c4
} from "./chunk-ADNT35Y3.js";
import {
  p as p2
} from "./chunk-3F7Z2GZ4.js";
import {
  c as c3
} from "./chunk-JDVR6MOC.js";
import {
  n as n5
} from "./chunk-ZRKSP45X.js";
import {
  D as D2,
  y as y2
} from "./chunk-FYSZRVYZ.js";
import {
  a as a5
} from "./chunk-6C2TVJRX.js";
import {
  e as e2
} from "./chunk-323PT7GB.js";
import {
  i as i4
} from "./chunk-TKJNJ6KH.js";
import {
  l
} from "./chunk-36R5EC6A.js";
import {
  s as s4
} from "./chunk-KLPBCYCG.js";
import {
  p as p3
} from "./chunk-3HOLDCR2.js";
import {
  i as i5
} from "./chunk-DCL3YBJN.js";
import {
  C
} from "./chunk-3ZWLSDVT.js";
import {
  o as o4
} from "./chunk-5DLICG33.js";
import {
  a as a6,
  d as d3
} from "./chunk-ZILXWPAR.js";
import {
  p as p4
} from "./chunk-HPFRYEGX.js";
import {
  m as m4,
  o as o3,
  u
} from "./chunk-F64GI7MS.js";
import {
  A as A2
} from "./chunk-U4ONWLTG.js";
import {
  j as j5
} from "./chunk-POSLR7O2.js";
import {
  f as f3
} from "./chunk-VOYU5TTK.js";
import {
  a as a3
} from "./chunk-P5VIVFJT.js";
import {
  t as t3
} from "./chunk-PIEUUBJ5.js";
import {
  u as u2
} from "./chunk-YIAYIZOZ.js";
import {
  m as m2
} from "./chunk-P5GW5DPX.js";
import {
  C as C2,
  I as I3,
  a as a4,
  b as b3,
  c as c5,
  m as m6,
  p as p7,
  y as y3
} from "./chunk-VIOPOI6P.js";
import {
  i as i3
} from "./chunk-DMLVD5AS.js";
import {
  A,
  D,
  E,
  F as F2,
  I as I2,
  M as M2,
  O,
  P,
  Q,
  R,
  S,
  T,
  b as b2,
  f as f2,
  g as g2,
  j as j4,
  m as m5,
  q,
  w,
  x
} from "./chunk-DOALI2C2.js";
import {
  d as d2
} from "./chunk-BYK6DXRK.js";
import {
  S as S2
} from "./chunk-IYJG2X3Y.js";
import {
  F
} from "./chunk-HBL2432S.js";
import {
  t as t2
} from "./chunk-T2S5L26W.js";
import {
  b
} from "./chunk-45OAWGCA.js";
import {
  t
} from "./chunk-R4LYFMZX.js";
import {
  K
} from "./chunk-X2TA76Q5.js";
import {
  b as b4
} from "./chunk-YXRSJYLG.js";
import {
  p as p5
} from "./chunk-KBKTS574.js";
import {
  c as c2
} from "./chunk-FWR4JURK.js";
import {
  k as k2
} from "./chunk-BELGAUAK.js";
import {
  j2 as j3
} from "./chunk-HITXLR5N.js";
import {
  n as n4
} from "./chunk-S6NERLXF.js";
import {
  g as g3,
  p as p6
} from "./chunk-Z6KIMOUA.js";
import {
  n as n3
} from "./chunk-SZAJDZCO.js";
import {
  i
} from "./chunk-VTWXDFFD.js";
import {
  i as i2
} from "./chunk-WJ4LS3YG.js";
import {
  h as h2,
  m as m3,
  p
} from "./chunk-AOJ6OCPK.js";
import {
  j as j2
} from "./chunk-OIIDE5GZ.js";
import {
  V as V2,
  n
} from "./chunk-JUZJCTW2.js";
import {
  m
} from "./chunk-CCXEAKIM.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import {
  o as o2
} from "./chunk-WURET5CW.js";
import {
  f,
  r
} from "./chunk-QWPLZ3QH.js";
import {
  n as n2
} from "./chunk-N2K4VRZH.js";
import {
  s as s3
} from "./chunk-OMPEZIP5.js";
import {
  I,
  V,
  j
} from "./chunk-R5DM4YAB.js";
import {
  g,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c,
  d
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a as a2,
  h,
  k
} from "./chunk-RFPH3ZTZ.js";
import {
  a,
  o,
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import {
  has
} from "./chunk-4V6374PV.js";

// node_modules/@arcgis/core/layers/graphics/sources/MemorySource.js
var _ = 0;
var T2 = class extends m.LoadableMixin(n2(V2)) {
  constructor(e4) {
    super(e4), this._idToClientGraphic = null, this.type = "memory";
  }
  load(e4) {
    const t4 = null != e4 ? e4.signal : null;
    return this.addResolvingPromise(this._startWorker(t4)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  get _workerGeometryType() {
    var _a;
    const e4 = (_a = this.layer) == null ? void 0 : _a.geometryType;
    return e4 ? this._geometryTypeRequiresClientGraphicMapping(e4) ? "polygon" : e4 : null;
  }
  applyEdits(e4) {
    return this.load().then(() => this._applyEdits(e4));
  }
  openPorts() {
    return this.load().then(() => this._connection.openPorts());
  }
  async queryFeatures(e4, t4 = {}) {
    await this.load(t4);
    const r2 = await this._connection.invoke("queryFeatures", e4 ? e4.toJSON() : null, t4);
    t(e4, this.layer.spatialReference, r2);
    const s5 = d2.fromJSON(r2);
    if (!this._requiresClientGraphicMapping())
      return s5;
    const i7 = this.layer.objectIdField;
    for (const o6 of s5.features) {
      const e5 = o6.attributes[i7], t5 = this._idToClientGraphic.get(e5);
      t5 && (o6.geometry = t5.geometry);
    }
    return s5.geometryType = this.layer.geometryType, s5;
  }
  async queryFeaturesJSON(e4, t4 = {}) {
    if (this._requiresClientGraphicMapping())
      throw new s2("query-features-json:unsupported", "Cannot query in JSON format for client only geometry types (mesh and extent)");
    await this.load(t4);
    const r2 = await this._connection.invoke("queryFeatures", e4 ? e4.toJSON() : null, t4);
    return t(e4, this.layer.spatialReference, r2), r2;
  }
  queryFeatureCount(e4, t4 = {}) {
    return this.load(t4).then(() => this._connection.invoke("queryFeatureCount", e4 ? e4.toJSON() : null, t4));
  }
  queryObjectIds(e4, t4 = {}) {
    return this.load(t4).then(() => this._connection.invoke("queryObjectIds", e4 ? e4.toJSON() : null, t4));
  }
  queryExtent(e4, t4 = {}) {
    return this.load(t4).then(() => this._connection.invoke("queryExtent", e4 ? e4.toJSON() : null, t4)).then((e5) => ({ count: e5.count, extent: M.fromJSON(e5.extent) }));
  }
  querySnapping(e4, t4 = {}) {
    return this.load(t4).then(() => this._connection.invoke("querySnapping", e4, t4));
  }
  async _applyEdits(e4) {
    if (!this._connection)
      throw new s2("feature-layer-source:edit-failure", "Memory source not loaded");
    const t4 = this.layer.objectIdField;
    let r2 = null;
    const i7 = [], o6 = [];
    await Promise.all([this._prepareClientMapping(e4.addFeatures, null), this._prepareClientMapping(e4.updateFeatures, null)]);
    const n6 = (e5) => "objectId" in e5 && null != e5.objectId ? e5.objectId : "attributes" in e5 && null != e5.attributes[t4] ? e5.attributes[t4] : null;
    if (e4.addFeatures && (r2 = this._prepareAddFeatures(e4.addFeatures)), e4.deleteFeatures)
      for (const s5 of e4.deleteFeatures) {
        const e5 = n6(s5);
        null != e5 && i7.push(e5);
      }
    const a7 = e4.updateFeatures && this._idToClientGraphic ? /* @__PURE__ */ new Map() : null;
    if (e4.updateFeatures) {
      for (const s5 of e4.updateFeatures)
        if (o6.push(this._serializeFeature(s5)), a7) {
          const e5 = n6(s5);
          null != e5 && a7.set(e5, s5);
        }
    }
    i3(r2 ? r2.features : null, o6, this.layer.spatialReference);
    const { fullExtent: l2, featureEditResults: u4 } = await this._connection.invoke("applyEdits", { adds: r2 ? r2.features : [], updates: o6, deletes: i7 });
    return this.fullExtent = l2, r2 && r2.finish(u4.uidToObjectId), this._updateClientGraphicIds(a7, u4), this._createEditsResult(u4);
  }
  async _prepareClientMapping(e4, t4) {
    if ("mesh" !== this._layerOrSourceGeometryType || null == e4)
      return;
    const r2 = [];
    for (const { geometry: s5 } of e4)
      null == s5 || "mesh" !== s5.type || s5.hasExtent || s5.loaded || r2.push(s5.load({ signal: t4 }));
    r2.length && await Promise.all(r2);
  }
  _updateClientGraphicIds(e4, t4) {
    if (this._idToClientGraphic) {
      if (e4)
        for (const r2 of t4.updateResults) {
          if (!r2.success)
            continue;
          const t5 = e4.get(r2.objectId);
          null != t5 && this._addIdToClientGraphic(t5);
        }
      for (const e5 of t4.deleteResults)
        e5.success && this._idToClientGraphic.delete(e5.objectId);
    }
  }
  _createEditsResult(e4) {
    return { addFeatureResults: e4.addResults ? e4.addResults.map(this._createFeatureEditResult, this) : [], updateFeatureResults: e4.updateResults ? e4.updateResults.map(this._createFeatureEditResult, this) : [], deleteFeatureResults: e4.deleteResults ? e4.deleteResults.map(this._createFeatureEditResult, this) : [], addAttachmentResults: [], updateAttachmentResults: [], deleteAttachmentResults: [] };
  }
  _createFeatureEditResult(e4) {
    const t4 = true === e4.success ? null : e4.error || { code: void 0, description: void 0 };
    return { objectId: e4.objectId, globalId: e4.globalId, error: t4 ? new s2("feature-layer-source:edit-failure", t4.description, { code: t4.code }) : null };
  }
  _prepareAddFeatures(e4) {
    const t4 = /* @__PURE__ */ new Map(), r2 = new Array(e4.length);
    let s5 = null;
    for (let o6 = 0; o6 < e4.length; o6++) {
      const i8 = e4[o6], n6 = this._serializeFeature(i8);
      s5 || null == i8.geometry || (s5 = i8.geometry.type), r2[o6] = n6, t4.set(`${n6.uid}`, i8);
    }
    const i7 = this;
    return { features: r2, inferredGeometryType: s5, finish(e5) {
      const r3 = i7.sourceJSON.objectIdField;
      for (const s6 in e5) {
        const o6 = e5[s6], n6 = t4.get(s6);
        n6 && (n6.attributes || (n6.attributes = {}), -1 === o6 ? delete n6.attributes[r3] : n6.attributes[r3] = o6, i7._addIdToClientGraphic(n6));
      }
    } };
  }
  _addIdToClientGraphic(e4) {
    var _a;
    if (!this._idToClientGraphic)
      return;
    const t4 = this.sourceJSON.objectIdField, r2 = (_a = e4.attributes) == null ? void 0 : _a[t4];
    null != r2 && this._idToClientGraphic.set(r2, e4);
  }
  get _layerOrSourceGeometryType() {
    var _a, _b;
    return ((_a = this.layer) == null ? void 0 : _a.geometryType) ?? ((_b = this.sourceJSON) == null ? void 0 : _b.geometryType);
  }
  _requiresClientGraphicMapping() {
    return this._geometryTypeRequiresClientGraphicMapping(this._layerOrSourceGeometryType);
  }
  _geometryRequiresClientGraphicMapping(e4) {
    return this._geometryTypeRequiresClientGraphicMapping(e4.type);
  }
  _geometryTypeRequiresClientGraphicMapping(e4) {
    return "mesh" === e4 || "multipatch" === e4 || "extent" === e4;
  }
  _serializeFeature(e4) {
    const { attributes: t4 } = e4, r2 = this._geometryForSerialization(e4), s5 = (_++).toString();
    return r2 ? { uid: s5, geometry: r2.toJSON(), attributes: t4 } : { uid: s5, attributes: t4 };
  }
  _geometryForSerialization(e4) {
    const { geometry: t4 } = e4;
    if (null == t4)
      return null;
    if (this._geometryRequiresClientGraphicMapping(t4)) {
      return t4.extent ? j2.fromExtent(t4.extent) : null;
    }
    return t4;
  }
  async _startWorker(e4) {
    this._connection = await p5("MemorySourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: e4, registryTarget: this });
    const { fields: t4, spatialReference: r2, objectIdField: s5, hasM: i7, hasZ: n6, timeInfo: l2, dateFieldsTimeZone: u4 } = this.layer, p9 = "defaults" === this.layer.originOf("spatialReference");
    await this._prepareClientMapping(this.items, e4);
    const c6 = this._prepareAddFeatures(this.items);
    this.addHandles(this.on("before-changes", (e5) => {
      s.getLogger(this).error("Source modifications will not propagate after layer has been loaded. Please use .applyEdits() instead"), e5.preventDefault();
    }));
    const d4 = { features: c6.features, fields: t4 == null ? void 0 : t4.map((e5) => e5.toJSON()), geometryType: i.toJSON(this._workerGeometryType), hasM: "mesh" !== this._layerOrSourceGeometryType && i7, hasZ: "mesh" === this._layerOrSourceGeometryType || n6, objectIdField: s5, spatialReference: p9 ? null : r2 && r2.toJSON(), timeInfo: (l2 == null ? void 0 : l2.toJSON()) ?? null, dateFieldsTimeZone: u4 }, h3 = await this._connection.invoke("load", d4, { signal: e4 });
    for (const a7 of h3.warnings)
      s.getLogger(this.layer).warn("#load()", `${a7.message} (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { warning: a7 });
    h3.featureErrors.length && s.getLogger(this.layer).warn("#load()", `Encountered ${h3.featureErrors.length} validation errors while loading features. (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { errors: h3.featureErrors });
    const y4 = h3.layerDefinition;
    this._geometryTypeRequiresClientGraphicMapping(c6.inferredGeometryType) && (y4.geometryType = i.toJSON(c6.inferredGeometryType)), this.sourceJSON = y4, this._requiresClientGraphicMapping() && (this._idToClientGraphic = /* @__PURE__ */ new Map()), c6.finish(h3.assignedObjectIds);
  }
};
e([n({ Type: c2, ensureType: d(c2) })], T2.prototype, "itemType", void 0), e([y()], T2.prototype, "type", void 0), e([y({ constructOnly: true })], T2.prototype, "layer", void 0), e([y({ readOnly: true })], T2.prototype, "_workerGeometryType", null), e([y()], T2.prototype, "sourceJSON", void 0), T2 = e([c("esri.layers.graphics.sources.MemorySource")], T2);

// node_modules/@arcgis/core/layers/support/PublishingInfo.js
var e3 = class extends g {
  constructor() {
    super(...arguments), this.updating = false, this.status = "unknown";
  }
};
e([y()], e3.prototype, "updating", void 0), e([y()], e3.prototype, "status", void 0), e3 = e([c("esri.layers.support.PublishingInfo")], e3);
var p8 = e3;

// node_modules/@arcgis/core/layers/mixins/PublishableLayer.js
var o5 = "esri.layers.mixins.PublishableLayer";
var i6 = Symbol(o5);
var u3 = (n6) => {
  var u4;
  let a7 = class extends n6 {
    constructor() {
      super(...arguments), this[u4] = true;
    }
    get publishingInfo() {
      if (this.destroyed)
        return null;
      const s5 = this._get("publishingInfo");
      if (s5)
        return s5;
      const t4 = new p8();
      return this._checkPublishingStatus(t4), t4;
    }
    _checkPublishingStatus(s5) {
      const t4 = 250, e4 = 125;
      let r2 = 0;
      const o6 = async (t5) => {
        let n7;
        s5.updating = true;
        try {
          n7 = await this.fetchPublishingStatus();
        } catch (u5) {
          n7 = "unavailable";
        }
        "published" !== n7 && "unavailable" !== n7 || ("publishing" === s5.status && this.refresh(), i7.remove()), s5.status = n7, s5.updating = false, i7.removed || (r2 = setTimeout(o6, t5, t5 + e4));
      }, i7 = { removed: false, remove() {
        this.removed = true, clearTimeout(r2);
      } };
      this.when().catch(() => i7.remove()), o6(t4), this.addHandles(i7);
    }
  };
  return u4 = i6, e([y({ readOnly: true, clonable: false })], a7.prototype, "publishingInfo", null), a7 = e([c(o5)], a7), a7;
};

// node_modules/@arcgis/core/layers/FeatureLayer.js
var Ue = "FeatureLayer";
var Qe = "esri.layers.FeatureLayer";
var Ne = s.getLogger(Qe);
function $e(e4, r2) {
  return new s2("layer:unsupported", `Layer (${e4.title}, ${e4.id}) of type '${e4.declaredClass}' ${r2}`, { layer: e4 });
}
function Ge(e4) {
  return e4 && e4 instanceof V2;
}
var Je = s4();
function We(e4, r2, t4) {
  const i7 = !!(t4 == null ? void 0 : t4.writeLayerSchema);
  return { enabled: i7, ignoreOrigin: i7 };
}
var Be = class extends D2(c3(p2(u3(F(a3(c4(a6(t3(f3(l(u2(j5(m2(o4(i4(i2(b4))))))))))))))))) {
  constructor(...e4) {
    super(...e4), this.charts = null, this.copyright = null, this.displayField = null, this.dynamicDataSource = null, this.fields = null, this.fieldsIndex = null, this.formTemplate = null, this.fullExtent = null, this.geometryType = null, this.hasM = void 0, this.hasZ = void 0, this.infoFor3D = null, this.isTable = false, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.outFields = null, this.path = null, this.popupEnabled = true, this.popupTemplate = null, this.resourceInfo = null, this.screenSizePerspectiveEnabled = true, this.spatialReference = f.WGS84, this.subtypeCode = null, this.templates = null, this.timeInfo = null, this.title = null, this.sublayerTitleMode = "item-title", this.type = "feature", this.typeIdField = null, this.types = null, this.visible = true, this._debouncedSaveOperations = k(async (e5, r2, t4) => {
      const { save: i7, saveAs: o6 } = await import("./featureLayerUtils-FGB3K6FS.js");
      switch (e5) {
        case A2.SAVE:
          return i7(this, r2);
        case A2.SAVE_AS:
          return o6(this, t4, r2);
      }
    });
  }
  destroy() {
    var _a;
    (_a = this.source) == null ? void 0 : _a.destroy();
  }
  normalizeCtorArgs(e4, r2) {
    return "string" == typeof e4 ? { url: e4, ...r2 } : e4;
  }
  load(e4) {
    var _a;
    const r2 = null != e4 ? e4.signal : null;
    if (((_a = this.portalItem) == null ? void 0 : _a.loaded) && this.source)
      return this.addResolvingPromise(this.createGraphicsSource(r2).then((e5) => this.initLayerProperties(e5))), Promise.resolve(this);
    const t4 = this.loadFromPortal({ supportedTypes: ["Feature Service", "Feature Collection", "Scene Service"] }, e4).catch(a2).then(async () => {
      if (this.url && null == this.layerId && /FeatureServer|MapServer\/*$/i.test(this.url)) {
        const e5 = await this._fetchFirstValidLayerId(r2);
        null != e5 && (this.layerId = e5);
      }
      if (!this.url && !this._hasMemorySource())
        throw new s2("feature-layer:missing-url-or-source", "Feature layer must be created with either a url or a source");
      return this.initLayerProperties(await this.createGraphicsSource(r2));
    }).then(() => Q(this, "load", e4));
    return this.addResolvingPromise(t4), Promise.resolve(this);
  }
  readCapabilities(e4, r2) {
    return r2 = r2.layerDefinition || r2, a5(r2, this.url);
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("dynamicDataSource"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("gdbVersion"), this.commitProperty("historicMoment"), this.commitProperty("returnZ"), this.commitProperty("capabilities"), this.commitProperty("returnM"), (this._get("createQueryVersion") ?? 0) + 1;
  }
  get editingEnabled() {
    var _a;
    return !(this.loaded && !((_a = this.capabilities) == null ? void 0 : _a.operations.supportsEditing)) && (this._isOverridden("editingEnabled") ? this._get("editingEnabled") : this._hasMemorySource() || this.userHasEditingPrivileges);
  }
  set editingEnabled(e4) {
    this._overrideIfSome("editingEnabled", e4);
  }
  readEditingEnabled(e4, r2) {
    return this._readEditingEnabled(r2, false);
  }
  readEditingEnabledFromWebMap(e4, r2, t4) {
    return this._readEditingEnabled(r2, true, t4);
  }
  writeEditingEnabled(e4, r2) {
    this._writeEditingEnabled(e4, r2, false);
  }
  writeEditingEnabledToWebMap(e4, r2, t4, i7) {
    this._writeEditingEnabled(e4, r2, true, i7);
  }
  get effectiveEditingEnabled() {
    return T(this);
  }
  readIsTable(e4, r2) {
    return "Table" === (r2 = (r2 == null ? void 0 : r2.layerDefinition) ?? r2).type || !r2.geometryType;
  }
  writeIsTable(e4, r2, t4, i7) {
    (i7 == null ? void 0 : i7.writeLayerSchema) && o(t4, e4 ? "Table" : "Feature Layer", r2);
  }
  readGlobalIdField(e4, r2) {
    return R(r2.layerDefinition || r2);
  }
  readObjectIdField(e4, r2) {
    return M2(r2.layerDefinition || r2);
  }
  get parsedUrl() {
    const e4 = I(this.url);
    return null != e4 && (null != this.dynamicDataSource ? e4.path = V(e4.path, "dynamicLayer") : null != this.layerId && (e4.path = V(e4.path, this.layerId.toString()))), e4;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  set renderer(e4) {
    p6(e4, this.fieldsIndex), this._set("renderer", e4);
  }
  readRenderer(e4, r2, i7) {
    var _a;
    r2 = r2.layerDefinition || r2;
    const o6 = (_a = r2.drawingInfo) == null ? void 0 : _a.renderer;
    if (o6) {
      const e5 = o3(o6, r2, i7) ?? void 0;
      return e5 || Ne.error("Failed to create renderer", { rendererDefinition: r2.drawingInfo.renderer, layer: this, context: i7 }), e5;
    }
    return D(r2, i7);
  }
  set source(e4) {
    const r2 = this._get("source");
    r2 !== e4 && (Ge(r2) && this._resetMemorySource(r2), Ge(e4) && this._initMemorySource(e4), this._set("source", e4));
  }
  castSource(e4) {
    return e4 ? Array.isArray(e4) || e4 instanceof V2 ? new T2({ layer: this, items: e4 }) : e4 : null;
  }
  readSource(e4, r2) {
    const t4 = d2.fromJSON(r2.featureSet);
    return new T2({ layer: this, items: (t4 == null ? void 0 : t4.features) ?? [] });
  }
  readTemplates(e4, r2) {
    const t4 = r2.editFieldsInfo, i7 = t4 == null ? void 0 : t4.creatorField, o6 = t4 == null ? void 0 : t4.editorField;
    return e4 = e4 == null ? void 0 : e4.map((e5) => p3.fromJSON(e5)), this._fixTemplates(e4, i7), this._fixTemplates(e4, o6), e4;
  }
  readTitle(e4, r2) {
    var _a, _b, _c;
    const t4 = ((_a = r2.layerDefinition) == null ? void 0 : _a.name) ?? r2.name, i7 = r2.title || ((_b = r2.layerDefinition) == null ? void 0 : _b.title);
    if (t4) {
      const e5 = (_c = this.portalItem) == null ? void 0 : _c.title;
      if ("item-title" === this.sublayerTitleMode)
        return this.url ? h2(this.url, t4) : t4;
      let r3 = t4;
      if (!r3 && this.url) {
        const e6 = p(this.url);
        null != e6 && (r3 = e6.title);
      }
      if (!r3)
        return;
      return "item-title-and-service-name" === this.sublayerTitleMode && e5 && e5 !== r3 && (r3 = e5 + " - " + r3), m3(r3);
    }
    if ("item-title" === this.sublayerTitleMode && i7)
      return i7;
  }
  readTitleFromWebMap(e4, r2) {
    var _a;
    return r2.title || ((_a = r2.layerDefinition) == null ? void 0 : _a.name);
  }
  readTypeIdField(e4, r2) {
    let t4 = (r2 = r2.layerDefinition || r2).typeIdField;
    if (t4 && r2.fields) {
      t4 = t4.toLowerCase();
      const e5 = r2.fields.find((e6) => e6.name.toLowerCase() === t4);
      e5 && (t4 = e5.name);
    }
    return t4;
  }
  readTypes(e4, r2) {
    e4 = (r2 = r2.layerDefinition || r2).types;
    const t4 = r2.editFieldsInfo, i7 = t4 == null ? void 0 : t4.creatorField, o6 = t4 == null ? void 0 : t4.editorField;
    return e4 == null ? void 0 : e4.map((e5) => (e5 = n5.fromJSON(e5), this._fixTemplates(e5.templates, i7), this._fixTemplates(e5.templates, o6), e5));
  }
  readVisible(e4, r2) {
    var _a;
    return null != ((_a = r2.layerDefinition) == null ? void 0 : _a.defaultVisibility) ? !!r2.layerDefinition.defaultVisibility : null != r2.visibility ? !!r2.visibility : void 0;
  }
  async addAttachment(e4, r2) {
    return m5(this, e4, r2, Ue);
  }
  async updateAttachment(e4, r2, t4) {
    return w(this, e4, r2, t4, Ue);
  }
  async applyEdits(e4, r2) {
    return b2(this, e4, r2);
  }
  async uploadAssets(e4, r2) {
    return g2(this, e4, r2);
  }
  on(e4, r2) {
    return super.on(e4, r2);
  }
  createPopupTemplate(e4) {
    return p4(this, e4);
  }
  async createGraphicsSource(e4) {
    if (this._hasMemorySource() && this.source)
      return this.source.load({ signal: e4 });
    const { default: r2 } = await h(import("./FeatureLayerSource-CN7XZXJO.js"), e4);
    return new r2({ layer: this }).load({ signal: e4 });
  }
  createQuery() {
    const e4 = x(this);
    e4.dynamicDataSource = this.dynamicDataSource;
    const r2 = null != this.subtypeCode ? `${this.subtypeField} = ${this.subtypeCode}` : null, t4 = n3(this.definitionExpression, r2);
    return e4.where = t4 || "1=1", e4;
  }
  async deleteAttachments(e4, r2) {
    return j4(this, e4, r2, Ue);
  }
  async fetchRecomputedExtents(e4) {
    return I2(this, e4, Ue);
  }
  getFeatureType(e4) {
    const { typeIdField: r2, types: t4 } = this;
    if (!r2 || !e4)
      return null;
    const i7 = e4.attributes ? e4.attributes[r2] : void 0;
    if (null == i7)
      return null;
    let o6 = null;
    return t4 == null ? void 0 : t4.some((e5) => {
      const { id: r3 } = e5;
      return null != r3 && (r3.toString() === i7.toString() && (o6 = e5), !!o6);
    }), o6;
  }
  getFieldDomain(e4, r2) {
    const t4 = r2 == null ? void 0 : r2.feature, i7 = this.getFeatureType(t4);
    if (i7) {
      const r3 = i7.domains && i7.domains[e4];
      if (r3 && "inherited" !== r3.type)
        return r3;
    }
    return this._getLayerDomain(e4);
  }
  getField(e4) {
    return this.fieldsIndex.get(e4);
  }
  async queryAttachments(e4, r2) {
    return q(this, e4, r2, Ue);
  }
  async queryFeatures(e4, r2) {
    const t4 = await this.load(), i7 = await t4.source.queryFeatures(b.from(e4) ?? t4.createQuery(), r2);
    if (i7 == null ? void 0 : i7.features)
      for (const o6 of i7.features)
        o6.layer = o6.sourceLayer = t4;
    return i7;
  }
  async queryObjectIds(e4, r2) {
    return F2(this, e4, r2, Ue);
  }
  async queryFeatureCount(e4, r2) {
    return A(this, e4, r2, Ue);
  }
  async queryExtent(e4, r2) {
    return O(this, e4, r2, Ue);
  }
  async queryRelatedFeatures(e4, r2) {
    return P(this, e4, r2, Ue);
  }
  async queryRelatedFeaturesCount(e4, r2) {
    return E(this, e4, r2, Ue);
  }
  async queryTopFeatures(e4, r2) {
    var _a;
    const { source: t4, capabilities: i7 } = await this.load();
    if (!t4.queryTopFeatures || !((_a = i7 == null ? void 0 : i7.query) == null ? void 0 : _a.supportsTopFeaturesQuery))
      throw new s2(Ue, "Layer source does not support queryTopFeatures capability");
    const o6 = await t4.queryTopFeatures(S2.from(e4), r2);
    if (o6 == null ? void 0 : o6.features)
      for (const s5 of o6.features)
        s5.layer = s5.sourceLayer = this;
    return o6;
  }
  async queryTopObjectIds(e4, r2) {
    const { source: t4, capabilities: i7 } = await this.load();
    if (!t4.queryTopObjectIds || !(i7 == null ? void 0 : i7.query.supportsTopFeaturesQuery))
      throw new s2(Ue, "Layer source does not support queryTopObjectIds capability");
    return t4.queryTopObjectIds(S2.from(e4), r2);
  }
  async queryTopFeaturesExtent(e4, r2) {
    var _a;
    const { source: t4, capabilities: i7 } = await this.load();
    if (!t4.queryTopExtents || !((_a = i7 == null ? void 0 : i7.query) == null ? void 0 : _a.supportsTopFeaturesQuery))
      throw new s2(Ue, "Layer source does not support queryTopExtents capability");
    return t4.queryTopExtents(S2.from(e4), r2);
  }
  async queryTopFeatureCount(e4, r2) {
    var _a;
    const { source: t4, capabilities: i7 } = await this.load();
    if (!t4.queryTopCount || !((_a = i7 == null ? void 0 : i7.query) == null ? void 0 : _a.supportsTopFeaturesQuery))
      throw new s2(Ue, "Layer source does not support queryFeatureCount capability");
    return t4.queryTopCount(S2.from(e4), r2);
  }
  read(e4, r2) {
    const t4 = e4.featureCollection;
    if (t4) {
      this.resourceInfo = e4;
      const i7 = t4.layers;
      i7 && 1 === i7.length && (super.read(i7[0], r2), null != t4.showLegend && super.read({ showLegend: t4.showLegend }, r2));
    }
    super.read(e4, r2), r2 && "service" === r2.origin && (this.revert(["objectIdField", "fields", "timeInfo", "dateFieldsTimeZone"], "service"), this.spatialReference || this.revert(["spatialReference"], "service"));
  }
  write(e4, r2) {
    r2 = { ...r2, origin: (r2 == null ? void 0 : r2.origin) ?? void 0, writeLayerSchema: (r2 == null ? void 0 : r2.writeLayerSchema) ?? this._hasMemorySource() };
    const { origin: t4, layerContainerType: i7, messages: o6 } = r2;
    if (this.dynamicDataSource)
      return o6 == null ? void 0 : o6.push($e(this, "using a dynamic data source cannot be written to web scenes, web maps and feature service items")), null;
    if (this.isTable) {
      if (("web-map" === t4 || "web-scene" === t4) && "tables" !== i7)
        return o6 == null ? void 0 : o6.push($e(this, `a table source can only be written to tables, not ${i7}`)), null;
      if (this._hasMemorySource())
        return o6 == null ? void 0 : o6.push($e(this, "using an in-memory table source cannot be written to web scenes and web maps")), null;
    } else if (this.loaded && ("web-map" === t4 || "web-scene" === t4) && "tables" === i7)
      return o6 == null ? void 0 : o6.push($e(this, "using a non-table source cannot be written to tables in web maps or web scenes")), null;
    return super.write(e4, r2);
  }
  clone() {
    if (this._hasMemorySource())
      throw new s2(Ue, `FeatureLayer (title: ${this.title}, id: ${this.id}) created using in-memory source cannot be cloned`);
    return super.clone();
  }
  serviceSupportsSpatialReference(e4) {
    var _a;
    return !!this.loaded && ("memory" === ((_a = this.source) == null ? void 0 : _a.type) || e2(this, e4));
  }
  async save(e4) {
    return this._debouncedSaveOperations(A2.SAVE, e4);
  }
  async saveAs(e4, r2) {
    return this._debouncedSaveOperations(A2.SAVE_AS, r2, e4);
  }
  _readEditingEnabled(e4, r2, t4) {
    var _a;
    let i7 = (_a = e4.layerDefinition) == null ? void 0 : _a.capabilities;
    return i7 ? this._hasEditingCapability(i7) : (i7 = e4.capabilities, r2 && "web-map" === (t4 == null ? void 0 : t4.origin) && !this._hasMemorySource() && i7 ? this._hasEditingCapability(i7) : void 0);
  }
  _hasEditingCapability(e4) {
    return e4.toLowerCase().split(",").map((e5) => e5.trim()).includes("editing");
  }
  _writeEditingEnabled(e4, r2, t4, i7) {
    var _a, _b;
    if (!e4) {
      const e5 = ((_b = (_a = this.capabilities) == null ? void 0 : _a.operations) == null ? void 0 : _b.supportsSync) ? "Query,Sync" : "Query";
      o("layerDefinition.capabilities", e5, r2), t4 && !(i7 == null ? void 0 : i7.writeLayerSchema) && (r2.capabilities = e5);
    }
  }
  _getLayerDomain(e4) {
    const r2 = this.fieldsIndex.get(e4);
    return r2 ? r2.domain : null;
  }
  _fetchFirstValidLayerId(e4) {
    return j(this.url, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e4 }).then((e5) => {
      const r2 = e5.data;
      if (r2)
        return this.findFirstValidLayerId(r2);
    });
  }
  async initLayerProperties(e4) {
    var _a;
    return this._set("source", e4), e4.sourceJSON && (this.sourceJSON = e4.sourceJSON, this.read(e4.sourceJSON, { origin: "service", portalItem: this.portalItem, portal: (_a = this.portalItem) == null ? void 0 : _a.portal, url: this.parsedUrl })), this._verifySource(), this._verifyFields(), p6(this.renderer, this.fieldsIndex), g3(this.timeInfo, this.fieldsIndex), t2(this, { origin: "service" });
  }
  async hasDataChanged() {
    return S(this);
  }
  async fetchPublishingStatus() {
    const e4 = this.source;
    return (e4 == null ? void 0 : e4.fetchPublishingStatus) ? e4.fetchPublishingStatus() : "unavailable";
  }
  _verifyFields() {
    var _a, _b;
    const e4 = ((_a = this.parsedUrl) == null ? void 0 : _a.path) ?? "undefined";
    this.objectIdField || console.log("FeatureLayer: 'objectIdField' property is not defined (url: " + e4 + ")"), this.isTable || this._hasMemorySource() || -1 !== e4.search(/\/FeatureServer\//i) || ((_b = this.fields) == null ? void 0 : _b.some((e5) => "geometry" === e5.type)) || console.log("FeatureLayer: unable to find field of type 'geometry' in the layer 'fields' list. If you are using a map service layer, features will not have geometry (url: " + e4 + ")");
  }
  _fixTemplates(e4, r2) {
    e4 && e4.forEach((e5) => {
      var _a;
      const t4 = (_a = e5.prototype) == null ? void 0 : _a.attributes;
      t4 && r2 && delete t4[r2];
    });
  }
  _verifySource() {
    if (this._hasMemorySource()) {
      if (this.url)
        throw new s2("feature-layer:mixed-source-and-url", "FeatureLayer cannot be created with both an in-memory source and a url");
    } else if (!this.url)
      throw new s2("feature-layer:source-or-url-required", "FeatureLayer requires either a url, a valid portal item or a source");
  }
  _initMemorySource(e4) {
    e4.forEach((e5) => {
      e5.layer = this, e5.sourceLayer = this;
    }), this.addHandles([e4.on("after-add", (e5) => {
      e5.item.layer = this, e5.item.sourceLayer = this;
    }), e4.on("after-remove", (e5) => {
      e5.item.layer = null, e5.item.sourceLayer = null;
    })], "fl-source");
  }
  _resetMemorySource(e4) {
    e4.forEach((e5) => {
      e5.layer = null, e5.sourceLayer = null;
    }), this.removeHandles("fl-source");
  }
  _hasMemorySource() {
    return !(this.url || !this.source);
  }
  findFirstValidLayerId(e4) {
    return Array.isArray(e4.layers) && e4.layers.length > 0 ? e4.layers[0].id : Array.isArray(e4.tables) && e4.tables.length > 0 ? e4.tables[0].id : void 0;
  }
};
e([o2("service", "capabilities")], Be.prototype, "readCapabilities", null), e([y({ json: { origins: { "web-scene": { write: false } }, write: true } })], Be.prototype, "charts", void 0), e([y({ readOnly: true })], Be.prototype, "createQueryVersion", null), e([y({ json: { read: { source: "layerDefinition.copyrightText" } } })], Be.prototype, "copyright", void 0), e([y({ json: { read: { source: "layerDefinition.displayField" } } })], Be.prototype, "displayField", void 0), e([y({ types: j3, readOnly: true })], Be.prototype, "defaultSymbol", void 0), e([y({ type: K })], Be.prototype, "dynamicDataSource", void 0), e([y({ type: Boolean })], Be.prototype, "editingEnabled", null), e([o2(["portal-item", "web-scene"], "editingEnabled", ["layerDefinition.capabilities"])], Be.prototype, "readEditingEnabled", null), e([o2("web-map", "editingEnabled", ["capabilities", "layerDefinition.capabilities"])], Be.prototype, "readEditingEnabledFromWebMap", null), e([r(["portal-item", "web-scene"], "editingEnabled", { "layerDefinition.capabilities": { type: String } })], Be.prototype, "writeEditingEnabled", null), e([r("web-map", "editingEnabled", { capabilities: { type: String }, "layerDefinition.capabilities": { type: String } })], Be.prototype, "writeEditingEnabledToWebMap", null), e([y({ readOnly: true })], Be.prototype, "effectiveEditingEnabled", null), e([y({ ...Je.fields, json: { read: { source: "layerDefinition.fields" }, origins: { service: { name: "fields" }, "web-map": { write: { target: "layerDefinition.fields", overridePolicy: We } } } } })], Be.prototype, "fields", void 0), e([y(Je.fieldsIndex)], Be.prototype, "fieldsIndex", void 0), e([y({ type: y2, json: { name: "formInfo", write: true, origins: { "web-scene": { read: false, write: false } } } })], Be.prototype, "formTemplate", void 0), e([y({ json: { read: { source: "layerDefinition.extent" } } })], Be.prototype, "fullExtent", void 0), e([y({ json: { origins: { "web-map": { write: { target: "layerDefinition.geometryType", overridePolicy: We, writer(e4, r2, t4) {
  const i7 = e4 ? f2.toJSON(e4) : null;
  i7 && o(t4, i7, r2);
} } } }, read: { source: "layerDefinition.geometryType", reader: f2.read } } })], Be.prototype, "geometryType", void 0), e([y({ json: { read: { source: "layerDefinition.hasM" } } })], Be.prototype, "hasM", void 0), e([y({ json: { read: { source: "layerDefinition.hasZ" } } })], Be.prototype, "hasZ", void 0), e([y(I3)], Be.prototype, "id", void 0), e([y({ readOnly: true, json: { origins: { service: { read: true } }, read: false } })], Be.prototype, "infoFor3D", void 0), e([y({ json: { origins: { "web-map": { write: { target: "layerDefinition.type" } } } } })], Be.prototype, "isTable", void 0), e([o2("service", "isTable", ["type", "geometryType"]), o2("isTable", ["layerDefinition.type", "layerDefinition.geometryType"])], Be.prototype, "readIsTable", null), e([r("web-map", "isTable")], Be.prototype, "writeIsTable", null), e([y(m6)], Be.prototype, "labelsVisible", void 0), e([y({ type: [C], json: { origins: { service: { name: "drawingInfo.labelingInfo", read: i5, write: false }, "web-scene": { name: "layerDefinition.drawingInfo.labelingInfo", read: i5, write: { enabled: true, layerContainerTypes: a4 } } }, name: "layerDefinition.drawingInfo.labelingInfo", read: i5, write: true } })], Be.prototype, "labelingInfo", void 0), e([y((() => {
  const e4 = a(b3);
  return e4.json.origins["portal-item"] = { write: { target: "layerDefinition.drawingInfo.transparency", writer(e5, r2, t4) {
    o(t4, n4(e5), r2);
  } } }, e4;
})())], Be.prototype, "opacity", void 0), e([y(c5)], Be.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide"], json: (() => {
  const e4 = a(C2.json);
  return e4.origins["portal-item"] = { read: false, write: false }, e4;
})() })], Be.prototype, "listMode", void 0), e([o2("globalIdField", ["layerDefinition.globalIdField", "layerDefinition.fields"])], Be.prototype, "readGlobalIdField", null), e([y({ json: { origins: { "web-map": { write: { target: "layerDefinition.objectIdField", overridePolicy: We } } } } })], Be.prototype, "objectIdField", void 0), e([o2("objectIdField", ["layerDefinition.objectIdField", "layerDefinition.fields"])], Be.prototype, "readObjectIdField", null), e([y({ value: "ArcGISFeatureLayer", type: ["ArcGISFeatureLayer"] })], Be.prototype, "operationalLayerType", void 0), e([y(Je.outFields)], Be.prototype, "outFields", void 0), e([y({ readOnly: true })], Be.prototype, "parsedUrl", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], Be.prototype, "path", void 0), e([y(y3)], Be.prototype, "popupEnabled", void 0), e([y({ type: k2, json: { name: "popupInfo", write: true } })], Be.prototype, "popupTemplate", void 0), e([y({ readOnly: true })], Be.prototype, "defaultPopupTemplate", null), e([y({ types: m4, json: { origins: { service: { write: { target: "drawingInfo.renderer", enabled: false } }, "web-scene": { types: u, name: "layerDefinition.drawingInfo.renderer", write: { layerContainerTypes: a4, overridePolicy: (e4, r2, t4) => ({ ignoreOrigin: t4 == null ? void 0 : t4.writeLayerSchema }) } } }, write: { target: "layerDefinition.drawingInfo.renderer", overridePolicy: (e4, r2, t4) => ({ ignoreOrigin: t4 == null ? void 0 : t4.writeLayerSchema }) } } })], Be.prototype, "renderer", null), e([o2("service", "renderer", ["drawingInfo.renderer", "defaultSymbol"]), o2("renderer", ["layerDefinition.drawingInfo.renderer", "layerDefinition.defaultSymbol"])], Be.prototype, "readRenderer", null), e([y()], Be.prototype, "resourceInfo", void 0), e([y((() => {
  const e4 = a(p7);
  return e4.json.origins["portal-item"] = { read: false, write: false }, e4;
})())], Be.prototype, "screenSizePerspectiveEnabled", void 0), e([y({ clonable: false })], Be.prototype, "source", null), e([s3("source")], Be.prototype, "castSource", null), e([o2("portal-item", "source", ["featureSet"]), o2("web-map", "source", ["featureSet"])], Be.prototype, "readSource", null), e([y({ json: { read: { source: "layerDefinition.extent.spatialReference" } } })], Be.prototype, "spatialReference", void 0), e([y({ type: Number })], Be.prototype, "subtypeCode", void 0), e([y({ type: [p3] })], Be.prototype, "templates", void 0), e([o2("templates", ["editFieldsInfo", "creatorField", "editorField", "templates"])], Be.prototype, "readTemplates", null), e([y({ type: d3 })], Be.prototype, "timeInfo", void 0), e([y()], Be.prototype, "title", void 0), e([o2("service", "title", ["name"]), o2("portal-item", "title", ["layerDefinition.title", "layerDefinition.name", "title"])], Be.prototype, "readTitle", null), e([o2("web-map", "title", ["layerDefinition.name", "title"])], Be.prototype, "readTitleFromWebMap", null), e([y({ type: String })], Be.prototype, "sublayerTitleMode", void 0), e([y({ json: { read: false } })], Be.prototype, "type", void 0), e([y({ type: String })], Be.prototype, "typeIdField", void 0), e([o2("service", "typeIdField"), o2("typeIdField", ["layerDefinition.typeIdField"])], Be.prototype, "readTypeIdField", null), e([y({ type: [n5] })], Be.prototype, "types", void 0), e([o2("service", "types", ["types"]), o2("types", ["layerDefinition.types"])], Be.prototype, "readTypes", null), e([y({ type: Boolean, json: { origins: { "portal-item": { write: { target: "layerDefinition.defaultVisibility" } } } } })], Be.prototype, "visible", void 0), e([o2("portal-item", "visible", ["visibility", "layerDefinition.defaultVisibility"])], Be.prototype, "readVisible", null), Be = e([c(Qe)], Be);
var Ze = Be;

export {
  Ze
};
//# sourceMappingURL=chunk-BPPKPMEP.js.map
