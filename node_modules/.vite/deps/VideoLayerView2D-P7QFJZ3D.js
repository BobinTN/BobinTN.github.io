import {
  i as i2
} from "./chunk-R6XZFUCV.js";
import "./chunk-UGJNQG6H.js";
import {
  re
} from "./chunk-VGF3CFL5.js";
import "./chunk-HBFRNOJQ.js";
import "./chunk-EQVODNOJ.js";
import "./chunk-MPQZTJY3.js";
import "./chunk-HU7IF5IM.js";
import "./chunk-BIFYNKHZ.js";
import {
  m,
  u as u3
} from "./chunk-SBC4OSBO.js";
import "./chunk-IF6ORLWU.js";
import "./chunk-AZKAB65C.js";
import "./chunk-BV5PCIP6.js";
import "./chunk-BXZIEADJ.js";
import {
  h
} from "./chunk-VRX4345H.js";
import "./chunk-L7TO2DFS.js";
import "./chunk-A6KO3R3G.js";
import "./chunk-T56C4ORZ.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-JWWTIFGY.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-NI23WAWZ.js";
import "./chunk-GBFYGM27.js";
import "./chunk-5JUAGSVT.js";
import "./chunk-HVJP4M5N.js";
import "./chunk-2M3E5AI7.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-BRF3NTLN.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-GSATUKJ4.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-WR3GXMXV.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-46VITINB.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import "./chunk-RCLKRKWR.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-JLSYG6MV.js";
import "./chunk-5BUKVFNB.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import "./chunk-ZBT4RUU7.js";
import "./chunk-DZE6ZO7Z.js";
import "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import "./chunk-EY7PGBJG.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-DYYHVSPV.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-DCL3YBJN.js";
import "./chunk-3ZWLSDVT.js";
import "./chunk-P5VIVFJT.js";
import "./chunk-SA3C7GIT.js";
import "./chunk-P3R45ANF.js";
import "./chunk-PIEUUBJ5.js";
import "./chunk-2CL4LRYG.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-ICVVQFO6.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-OCLKX5SY.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-2Q2Q2Z4U.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-HU7QYAVQ.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-M7OEQQRX.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-YXRSJYLG.js";
import "./chunk-24NOAXOQ.js";
import {
  c as c2
} from "./chunk-FWR4JURK.js";
import "./chunk-BELGAUAK.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-HITXLR5N.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-4TSAC52K.js";
import "./chunk-H4ZZ5S37.js";
import {
  u as u2
} from "./chunk-G557TGXY.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import {
  i
} from "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  P,
  d
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import {
  f
} from "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import {
  u
} from "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/support/TelemetryDisplay.js
var p = class extends i(f) {
  constructor(o) {
    super(o), this.frameCenter = null, this.frameOutline = null, this.lineOfSight = null, this.sensorLocation = null, this.sensorTrail = null;
  }
};
e([y({ type: Boolean })], p.prototype, "frameCenter", void 0), e([y({ type: Boolean })], p.prototype, "frameOutline", void 0), e([y({ type: Boolean })], p.prototype, "lineOfSight", void 0), e([y({ type: Boolean })], p.prototype, "sensorLocation", void 0), e([y({ type: Boolean })], p.prototype, "sensorTrail", void 0), p = e([c("esri.layers.support.TelemetryDisplay")], p);
var i3 = p;

// node_modules/@arcgis/core/views/2d/layers/VideoLayerView2D.js
var f2 = new u2([255, 127, 0]);
var g = class extends m(u3) {
  constructor() {
    super(...arguments), this._graphicsLayer = new h(), this._frameOutlineGraphic = new c2({ symbol: { type: "simple-fill", outline: { type: "simple-line", color: f2 } } }), this._sensorTrailGraphic = new c2({ symbol: { type: "simple-line", color: f2 } }), this._lineOfSightGraphic = new c2({ symbol: { type: "simple-line", color: f2 } }), this._sensorLocationGraphic = new c2({ symbol: { type: "simple-marker", color: f2 } }), this._frameCenterGraphic = new c2({ symbol: { type: "simple-marker", color: f2 } }), this.layer = null, this.symbolColor = f2, this.visibleTelemetryElements = null;
  }
  destroy() {
    this._graphicsLayer = u(this._graphicsLayer);
  }
  initialize() {
    var _a, _b, _c, _d, _e;
    this.addHandles(d(() => this.symbolColor, () => {
      this._frameOutlineGraphic.symbol.outline.color = this.symbolColor, this._sensorTrailGraphic.symbol.color = this.symbolColor, this._lineOfSightGraphic.symbol.color = this.symbolColor, this._sensorLocationGraphic.symbol.color = this.symbolColor, this._frameCenterGraphic.symbol.color = this.symbolColor;
    }, P)), this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic, this._sensorTrailGraphic, this._lineOfSightGraphic, this._sensorLocationGraphic, this._frameCenterGraphic]), this.visibleTelemetryElements = new i3({ frameCenter: ((_a = this.layer.telemetryDisplay) == null ? void 0 : _a.frameCenter) ?? true, frameOutline: ((_b = this.layer.telemetryDisplay) == null ? void 0 : _b.frameOutline) ?? true, lineOfSight: ((_c = this.layer.telemetryDisplay) == null ? void 0 : _c.lineOfSight) ?? true, sensorLocation: ((_d = this.layer.telemetryDisplay) == null ? void 0 : _d.sensorLocation) ?? true, sensorTrail: ((_e = this.layer.telemetryDisplay) == null ? void 0 : _e.sensorTrail) ?? true });
  }
  attach() {
    this.graphicsView = new re({ requestUpdateCallback: () => this.requestUpdate(), view: this.view, graphics: this._graphicsLayer.graphics, container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this.graphicsView.container), this.addAttachHandles(this._graphicsLayer.on("graphic-update", this.graphicsView.graphicUpdateHandler)), this.addAttachHandles([d(() => {
      var _a, _b, _c, _d, _e;
      return [(_a = this.layer.telemetryDisplay) == null ? void 0 : _a.frameCenter, (_b = this.layer.telemetryDisplay) == null ? void 0 : _b.frameOutline, (_c = this.layer.telemetryDisplay) == null ? void 0 : _c.sensorLocation, (_d = this.layer.telemetryDisplay) == null ? void 0 : _d.sensorTrail, (_e = this.layer.telemetryDisplay) == null ? void 0 : _e.lineOfSight];
    }, () => this._updateVisibleTelemetryElements(), P), d(() => {
      var _a, _b, _c, _d, _e;
      return [this.layer.telemetry, (_a = this.visibleTelemetryElements) == null ? void 0 : _a.frameCenter, (_b = this.visibleTelemetryElements) == null ? void 0 : _b.frameOutline, (_c = this.visibleTelemetryElements) == null ? void 0 : _c.sensorLocation, (_d = this.visibleTelemetryElements) == null ? void 0 : _d.sensorTrail, (_e = this.visibleTelemetryElements) == null ? void 0 : _e.lineOfSight];
    }, () => this._updateGraphicGeometries(), P)]);
  }
  detach() {
    this.container.removeAllChildren(), this.graphicsView = u(this.graphicsView);
  }
  supportsSpatialReference(e2) {
    return true;
  }
  moveStart() {
  }
  moveEnd() {
  }
  viewChange() {
    this.graphicsView.viewChange();
  }
  update(e2) {
    this.graphicsView.processUpdate(e2);
  }
  isUpdating() {
    return !this.graphicsView || this.graphicsView.updating;
  }
  _updateVisibleTelemetryElements() {
    this.visibleTelemetryElements && this.layer.telemetryDisplay && (this.visibleTelemetryElements.frameCenter = this.layer.telemetryDisplay.frameCenter, this.visibleTelemetryElements.frameOutline = this.layer.telemetryDisplay.frameOutline, this.visibleTelemetryElements.lineOfSight = this.layer.telemetryDisplay.lineOfSight, this.visibleTelemetryElements.sensorLocation = this.layer.telemetryDisplay.sensorLocation, this.visibleTelemetryElements.sensorTrail = this.layer.telemetryDisplay.sensorTrail);
  }
  _updateGraphicGeometries() {
    const { telemetry: e2 } = this.layer, { visibleTelemetryElements: i4 } = this;
    e2 && i4 && (i4.frameOutline && e2.frameOutline ? this._frameOutlineGraphic.geometry = this.layer.telemetry.frameOutline : this._frameOutlineGraphic.geometry = null, i4.sensorTrail && e2.sensorTrail ? this._sensorTrailGraphic.geometry = this.layer.telemetry.sensorTrail : this._sensorTrailGraphic.geometry = null, i4.lineOfSight && e2.lineOfSight ? this._lineOfSightGraphic.geometry = this.layer.telemetry.lineOfSight : this._lineOfSightGraphic.geometry = null, i4.sensorLocation && e2.sensorLocation ? this._sensorLocationGraphic.geometry = this.layer.telemetry.sensorLocation : this._sensorLocationGraphic.geometry = null, i4.frameCenter && e2.frameCenter ? this._frameCenterGraphic.geometry = this.layer.telemetry.frameCenter : this._frameCenterGraphic.geometry = null);
  }
};
e([y()], g.prototype, "graphicsView", void 0), e([y()], g.prototype, "layer", void 0), e([y()], g.prototype, "symbolColor", void 0), e([y({ type: i3 })], g.prototype, "visibleTelemetryElements", void 0), g = e([c("esri.views.2d.layers.VideoLayerView2D")], g);
var u4 = g;
export {
  u4 as default
};
//# sourceMappingURL=VideoLayerView2D-P7QFJZ3D.js.map
