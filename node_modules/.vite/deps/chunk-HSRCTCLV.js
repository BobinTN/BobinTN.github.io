import {
  N,
  P,
  a2 as a,
  a3 as a2,
  c,
  d3 as d,
  d4 as d2,
  e as e2,
  e3,
  e4,
  f2 as f,
  h3 as h,
  h4 as h2,
  i,
  i2,
  l,
  l2,
  m,
  n,
  o,
  o2 as o3,
  o3 as o5,
  o5 as o6,
  o6 as o9,
  p,
  s2,
  t,
  t2,
  t4 as t3,
  t5 as t4,
  u,
  x
} from "./chunk-73EPNGYH.js";
import {
  o as o4
} from "./chunk-BNTQULGG.js";
import {
  e as e5
} from "./chunk-LGRHAUSA.js";
import {
  o as o7,
  o3 as o8,
  s
} from "./chunk-55WTSNPL.js";
import {
  o as o2
} from "./chunk-RN5RTM2J.js";
import {
  e
} from "./chunk-GLBAW5CR.js";

// node_modules/@arcgis/core/chunks/RealisticTree.glsl.js
function I(I2) {
  const R2 = new o8(), { vertex: z, fragment: k, varyings: U } = R2;
  return d2(z, I2), R2.include(o5), U.add("vpos", "vec3"), R2.include(l2, I2), R2.include(N, I2), R2.include(a, I2), I2.output !== o.Color && I2.output !== o.Alpha || (f(R2.vertex, I2), R2.include(t, I2), R2.include(o6, I2), I2.offsetBackfaces && R2.include(e3), I2.instancedColor && R2.attributes.add(e.INSTANCECOLOR, "vec4"), U.add("vNormalWorld", "vec3"), U.add("localvpos", "vec3"), I2.multipassEnabled && U.add("depth", "float"), R2.include(o3, I2), R2.include(d, I2), R2.include(i, I2), R2.include(e4, I2), z.uniforms.add(new e5("externalColor", (e6) => e6.externalColor)), U.add("vcolorExt", "vec4"), z.code.add(o2`
        void main(void) {
          forwardNormalizedVertexColor();
          vcolorExt = externalColor;
          ${I2.instancedColor ? "vcolorExt *= instanceColor * 0.003921568627451;" : ""}
          vcolorExt *= vvColor();
          vcolorExt *= getSymbolColor();
          forwardColorMixMode();

          if (vcolorExt.a < ${o2.float(t2)}) {
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          } else {
            vpos = getVertexInLocalOriginSpace();
            localvpos = vpos - view[3].xyz;
            vpos = subtractOrigin(vpos);
            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));
            vpos = addVerticalOffset(vpos, localOrigin);
            gl_Position = transformPosition(proj, view, vpos);
            ${I2.offsetBackfaces ? "gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);" : ""}
          }
          ${I2.multipassEnabled ? o2`depth = (view * vec4(vpos, 1.0)).z;` : ""}
          forwardLinearDepth();
          forwardTextureCoordinates();
        }
      `)), I2.output === o.Alpha && (R2.include(P, I2), R2.include(s2, I2), R2.include(o9, I2), k.uniforms.add(new o7("opacity", (e6) => e6.opacity), new o7("layerOpacity", (e6) => e6.layerOpacity)), I2.hasColorTexture && k.uniforms.add(new s("tex", (e6) => e6.texture)), k.include(i2), k.code.add(o2`
      void main() {
        discardBySlice(vpos);
        ${I2.multipassEnabled ? o2`terrainDepthTest(depth);` : ""}
        ${I2.hasColorTexture ? o2`
                vec4 texColor = texture(tex, ${I2.hasColorTextureTransform ? o2`colorUV` : o2`vuv0`});
                ${I2.textureAlphaPremultiplied ? "texColor.rgb /= texColor.a;" : ""}
                discardOrAdjustAlpha(texColor);` : o2`vec4 texColor = vec4(1.0);`}
        ${I2.hasVertexColors ? o2`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : o2`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}

        fragColor = vec4(opacity_);
      }
    `)), I2.output === o.Color && (R2.include(P, I2), R2.include(p, I2), R2.include(t3, I2), R2.include(s2, I2), R2.include(I2.instancedDoublePrecision ? x : m, I2), R2.include(o9, I2), f(R2.fragment, I2), t4(k), u(k), h2(k), k.uniforms.add(z.uniforms.get("localOrigin"), z.uniforms.get("view"), new e2("ambient", (e6) => e6.ambient), new e2("diffuse", (e6) => e6.diffuse), new o7("opacity", (e6) => e6.opacity), new o7("layerOpacity", (e6) => e6.layerOpacity)), I2.hasColorTexture && k.uniforms.add(new s("tex", (e6) => e6.texture)), R2.include(l, I2), R2.include(n, I2), k.include(i2), a2(k), k.code.add(o2`
      void main() {
        discardBySlice(vpos);
        ${I2.multipassEnabled ? o2`terrainDepthTest(depth);` : ""}
        ${I2.hasColorTexture ? o2`
                vec4 texColor = texture(tex, ${I2.hasColorTextureTransform ? o2`colorUV` : o2`vuv0`});
                ${I2.textureAlphaPremultiplied ? "texColor.rgb /= texColor.a;" : ""}
                discardOrAdjustAlpha(texColor);` : o2`vec4 texColor = vec4(1.0);`}
        vec3 viewDirection = normalize(vpos - cameraPosition);
        ${I2.pbrMode === c.Normal ? "applyPBRFactors();" : ""}
        float ssao = evaluateAmbientOcclusionInverse();
        ssao *= getBakedOcclusion();

        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);
        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;
        ${I2.receiveShadows ? "float shadow = readShadowMap(vpos, linearDepth);" : I2.spherical ? "float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);" : "float shadow = 0.0;"}
        vec3 matColor = max(ambient, diffuse);
        ${I2.hasVertexColors ? o2`
                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : o2`
                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}
        ${I2.snowCover ? o2`albedo = mix(albedo, vec3(1), 0.9);` : o2``}
        ${o2`
            vec3 shadingNormal = normalize(vNormalWorld);
            albedo *= 1.2;
            vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);
            float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);
            float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);
            float treeRadialFalloff = vColor.r;
            float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);
            additionalLight += backLightFactor * mainLightIntensity;`}
        ${I2.pbrMode === c.Normal || I2.pbrMode === c.Schematic ? I2.spherical ? o2`vec3 normalGround = normalize(vpos + localOrigin);` : o2`vec3 normalGround = vec3(0.0, 0.0, 1.0);` : o2``}
        ${I2.pbrMode === c.Normal || I2.pbrMode === c.Schematic ? o2`
                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];
                ${I2.snowCover ? o2`
                        mrr = vec3(0.0, 1.0, 0.04);
                        emission = vec3(0.0);` : ""}

                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : o2`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}
        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);
        ${I2.transparencyPassType === o4.Color ? o2`fragColor = premultiplyAlpha(fragColor);` : o2``}
      }
    `)), R2.include(h, I2), R2;
}
var R = Object.freeze(Object.defineProperty({ __proto__: null, build: I }, Symbol.toStringTag, { value: "Module" }));

export {
  I,
  R
};
//# sourceMappingURL=chunk-HSRCTCLV.js.map
