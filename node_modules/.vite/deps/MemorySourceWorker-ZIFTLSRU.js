import {
  n,
  t
} from "./chunk-ET42MPVP.js";
import {
  I,
  d,
  f,
  p,
  w
} from "./chunk-QBJG4PUS.js";
import "./chunk-7SYCRLSC.js";
import {
  a,
  i as i3,
  o
} from "./chunk-UIBKJIZ5.js";
import {
  m
} from "./chunk-A427XTHR.js";
import "./chunk-QAQNFI3S.js";
import {
  W
} from "./chunk-7KUR2TMU.js";
import "./chunk-3ON6HO7Q.js";
import "./chunk-KMTPMPRR.js";
import "./chunk-K4NVR6KM.js";
import {
  j,
  x
} from "./chunk-57KRYRCY.js";
import {
  et,
  nt,
  tt
} from "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-AZHRWST4.js";
import "./chunk-PFFV4MXI.js";
import "./chunk-NYTJIWNN.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-PUYNEESA.js";
import "./chunk-GXVWD6F2.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-S6MJEC4A.js";
import {
  Z
} from "./chunk-M7OEQQRX.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import {
  i as i2
} from "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-HLM2UN42.js";
import "./chunk-5WWPLX36.js";
import "./chunk-UNONG753.js";
import "./chunk-OFRZSMZB.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import {
  H,
  K
} from "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import {
  l,
  v
} from "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-A43TI6AT.js";
import "./chunk-BHJVWW2P.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import {
  i
} from "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import {
  N
} from "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import "./chunk-LXXF7K7W.js";
import "./chunk-SBW6NNVI.js";
import "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s3 as s
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/graphics/sources/support/MemorySourceWorker.js
var R = N;
var q = { xmin: -180, ymin: -90, xmax: 180, ymax: 90, spatialReference: N };
var D = { hasAttachments: false, capabilities: "query, editing, create, delete, update", useStandardizedQueries: true, supportsCoordinatesQuantization: true, supportsReturningQueryGeometry: true, advancedQueryCapabilities: { supportsQueryAttachments: false, supportsStatistics: true, supportsPercentileStatistics: true, supportsReturningGeometryCentroid: true, supportsQueryWithDistance: true, supportsDistinct: true, supportsReturningQueryExtent: true, supportsReturningGeometryProperties: false, supportsHavingClause: true, supportsOrderBy: true, supportsPagination: true, supportsQueryWithResultType: false, supportsSqlExpression: true, supportsDisjointSpatialRel: true } };
function O(e) {
  return l(e) ? null != e.z : !!e.hasZ;
}
function w2(e) {
  return l(e) ? null != e.m : !!e.hasM;
}
var S = class {
  constructor() {
    this._queryEngine = null, this._nextObjectId = null;
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = this._createDefaultAttributes = null;
  }
  async load(t2) {
    const i4 = [], { features: s2 } = t2, n2 = this._inferLayerProperties(s2, t2.fields), r = t2.fields || [], a2 = null != t2.hasM ? t2.hasM : !!n2.hasM, p2 = null != t2.hasZ ? t2.hasZ : !!n2.hasZ, h = !t2.spatialReference && !n2.spatialReference, g = h ? R : t2.spatialReference || n2.spatialReference, I2 = h ? q : null, F = t2.geometryType || n2.geometryType, b = !F;
    let O2 = t2.objectIdField || n2.objectIdField, w3 = t2.timeInfo;
    const S2 = new Z(r);
    if (!b && (h && i4.push({ name: "feature-layer:spatial-reference-not-found", message: "Spatial reference not provided or found in features. Defaults to WGS84" }), !F))
      throw new s("feature-layer:missing-property", "geometryType not set and couldn't be inferred from the provided features");
    if (!O2)
      throw new s("feature-layer:missing-property", "objectIdField not set and couldn't be found in the provided fields");
    if (n2.objectIdField && O2 !== n2.objectIdField && (i4.push({ name: "feature-layer:duplicated-oid-field", message: `Provided objectIdField "${O2}" doesn't match the field name "${n2.objectIdField}", found in the provided fields` }), O2 = n2.objectIdField), O2 && !n2.objectIdField) {
      const e = S2.get(O2);
      e ? (O2 = e.name, e.type = "esriFieldTypeOID", e.editable = false, e.nullable = false) : r.unshift({ alias: O2, name: O2, type: "esriFieldTypeOID", editable: false, nullable: false });
    }
    for (const o2 of r) {
      if (null == o2.name && (o2.name = o2.alias), null == o2.alias && (o2.alias = o2.name), !o2.name)
        throw new s("feature-layer:invalid-field-name", "field name is missing", { field: o2 });
      if (o2.name === O2 && (o2.type = "esriFieldTypeOID"), !i2.jsonValues.includes(o2.type))
        throw new s("feature-layer:invalid-field-type", `invalid type for field "${o2.name}"`, { field: o2 });
      null == o2.length && (o2.length = K(o2));
    }
    const v2 = {};
    for (const e of r)
      if ("esriFieldTypeOID" !== e.type && "esriFieldTypeGlobalID" !== e.type) {
        const t3 = H(e);
        void 0 !== t3 && (v2[e.name] = t3);
      }
    if (w3) {
      if (w3.startTimeField) {
        const e = S2.get(w3.startTimeField);
        e ? (w3.startTimeField = e.name, e.type = "esriFieldTypeDate") : w3.startTimeField = null;
      }
      if (w3.endTimeField) {
        const e = S2.get(w3.endTimeField);
        e ? (w3.endTimeField = e.name, e.type = "esriFieldTypeDate") : w3.endTimeField = null;
      }
      if (w3.trackIdField) {
        const e = S2.get(w3.trackIdField);
        e ? w3.trackIdField = e.name : (w3.trackIdField = null, i4.push({ name: "feature-layer:invalid-timeInfo-trackIdField", message: "trackIdField is missing", details: { timeInfo: w3 } }));
      }
      w3.startTimeField || w3.endTimeField || (i4.push({ name: "feature-layer:invalid-timeInfo", message: "startTimeField and endTimeField are missing or invalid", details: { timeInfo: w3 } }), w3 = null);
    }
    const Q = S2.dateFields.length ? { timeZoneIANA: t2.dateFieldsTimeZone ?? i } : null;
    this._createDefaultAttributes = i3(v2, O2);
    const M = { warnings: i4, featureErrors: [], layerDefinition: { ...D, drawingInfo: o(F), templates: a(v2), extent: I2, geometryType: F, objectIdField: O2, fields: r, hasZ: p2, hasM: a2, timeInfo: w3, dateFieldsTimeReference: Q }, assignedObjectIds: {} };
    if (this._queryEngine = new W({ fieldsIndex: Z.fromLayerJSON({ fields: r, timeInfo: w3, dateFieldsTimeReference: Q }), geometryType: F, hasM: a2, hasZ: p2, objectIdField: O2, spatialReference: g, featureStore: new m({ geometryType: F, hasM: a2, hasZ: p2 }), timeInfo: w3, cacheSpatialQueries: true }), !(s2 == null ? void 0 : s2.length))
      return this._nextObjectId = t, M;
    const Z2 = n(O2, s2);
    return this._nextObjectId = Z2 + 1, await x(s2, g), this._loadInitialFeatures(M, s2);
  }
  async applyEdits(e) {
    const { spatialReference: t2, geometryType: i4 } = this._queryEngine;
    return await Promise.all([I(t2, i4), x(e.adds, t2), x(e.updates, t2)]), this._applyEdits(e);
  }
  queryFeatures(e, t2 = {}) {
    return this._queryEngine.executeQuery(e, t2.signal);
  }
  queryFeatureCount(e, t2 = {}) {
    return this._queryEngine.executeQueryForCount(e, t2.signal);
  }
  queryObjectIds(e, t2 = {}) {
    return this._queryEngine.executeQueryForIds(e, t2.signal);
  }
  queryExtent(e, t2 = {}) {
    return this._queryEngine.executeQueryForExtent(e, t2.signal);
  }
  querySnapping(e, t2 = {}) {
    return this._queryEngine.executeQueryForSnapping(e, t2.signal);
  }
  _inferLayerProperties(e, i4) {
    let s2, n2, r = null, a2 = null, o2 = null;
    for (const l2 of e) {
      const e2 = l2.geometry;
      if (null != e2 && (r || (r = v(e2)), a2 || (a2 = e2.spatialReference), null == s2 && (s2 = O(e2)), null == n2 && (n2 = w2(e2)), r && a2 && null != s2 && null != n2))
        break;
    }
    if (i4 && i4.length) {
      let e2 = null;
      i4.some((t2) => {
        const i5 = "esriFieldTypeOID" === t2.type, s3 = !t2.type && t2.name && "objectid" === t2.name.toLowerCase();
        return e2 = t2, i5 || s3;
      }) && (o2 = e2.name);
    }
    return { geometryType: r, spatialReference: a2, objectIdField: o2, hasM: n2, hasZ: s2 };
  }
  async _loadInitialFeatures(e, i4) {
    const { geometryType: s2, hasM: r, hasZ: a2, objectIdField: o2, spatialReference: l2, featureStore: u, fieldsIndex: d2 } = this._queryEngine, f2 = [];
    for (const n2 of i4) {
      if (null != n2.uid && (e.assignedObjectIds[n2.uid] = -1), n2.geometry && s2 !== v(n2.geometry)) {
        e.featureErrors.push(f("Incorrect geometry type."));
        continue;
      }
      const i5 = this._createDefaultAttributes(), r2 = p(d2, i5, n2.attributes, true);
      r2 ? e.featureErrors.push(r2) : (this._assignObjectId(i5, n2.attributes, true), n2.attributes = i5, null != n2.uid && (e.assignedObjectIds[n2.uid] = n2.attributes[o2]), null != n2.geometry && (n2.geometry = j(n2.geometry, n2.geometry.spatialReference, l2)), f2.push(n2));
    }
    u.addMany(et([], f2, s2, a2, r, o2));
    const { fullExtent: c, timeExtent: m2 } = await this._queryEngine.fetchRecomputedExtents();
    if (e.layerDefinition.extent = c, m2) {
      const { start: t2, end: i5 } = m2;
      e.layerDefinition.timeInfo.timeExtent = [t2, i5];
    }
    return e;
  }
  async _applyEdits(e) {
    const { adds: t2, updates: i4, deletes: s2 } = e, n2 = { addResults: [], deleteResults: [], updateResults: [], uidToObjectId: {} };
    if ((t2 == null ? void 0 : t2.length) && this._applyAddEdits(n2, t2), (i4 == null ? void 0 : i4.length) && this._applyUpdateEdits(n2, i4), s2 == null ? void 0 : s2.length) {
      for (const e2 of s2)
        n2.deleteResults.push(d(e2));
      this._queryEngine.featureStore.removeManyById(s2);
    }
    const { fullExtent: r, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: r, timeExtent: a2, featureEditResults: n2 };
  }
  _applyAddEdits(e, i4) {
    const { addResults: s2 } = e, { geometryType: r, hasM: a2, hasZ: o2, objectIdField: l2, spatialReference: u, featureStore: d2, fieldsIndex: f2 } = this._queryEngine, c = [];
    for (const n2 of i4) {
      if (n2.geometry && r !== v(n2.geometry)) {
        s2.push(f("Incorrect geometry type."));
        continue;
      }
      const i5 = this._createDefaultAttributes(), a3 = p(f2, i5, n2.attributes);
      if (a3)
        s2.push(a3);
      else {
        if (this._assignObjectId(i5, n2.attributes), n2.attributes = i5, null != n2.uid) {
          const t2 = n2.attributes[l2];
          e.uidToObjectId[n2.uid] = t2;
        }
        if (null != n2.geometry) {
          const e2 = n2.geometry.spatialReference ?? u;
          n2.geometry = j(w(n2.geometry, e2), e2, u);
        }
        c.push(n2), s2.push(d(n2.attributes[l2]));
      }
    }
    d2.addMany(et([], c, r, o2, a2, l2));
  }
  _applyUpdateEdits({ updateResults: e }, i4) {
    const { geometryType: s2, hasM: n2, hasZ: o2, objectIdField: l2, spatialReference: u, featureStore: d2, fieldsIndex: f2 } = this._queryEngine;
    for (const c of i4) {
      const { attributes: i5, geometry: m2 } = c, y = i5 == null ? void 0 : i5[l2];
      if (null == y) {
        e.push(f(`Identifier field ${l2} missing`));
        continue;
      }
      if (!d2.has(y)) {
        e.push(f(`Feature with object id ${y} missing`));
        continue;
      }
      const h = nt(d2.getFeature(y), s2, o2, n2);
      if (null != m2) {
        if (s2 !== v(m2)) {
          e.push(f("Incorrect geometry type."));
          continue;
        }
        const i6 = m2.spatialReference ?? u;
        h.geometry = j(w(m2, i6), i6, u);
      }
      if (i5) {
        const t2 = p(f2, h.attributes, i5);
        if (t2) {
          e.push(t2);
          continue;
        }
      }
      d2.add(tt(h, s2, o2, n2, l2)), e.push(d(y));
    }
  }
  _assignObjectId(e, t2, i4 = false) {
    const s2 = this._queryEngine.objectIdField;
    i4 && t2 && isFinite(t2[s2]) ? e[s2] = t2[s2] : e[s2] = this._nextObjectId++;
  }
};
export {
  S as default
};
//# sourceMappingURL=MemorySourceWorker-ZIFTLSRU.js.map
