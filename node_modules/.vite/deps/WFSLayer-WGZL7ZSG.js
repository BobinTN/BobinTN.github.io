import {
  S,
  V,
  W,
  q,
  v as v2
} from "./chunk-S2ZSCJ5A.js";
import "./chunk-CPGPJ736.js";
import "./chunk-CU4AT6XH.js";
import "./chunk-7SYCRLSC.js";
import {
  l,
  o as o3
} from "./chunk-UIBKJIZ5.js";
import "./chunk-KMTPMPRR.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import {
  c as c4
} from "./chunk-ADNT35Y3.js";
import {
  p
} from "./chunk-3F7Z2GZ4.js";
import "./chunk-BVTDQR4O.js";
import {
  c as c3
} from "./chunk-JDVR6MOC.js";
import "./chunk-DYYHVSPV.js";
import "./chunk-UIN5EOGE.js";
import "./chunk-DT2VHQBL.js";
import {
  s as s2
} from "./chunk-KLPBCYCG.js";
import {
  i as i2
} from "./chunk-DCL3YBJN.js";
import {
  C
} from "./chunk-3ZWLSDVT.js";
import {
  o as o4
} from "./chunk-5DLICG33.js";
import {
  a as a2
} from "./chunk-ZILXWPAR.js";
import {
  p as p2
} from "./chunk-HPFRYEGX.js";
import {
  m as m3,
  u
} from "./chunk-F64GI7MS.js";
import "./chunk-4LDWKTSM.js";
import {
  j
} from "./chunk-POSLR7O2.js";
import {
  f as f2
} from "./chunk-VOYU5TTK.js";
import {
  a
} from "./chunk-P5VIVFJT.js";
import "./chunk-SA3C7GIT.js";
import "./chunk-P3R45ANF.js";
import {
  t
} from "./chunk-PIEUUBJ5.js";
import {
  u as u2
} from "./chunk-YIAYIZOZ.js";
import {
  m as m2
} from "./chunk-P5GW5DPX.js";
import {
  b as b2,
  c as c5,
  d as d2,
  f as f3,
  m as m4,
  p as p5,
  y as y3
} from "./chunk-VIOPOI6P.js";
import "./chunk-DOALI2C2.js";
import "./chunk-E3I4MGUC.js";
import "./chunk-UHNBENSV.js";
import "./chunk-GDKL26HH.js";
import "./chunk-2CL4LRYG.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-HKYMYCLL.js";
import "./chunk-ICVVQFO6.js";
import {
  d
} from "./chunk-BYK6DXRK.js";
import "./chunk-UTCX6DGX.js";
import "./chunk-7VNZ6V2N.js";
import "./chunk-VKTTTBW2.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-OCLKX5SY.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-HX5GOVNX.js";
import "./chunk-2Q2Q2Z4U.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-HU7QYAVQ.js";
import {
  b
} from "./chunk-45OAWGCA.js";
import "./chunk-X2TA76Q5.js";
import "./chunk-T3Y5GTKO.js";
import {
  y as y2
} from "./chunk-XN6LAULS.js";
import "./chunk-M7OEQQRX.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-6B7VJB6C.js";
import "./chunk-GAJBN4TM.js";
import {
  b as b3
} from "./chunk-YXRSJYLG.js";
import {
  p as p3
} from "./chunk-KBKTS574.js";
import "./chunk-6ABSX3YY.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-FWR4JURK.js";
import {
  k as k2
} from "./chunk-BELGAUAK.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-HITXLR5N.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-4TSAC52K.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-2AXFVQBN.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import {
  g,
  p as p4
} from "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import {
  o as o2
} from "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-AOJ6OCPK.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-BHJVWW2P.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import {
  c as c2,
  i
} from "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import {
  m
} from "./chunk-CCXEAKIM.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import {
  f,
  r
} from "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import {
  I
} from "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  T,
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  k,
  v
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  o,
  s3 as s
} from "./chunk-WJ3HJKNC.js";
import {
  has
} from "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSource.js
var g2 = class extends m {
  constructor() {
    super(...arguments), this._connection = null, this.capabilities = l(false, false), this.type = "wfs", this.refresh = k(async (e2) => {
      await this.load();
      const { extent: t2 } = await this._connection.invoke("refresh", e2);
      return t2 && (this.sourceJSON.extent = t2), { dataChanged: true, updates: { extent: this.sourceJSON.extent } };
    });
  }
  load(e2) {
    const t2 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this._startWorker({ signal: t2 })), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(e2, t2 = {}) {
    await this.load(t2);
    const r2 = await this._connection.invoke("queryFeatures", e2 ? e2.toJSON() : null, t2);
    return d.fromJSON(r2);
  }
  async queryFeaturesJSON(e2, t2 = {}) {
    return await this.load(t2), this._connection.invoke("queryFeatures", e2 ? e2.toJSON() : null, t2);
  }
  async queryFeatureCount(e2, t2 = {}) {
    return await this.load(t2), this._connection.invoke("queryFeatureCount", e2 ? e2.toJSON() : null, t2);
  }
  async queryObjectIds(e2, t2 = {}) {
    return await this.load(t2), this._connection.invoke("queryObjectIds", e2 ? e2.toJSON() : null, t2);
  }
  async queryExtent(e2, t2 = {}) {
    await this.load(t2);
    const r2 = await this._connection.invoke("queryExtent", e2 ? e2.toJSON() : null, t2);
    return { count: r2.count, extent: M.fromJSON(r2.extent) };
  }
  async querySnapping(e2, t2 = {}) {
    return await this.load(t2), this._connection.invoke("querySnapping", e2, t2);
  }
  async _createLoadOptions(e2) {
    var _a, _b;
    const { url: r2, customParameters: s3, name: o5, namespaceUri: a3, fields: i3, geometryType: n, swapXY: p6 } = this.layer, l2 = "defaults" === this.layer.originOf("spatialReference") ? void 0 : this.layer.spatialReference;
    if (!r2)
      throw new s("wfs-layer:missing-url", "WFSLayer must be created with a url");
    this.wfsCapabilities || (this.wfsCapabilities = await v2(r2, { customParameters: s3, ...e2 }));
    const f4 = ["fields", "geometryType", "name", "namespaceUri", "swapXY"].some((e3) => null == this.layer[e3]), h = f4 ? await W(this.wfsCapabilities, o5, a3, { spatialReference: l2, customParameters: s3, signal: e2 == null ? void 0 : e2.signal }) : { ...q(i3 ?? []), geometryType: n, name: o5, namespaceUri: a3, spatialReference: l2, swapXY: p6 }, w = V(this.wfsCapabilities.readFeatureTypes(), h.name, h.namespaceUri), g3 = o2.toJSON(h.geometryType);
    return { customParameters: s3, featureType: w, fields: ((_a = h.fields) == null ? void 0 : _a.map((e3) => e3.toJSON())) ?? [], geometryField: h.geometryField, geometryType: g3, getFeatureUrl: this.wfsCapabilities.operations.GetFeature.url, getFeatureOutputFormat: this.wfsCapabilities.operations.GetFeature.outputFormat, objectIdField: h.objectIdField, spatialReference: (_b = h.spatialReference) == null ? void 0 : _b.toJSON(), swapXY: !!h.swapXY };
  }
  async _startWorker(e2) {
    const [t2, r2] = await v([this._createLoadOptions(e2), p3("WFSSourceWorker", { ...e2, strategy: has("feature-layers-workers") ? "dedicated" : "local", registryTarget: this })]), s3 = t2.error || r2.error || null, i3 = r2.value || null;
    if (s3)
      throw i3 && i3.close(), s3;
    const n = t2.value;
    this._connection = r2.value;
    const c6 = (await this._connection.invoke("load", n, e2)).extent;
    this.sourceJSON = { dateFieldsTimeReference: { timeZoneIANA: i }, extent: c6, fields: n.fields, geometryType: n.geometryType, objectIdField: n.objectIdField, geometryField: n.geometryField, drawingInfo: o3(n.geometryType), name: n.featureType.title, wfsInfo: { name: n.featureType.name, featureUrl: n.getFeatureUrl, maxFeatures: 3e3, swapXY: n.swapXY, supportedSpatialReferences: n.featureType.supportedSpatialReferences, version: "2.0.0", wfsNamespace: n.featureType.namespaceUri } };
  }
};
e([y()], g2.prototype, "capabilities", void 0), e([y({ constructOnly: true })], g2.prototype, "layer", void 0), e([y()], g2.prototype, "sourceJSON", void 0), e([y()], g2.prototype, "type", void 0), e([y()], g2.prototype, "wfsCapabilities", void 0), g2 = e([c("esri.layers.graphics.sources.WFSSource")], g2);

// node_modules/@arcgis/core/layers/WFSLayer.js
var B;
var J = s2();
var M2 = B = class extends c4(o4(c3(p(a(a2(f2(t(u2(j(m2(b3))))))))))) {
  static fromWFSLayerInfo(e2) {
    const { customParameters: r2, fields: t2, geometryField: i3, geometryType: o5, name: s3, namespaceUri: n, objectIdField: p6, spatialReference: a3, swapXY: l2, url: d3, wfsCapabilities: m5 } = e2;
    return new B({ customParameters: r2, fields: t2, geometryField: i3, geometryType: o5, name: s3, namespaceUri: n, objectIdField: p6, spatialReference: a3, swapXY: l2, url: d3, wfsCapabilities: m5 });
  }
  constructor(e2) {
    super(e2), this.copyright = null, this.customParameters = null, this.dateFieldsTimeZone = null, this.definitionExpression = null, this.displayField = null, this.elevationInfo = null, this.featureUrl = void 0, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "WFS", this.maxFeatures = 3e3, this.mode = 0, this.name = null, this.namespaceUri = null, this.outFields = null, this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new g2({ layer: this }), this.spatialReference = f.WGS84, this.spatialReferences = [4326], this.swapXY = void 0, this.title = "WFS", this.type = "wfs", this.url = null, this.version = void 0;
  }
  destroy() {
    var _a;
    (_a = this.source) == null ? void 0 : _a.destroy();
  }
  load(e2) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["WFS"] }, e2).then(() => this.source.load(e2)).then(() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo", "spatialReference", "name", "namespaceUri"], "service"), p4(this.renderer, this.fieldsIndex), g(this.timeInfo, this.fieldsIndex);
    })), Promise.resolve(this);
  }
  get capabilities() {
    var _a;
    return (_a = this.source) == null ? void 0 : _a.capabilities;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  writeFields(e2, r2, t2) {
    const i3 = e2.filter((e3) => e3.name !== S);
    this.geometryField && i3.unshift(new y2({ name: this.geometryField, alias: this.geometryField, type: "geometry" })), o(t2, i3.map((e3) => e3.toJSON()), r2);
  }
  get parsedUrl() {
    return I(this.url);
  }
  set renderer(e2) {
    p4(e2, this.fieldsIndex), this._set("renderer", e2);
  }
  get wfsCapabilities() {
    var _a;
    return (_a = this.source) == null ? void 0 : _a.wfsCapabilities;
  }
  set wfsCapabilities(e2) {
    this.source && (this.source.wfsCapabilities = e2);
  }
  createPopupTemplate(e2) {
    return p2(this, e2);
  }
  createQuery() {
    const e2 = new b();
    e2.returnGeometry = true, e2.outFields = ["*"], e2.where = this.definitionExpression || "1=1";
    const { timeOffset: r2, timeExtent: t2 } = this;
    return e2.timeExtent = null != r2 && null != t2 ? t2.offset(-r2.value, r2.unit) : t2 || null, e2;
  }
  getFieldDomain(e2, r2) {
    var _a;
    return (_a = this.getField(e2)) == null ? void 0 : _a.domain;
  }
  getField(e2) {
    var _a;
    return (_a = this.fieldsIndex) == null ? void 0 : _a.get(e2);
  }
  queryFeatures(e2, r2) {
    return this.load().then(() => this.source.queryFeatures(b.from(e2) || this.createQuery(), r2)).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const r3 of e3.features)
          r3.layer = r3.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, r2) {
    return this.load().then(() => this.source.queryObjectIds(b.from(e2) || this.createQuery(), r2));
  }
  queryFeatureCount(e2, r2) {
    return this.load().then(() => this.source.queryFeatureCount(b.from(e2) || this.createQuery(), r2));
  }
  queryExtent(e2, r2) {
    return this.load().then(() => this.source.queryExtent(b.from(e2) || this.createQuery(), r2));
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e2, updates: r2 } = await this.source.refresh(this.customParameters);
      return null != r2 && this.read(r2, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e2;
    } catch {
    }
    return false;
  }
};
e([y({ readOnly: true })], M2.prototype, "capabilities", null), e([y({ type: String })], M2.prototype, "copyright", void 0), e([y({ readOnly: true })], M2.prototype, "createQueryVersion", null), e([y({ json: { name: "wfsInfo.customParameters", write: { overridePolicy: (e2) => ({ enabled: !!(e2 && Object.keys(e2).length > 0), ignoreOrigin: true }) } } })], M2.prototype, "customParameters", void 0), e([y(c2("dateFieldsTimeReference"))], M2.prototype, "dateFieldsTimeZone", void 0), e([y({ readOnly: true })], M2.prototype, "defaultPopupTemplate", null), e([y({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], M2.prototype, "definitionExpression", void 0), e([y({ type: String })], M2.prototype, "displayField", void 0), e([y(f3)], M2.prototype, "elevationInfo", void 0), e([y({ type: String, readOnly: true, json: { name: "wfsInfo.featureUrl", write: { ignoreOrigin: true, isRequired: true } } })], M2.prototype, "featureUrl", void 0), e([y({ type: [y2], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], M2.prototype, "fields", void 0), e([r("fields")], M2.prototype, "writeFields", null), e([y(J.fieldsIndex)], M2.prototype, "fieldsIndex", void 0), e([y({ type: M, json: { name: "extent" } })], M2.prototype, "fullExtent", void 0), e([y()], M2.prototype, "geometryField", void 0), e([y({ type: String, json: { read: { source: "layerDefinition.geometryType", reader: o2.read }, write: { target: "layerDefinition.geometryType", writer: o2.write, ignoreOrigin: true }, origins: { service: { read: o2.read } } } })], M2.prototype, "geometryType", void 0), e([y({ type: String })], M2.prototype, "id", void 0), e([y(m4)], M2.prototype, "labelsVisible", void 0), e([y({ type: [C], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: i2 }, write: true } })], M2.prototype, "labelingInfo", void 0), e([y(c5)], M2.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide"] })], M2.prototype, "listMode", void 0), e([y({ type: String })], M2.prototype, "objectIdField", void 0), e([y({ type: ["WFS"] })], M2.prototype, "operationalLayerType", void 0), e([y({ type: T, json: { name: "wfsInfo.maxFeatures", write: { ignoreOrigin: true, isRequired: true } } })], M2.prototype, "maxFeatures", void 0), e([y({ type: [0], readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true, isRequired: true } } } } })], M2.prototype, "mode", void 0), e([y({ type: String, json: { name: "wfsInfo.name", write: { ignoreOrigin: true, isRequired: true } } })], M2.prototype, "name", void 0), e([y({ type: String, json: { name: "wfsInfo.wfsNamespace", write: { ignoreOrigin: true, isRequired: true } } })], M2.prototype, "namespaceUri", void 0), e([y(b2)], M2.prototype, "opacity", void 0), e([y(J.outFields)], M2.prototype, "outFields", void 0), e([y({ readOnly: true })], M2.prototype, "parsedUrl", null), e([y(y3)], M2.prototype, "popupEnabled", void 0), e([y({ type: k2, json: { name: "popupInfo", write: true } })], M2.prototype, "popupTemplate", void 0), e([y({ types: m3, json: { origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: u, name: "layerDefinition.drawingInfo.renderer", write: true } }, name: "layerDefinition.drawingInfo.renderer", write: { ignoreOrigin: true } } })], M2.prototype, "renderer", null), e([y(p5)], M2.prototype, "screenSizePerspectiveEnabled", void 0), e([y({ readOnly: true })], M2.prototype, "source", void 0), e([y({ type: f, json: { name: "layerDefinition.spatialReference", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "extent.spatialReference" } } } })], M2.prototype, "spatialReference", void 0), e([y({ readOnly: true, type: [T], json: { name: "wfsInfo.supportedSpatialReferences", write: { ignoreOrigin: true, isRequired: true } } })], M2.prototype, "spatialReferences", void 0), e([y({ type: Boolean, value: false, json: { name: "wfsInfo.swapXY", write: { ignoreOrigin: true, isRequired: true } } })], M2.prototype, "swapXY", void 0), e([y({ json: { write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "name" } } } })], M2.prototype, "title", void 0), e([y({ json: { read: false }, readOnly: true })], M2.prototype, "type", void 0), e([y(d2)], M2.prototype, "url", void 0), e([y({ type: String, readOnly: true, json: { name: "wfsInfo.version", write: { ignoreOrigin: true, isRequired: true } } })], M2.prototype, "version", void 0), e([y()], M2.prototype, "wfsCapabilities", null), M2 = B = e([c("esri.layers.WFSLayer")], M2);
var Z = M2;
export {
  Z as default
};
//# sourceMappingURL=WFSLayer-WGZL7ZSG.js.map
