import {
  f as f3
} from "./chunk-UNONG753.js";
import {
  t
} from "./chunk-OFRZSMZB.js";
import {
  n
} from "./chunk-GRHSIT57.js";
import {
  S
} from "./chunk-BHJVWW2P.js";
import {
  f
} from "./chunk-K6C6RVSV.js";
import {
  V
} from "./chunk-JUZJCTW2.js";
import {
  j as j2
} from "./chunk-XXFXRXFH.js";
import {
  m
} from "./chunk-CCXEAKIM.js";
import {
  f as f2,
  r as r2
} from "./chunk-QWPLZ3QH.js";
import {
  c as c2,
  r
} from "./chunk-WL4VPODY.js";
import {
  a as a2
} from "./chunk-SJZIFARA.js";
import {
  I,
  j,
  pt
} from "./chunk-R5DM4YAB.js";
import {
  u2
} from "./chunk-NSRXJNTS.js";
import {
  g,
  y2
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  s as s2
} from "./chunk-RFPH3ZTZ.js";
import {
  u
} from "./chunk-WGO3VFQP.js";
import {
  a,
  s2 as s,
  y
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/support/basemapDefinitions.js
async function a3(e2) {
  if (!e2)
    return;
  const a4 = e2.includes("-vector") ? e2.slice(0, e2.indexOf("-vector")) : e2.includes("-3d") ? e2.slice(0, e2.indexOf("-3d")) : e2, s4 = await f("esri/t9n/basemaps");
  return s4[e2] || s4[a4];
}
var s3 = { satellite: { id: "satellite", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/satellite.jpg");
}, baseMapLayers: [{ id: "satellite-base-layer", url: "//services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer", layerType: "ArcGISTiledMapServiceLayer", title: "World Imagery", showLegend: false, visibility: true, opacity: 1 }] }, hybrid: { id: "hybrid", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/hybrid.jpg");
}, baseMapLayers: [{ id: "hybrid-base-layer", url: "//services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer", layerType: "ArcGISTiledMapServiceLayer", title: "World Imagery", showLegend: false, visibility: true, opacity: 1 }, { id: "hybrid-reference-layer", styleUrl: "https://cdn.arcgis.com/sharing/rest/content/items/30d6b8271e1849cd9c3042060001f425/resources/styles/root.json", layerType: "VectorTileLayer", title: "Hybrid Reference Layer", isReference: true, showLegend: false, visibility: true, opacity: 1 }] }, terrain: { id: "terrain", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/terrain.jpg");
}, baseMapLayers: [{ id: "terrain-base-layer", url: "//services.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer", layerType: "ArcGISTiledMapServiceLayer", title: "World Terrain Base", showLegend: false, visibility: true, opacity: 1 }, { id: "terrain-reference-layer", url: "//services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer", layerType: "ArcGISTiledMapServiceLayer", title: "World Reference Overlay", isReference: true, showLegend: false, visibility: true, opacity: 1 }] }, oceans: { id: "oceans", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/oceans.jpg");
}, baseMapLayers: [{ id: "oceans-base-layer", url: "//services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Base/MapServer", layerType: "ArcGISTiledMapServiceLayer", title: "World Ocean Base", showLegend: false, visibility: true, opacity: 1 }, { id: "oceans-reference-layer", url: "//services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Reference/MapServer", layerType: "ArcGISTiledMapServiceLayer", title: "World Ocean Reference", isReference: true, showLegend: false, visibility: true, opacity: 1 }] }, osm: { id: "osm", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/osm.jpg");
}, baseMapLayers: [{ id: "osm-base-layer", layerType: "OpenStreetMap", title: "Open Street Map", showLegend: false, visibility: true, opacity: 1 }] }, "dark-gray-vector": { id: "dark-gray-vector", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/dark-gray-vector.jpg");
}, baseMapLayers: [{ id: "dark-gray-base-layer", styleUrl: "https://cdn.arcgis.com/sharing/rest/content/items/5e9b3685f4c24d8781073dd928ebda50/resources/styles/root.json", layerType: "VectorTileLayer", title: "Dark Gray Base", visibility: true, opacity: 1 }, { id: "dark-gray-reference-layer", styleUrl: "https://cdn.arcgis.com/sharing/rest/content/items/747cb7a5329c478cbe6981076cc879c5/resources/styles/root.json", layerType: "VectorTileLayer", title: "Dark Gray Reference", isReference: true, visibility: true, opacity: 1 }] }, get "dark-gray"() {
  return { ...this["dark-gray-vector"], id: "dark-gray" };
}, "gray-vector": { id: "gray-vector", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/gray-vector.jpg");
}, baseMapLayers: [{ id: "gray-base-layer", styleUrl: "https://cdn.arcgis.com/sharing/rest/content/items/291da5eab3a0412593b66d384379f89f/resources/styles/root.json", layerType: "VectorTileLayer", title: "Light Gray Base", visibility: true, opacity: 1 }, { id: "gray-reference-layer", styleUrl: "https://cdn.arcgis.com/sharing/rest/content/items/1768e8369a214dfab4e2167d5c5f2454/resources/styles/root.json", layerType: "VectorTileLayer", title: "Light Gray Reference", isReference: true, visibility: true, opacity: 1 }] }, get gray() {
  return { ...this["gray-vector"], id: "gray" };
}, "streets-vector": { id: "streets-vector", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/streets-vector.jpg");
}, baseMapLayers: [{ id: "streets-vector-base-layer", styleUrl: "//cdn.arcgis.com/sharing/rest/content/items/de26a3cf4cc9451298ea173c4b324736/resources/styles/root.json", layerType: "VectorTileLayer", title: "World Streets", visibility: true, opacity: 1 }] }, get streets() {
  return { ...this["streets-vector"], id: "streets" };
}, "topo-vector": { id: "topo-vector", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/topo-vector.jpg");
}, baseMapLayers: [{ id: "world-hillshade-layer", url: "//services.arcgisonline.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer", layerType: "ArcGISTiledMapServiceLayer", title: "World Hillshade", showLegend: false, visibility: true, opacity: 1 }, { id: "topo-vector-base-layer", styleUrl: "//cdn.arcgis.com/sharing/rest/content/items/7dc6cea0b1764a1f9af2e679f642f0f5/resources/styles/root.json", layerType: "VectorTileLayer", title: "World Topo", visibility: true, opacity: 1 }] }, get topo() {
  return { ...this["topo-vector"], id: "topo" };
}, "streets-night-vector": { id: "streets-night-vector", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/streets-night.jpg");
}, baseMapLayers: [{ id: "streets-night-vector-base-layer", styleUrl: "//cdn.arcgis.com/sharing/rest/content/items/86f556a2d1fd468181855a35e344567f/resources/styles/root.json", layerType: "VectorTileLayer", title: "World Streets Night", visibility: true, opacity: 1 }] }, "streets-relief-vector": { id: "streets-relief-vector", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/streets-relief.jpg");
}, baseMapLayers: [{ id: "world-hillshade-layer", url: "//services.arcgisonline.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer", layerType: "ArcGISTiledMapServiceLayer", title: "World Hillshade", showLegend: false, visibility: true, opacity: 1 }, { id: "streets-relief-vector-base-layer", styleUrl: "//www.arcgis.com/sharing/rest/content/items/b266e6d17fc345b498345613930fbd76/resources/styles/root.json", title: "World Streets Relief", layerType: "VectorTileLayer", visibility: true, opacity: 1 }] }, "streets-navigation-vector": { id: "streets-navigation-vector", classic: true, get thumbnailUrl() {
  return a2("esri/images/basemap/streets-navigation.jpg");
}, baseMapLayers: [{ id: "streets-navigation-vector-base-layer", styleUrl: "//cdn.arcgis.com/sharing/rest/content/items/63c47b7177f946b49902c24129b87252/resources/styles/root.json", layerType: "VectorTileLayer", title: "World Streets Navigation", visibility: true, opacity: 1 }] }, "topo-3d": { id: "topo-3d", is3d: true, get thumbnailUrl() {
  return a2("esri/images/basemap/topo-3d.png");
}, baseMapLayers: [{ id: "topo-3d-base-layer", styleUrl: "https://www.arcgis.com/sharing/rest/content/items/1e7d1784d1ef4b79ba6764d0bd6c3150/resources/styles/root.json", layerType: "VectorTileLayer", title: "Topographic", visibility: true, opacity: 1 }, { id: "topo-3d-trees", title: "Trees", url: "https://basemaps3d.arcgis.com/arcgis/rest/services/OpenStreetMap3D_Trees_Thematic_v1/SceneServer", itemId: "f75fef56b2d944fe92ef9f7737b4f953", layerType: "ArcGISSceneServiceLayer" }, { id: "topo-3d-places-and-labels", title: "Places and Labels", url: "https://basemaps3d.arcgis.com/arcgis/rest/services/OpenStreetMap3D_DarkLabels_v1/SceneServer", itemId: "a84404ad39c64c328d0596e361ec459b", layerType: "ArcGISSceneServiceLayer" }, { id: "topo-3d-buildings", title: "Buildings", url: "https://basemaps3d.arcgis.com/arcgis/rest/services/OpenStreetMap3D_Buildings_v1/SceneServer", itemId: "ca0470dbbddb4db28bad74ed39949e25", layerType: "ArcGISSceneServiceLayer" }] }, "navigation-3d": { id: "navigation-3d", is3d: true, get thumbnailUrl() {
  return a2("esri/images/basemap/navigation-3d.jpg");
}, baseMapLayers: [{ id: "navigation-3d-base-layer", styleUrl: "https://www.arcgis.com/sharing/rest/content/items/ccc904ff872b4144b94934e55e32784b/resources/styles/root.json", layerType: "VectorTileLayer", title: "Navigation", visibility: true, opacity: 1 }, { id: "navigation-3d-places-and-labels", title: "Places and Labels", url: "https://basemaps3d.arcgis.com/arcgis/rest/services/OpenStreetMap3D_DarkLabels_v1/SceneServer", itemId: "a84404ad39c64c328d0596e361ec459b", layerType: "ArcGISSceneServiceLayer" }, { id: "navigation-3d-buildings", title: "Buildings", url: "https://basemaps3d.arcgis.com/arcgis/rest/services/OpenStreetMap3D_Buildings_v1/SceneServer", itemId: "ca0470dbbddb4db28bad74ed39949e25", layerType: "ArcGISSceneServiceLayer" }] }, "navigation-dark-3d": { id: "navigation-dark-3d", itemId: "5a1365328b4943f09a54cf5fd1205707", is3d: true, baseMapLayers: [{ id: "navigation-dark-3d-base-layer", styleUrl: "https://www.arcgis.com/sharing/rest/content/items/451a1777ab3f4bf095fae24a117439d9/resources/styles/root.json", layerType: "VectorTileLayer", title: "Navigation Dark" }, { id: "navigation-dark-3d-places-and-labels", title: "Places and Labels", url: "https://basemaps3d.arcgis.com/arcgis/rest/services/OpenStreetMap3D_LightLabels_v1/SceneServer/layers/0", itemId: "f364b70b012a4da5a4b5921e193eac4a", layerType: "ArcGISSceneServiceLayer" }, { id: "navigation-dark-3d-buildings", title: "Buildings", url: "https://basemaps3d.arcgis.com/arcgis/rest/services/OpenStreetMap3D_Buildings_v1/SceneServer", itemId: "ca0470dbbddb4db28bad74ed39949e25", layerType: "ArcGISSceneServiceLayer" }] }, "arcgis-imagery": { get thumbnailUrl() {
  return a2("esri/images/basemap/hybrid.jpg");
}, title: "Imagery Hybrid", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Imagery", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/World_Imagery/MapServer" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Imagery:Labels", title: "Hybrid Reference Layer", isReference: true }] }, "arcgis-imagery-standard": { get thumbnailUrl() {
  return a2("esri/images/basemap/satellite.jpg");
}, title: "Imagery", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Imagery", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/World_Imagery/MapServer" }] }, "arcgis-imagery-labels": { title: "Hybrid [Reference]", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Imagery:Labels", title: "Hybrid Reference Layer", isReference: true }] }, "arcgis-light-gray": { get thumbnailUrl() {
  return a2("esri/images/basemap/gray-vector.jpg");
}, title: "Light Gray Canvas", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:LightGray:Base", title: "Light Gray Canvas Base" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:LightGray:Labels", title: "Light Gray Canvas Labels", isReference: true }] }, "arcgis-dark-gray": { get thumbnailUrl() {
  return a2("esri/images/basemap/dark-gray.jpg");
}, title: "Dark Gray Canvas", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:DarkGray:Base", title: "Dark Gray Canvas Base" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:DarkGray:Labels", title: "Dark Gray Canvas Labels", isReference: true }] }, "arcgis-navigation": { get thumbnailUrl() {
  return a2("esri/images/basemap/streets-navigation.jpg");
}, title: "Navigation", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Navigation", title: "World Navigation Map" }] }, "arcgis-navigation-night": { title: "Navigation (Dark Mode)", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:NavigationNight", title: "World Navigation Map (Dark Mode)" }] }, "arcgis-streets": { get thumbnailUrl() {
  return a2("esri/images/basemap/streets-vector.jpg");
}, title: "Streets", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Streets", title: "World Street Map" }] }, "arcgis-streets-night": { get thumbnailUrl() {
  return a2("esri/images/basemap/streets-night.jpg");
}, title: "Streets (Night)", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:StreetsNight", title: "World Street Map (Night)" }] }, "arcgis-streets-relief": { get thumbnailUrl() {
  return a2("esri/images/basemap/streets-relief.jpg");
}, title: "Streets (with Relief)", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:StreetsRelief:Base", title: "World Street Map (with Relief)" }] }, "arcgis-topographic": { get thumbnailUrl() {
  return a2("esri/images/basemap/topo.jpg");
}, title: "Topographic", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Topographic:Base", title: "World Topographic Map" }] }, "arcgis-oceans": { get thumbnailUrl() {
  return a2("esri/images/basemap/oceans.jpg");
}, title: "Oceans", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Ocean Base", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Ocean/World_Ocean_Base/MapServer" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Oceans:Labels", title: "World Ocean Reference", isReference: true }] }, "osm-standard": { title: "OpenStreetMap", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/OSM:Standard", title: "OpenStreetMap" }] }, "osm-standard-relief": { title: "OpenStreetMap (with relief)", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer" }, { styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/OSM:StandardRelief:Base", layerType: "VectorTileLayer", title: "OpenStreetMap Relief Base" }] }, "osm-streets": { title: "OpenStreetMap (Streets)", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/OSM:Streets", title: "OpenStreetMap (Streets)" }] }, "osm-streets-relief": { title: "OpenStreetMap (Streets with relief)", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer" }, { styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/OSM:StreetsRelief:Base", layerType: "VectorTileLayer", title: "OpenStreetMap Relief Base" }] }, "osm-light-gray": { title: "OpenStreetMap (Light Gray Canvas)", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/OSM:LightGray:Base", title: "OSM (Light Gray Base)" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/OSM:LightGray:Labels", title: "OSM (Light Gray Reference)", isReference: true }] }, "osm-dark-gray": { title: "OpenStreetMap (Dark Gray Canvas)", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/OSM:DarkGray:Base", title: "OSM (Dark Gray Base)" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/OSM:DarkGray:Labels", title: "OSM (Dark Gray Reference)", isReference: true }] }, "arcgis-terrain": { title: "Terrain with Labels", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Terrain:Base", title: "World Terrain Base" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Terrain:Detail", title: "World Terrain Reference", isReference: true }] }, "arcgis-community": { title: "Community", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Community", title: "Community" }] }, "arcgis-charted-territory": { title: "Charted Territory", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:ChartedTerritory:Base", title: "Charted Territory" }] }, "arcgis-colored-pencil": { title: "Colored Pencil", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:ColoredPencil", title: "Colored Pencil" }] }, "arcgis-nova": { title: "Nova", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Nova", title: "Nova" }] }, "arcgis-modern-antique": { title: "Modern Antique", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:ModernAntique:Base", title: "Modern Antique" }] }, "arcgis-midcentury": { title: "Mid-Century", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Midcentury", title: "Mid-Century" }] }, "arcgis-newspaper": { title: "Newspaper", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:Newspaper", title: "Newspaper" }] }, "arcgis-hillshade-light": { title: "Hillshade", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer" }] }, "arcgis-hillshade-dark": { title: "Hillshade (Dark)", baseMapLayers: [{ layerType: "ArcGISTiledMapServiceLayer", showLegend: false, title: "World Hillshade (Dark)", url: "https://ibasemaps-api.arcgis.com/arcgis/rest/services/Elevation/World_Hillshade_Dark/MapServer" }] }, "arcgis-human-geography": { title: "Human Geography", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:HumanGeography:Base", title: "Human Geography Base" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:HumanGeography:Detail", title: "Human Geography Detail", isReference: true }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:HumanGeography:Label", title: "Human Geography Label", isReference: true }] }, "arcgis-human-geography-dark": { title: "Human Geography (Dark)", baseMapLayers: [{ layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:HumanGeographyDark:Base", title: "Human Geography Dark Base" }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:HumanGeographyDark:Detail", title: "Human Geography Dark Detail", isReference: true }, { layerType: "VectorTileLayer", styleUrl: "https://basemaps-api.arcgis.com/arcgis/rest/services/styles/ArcGIS:HumanGeographyDark:Label", title: "Human Geography Dark Label", isReference: true }] } };

// node_modules/@arcgis/core/support/BasemapStyle.js
var c3 = /* @__PURE__ */ new Set(["ar", "bs", "ca", "hr", "cs", "da", "nl", "en", "et", "fi", "fr", "de", "el", "he", "hu", "id", "it", "ja", "ko", "lv", "lt", "nb", "pl", "ro", "ru", "sr", "es", "sv", "th", "tr", "uk", "vi"]);
var p = class extends g {
  constructor(r3) {
    super(r3), this.id = null, this.language = null, this.serviceUrl = "https://basemapstyles-api.arcgis.com/arcgis/rest/services/styles/v2/webmaps";
  }
  getLanguageParamValue() {
    if (this.language)
      return this.language;
    const r3 = c2().toLowerCase();
    switch (r3) {
      case "pt-br":
        return "pt-BR";
      case "pt-pt":
        return "pt-PT";
      case "zh-cn":
        return "zh-CN";
      case "zh-hk":
        return "zh-HK";
      case "zh-tw":
        return "zh-TW";
    }
    const s4 = r(r3);
    return "pt" === s4 ? "pt-BR" : s4 && c3.has(s4) ? s4 : "global";
  }
};
e([y2()], p.prototype, "id", void 0), e([y2()], p.prototype, "language", void 0), e([y2()], p.prototype, "serviceUrl", void 0), p = e([c("esri.support.BasemapStyle")], p);
var i = p;

// node_modules/@arcgis/core/Basemap.js
var _;
var v = 0;
var M = "esri.Basemap";
var U = _ = class extends u2(m) {
  constructor(e2) {
    super(e2), this.id = null, this.portalItem = null, this.spatialReference = null, this.style = null, this.thumbnailUrl = null, this.title = "Basemap", this.id = Date.now().toString(16) + "-basemap-" + v++, this.baseLayers = new V(), this.referenceLayers = new V();
    const r3 = (e3) => {
      e3.parent && e3.parent !== this && "remove" in e3.parent && e3.parent.remove(e3), e3.parent = this, "elevation" === e3.type && s.getLogger(this).error(`Layer '${e3.title}, id:${e3.id}' of type '${e3.type}' is not supported as a basemap layer and will therefore be ignored.`);
    }, s4 = (e3) => {
      e3.parent = null;
    };
    this.addHandles([this.baseLayers.on("after-add", (e3) => r3(e3.item)), this.referenceLayers.on("after-add", (e3) => r3(e3.item)), this.baseLayers.on("after-remove", (e3) => s4(e3.item)), this.referenceLayers.on("after-remove", (e3) => s4(e3.item))]);
  }
  initialize() {
    this.when().catch((e2) => {
      s.getLogger(this).error("#load()", `Failed to load basemap (title: '${this.title}', id: '${this.id}')`, e2);
    }), this.resourceInfo && this.read(this.resourceInfo.data, this.resourceInfo.context);
  }
  destroy() {
    const e2 = this.baseLayers.toArray();
    for (const t2 of e2)
      t2.destroy();
    const r3 = this.referenceLayers.toArray();
    for (const t2 of r3)
      t2.destroy();
    this.baseLayers.destroy(), this.referenceLayers.destroy(), this.portalItem = u(this.portalItem);
  }
  normalizeCtorArgs(e2) {
    return e2 && "resourceInfo" in e2 && (this._set("resourceInfo", e2.resourceInfo), delete (e2 = { ...e2 }).resourceInfo), e2;
  }
  set baseLayers(e2) {
    this._set("baseLayers", n(e2, this._get("baseLayers")));
  }
  _writeBaseLayers(e2, r3, t2) {
    const s4 = [];
    e2 ? (t2 = { ...t2, layerContainerType: "basemap" }, this.baseLayers.forEach((e3) => {
      const r4 = f3(e3, t2.webmap ? t2.webmap.getLayerJSONFromResourceInfo(e3) : null, t2);
      null != r4 && s4.push(r4);
    }), this.referenceLayers.forEach((e3) => {
      const r4 = f3(e3, t2.webmap ? t2.webmap.getLayerJSONFromResourceInfo(e3) : null, t2);
      null != r4 && ("scene" !== e3.type && (r4.isReference = true), s4.push(r4));
    }), r3.baseMapLayers = s4) : r3.baseMapLayers = s4;
  }
  set referenceLayers(e2) {
    this._set("referenceLayers", n(e2, this._get("referenceLayers")));
  }
  writeTitle(e2, r3) {
    r3.title = e2 || "Basemap";
  }
  load(e2) {
    return this.addResolvingPromise(this._loadFromSource(e2)), Promise.resolve(this);
  }
  loadAll() {
    return t(this, (e2) => {
      e2(this.baseLayers, this.referenceLayers);
    });
  }
  clone() {
    const e2 = { id: this.id, title: this.title, portalItem: this.portalItem, baseLayers: this.baseLayers.map((e3) => y(e3) ? e3.clone() : e3), referenceLayers: this.referenceLayers.map((e3) => y(e3) ? e3.clone() : e3) };
    return this.loaded && (e2.loadStatus = "loaded"), new _({ resourceInfo: this.resourceInfo }).set(e2);
  }
  read(e2, r3) {
    this.resourceInfo || this._set("resourceInfo", { data: e2, context: r3 }), super.read(e2, r3);
  }
  write(e2, r3) {
    var _a;
    return e2 = e2 || {}, (r3 == null ? void 0 : r3.origin) || (r3 = { origin: "web-map", ...r3 }), super.write(e2, r3), !this.loaded && ((_a = this.resourceInfo) == null ? void 0 : _a.data.baseMapLayers) && (e2.baseMapLayers = this.resourceInfo.data.baseMapLayers.map((e3) => {
      const r4 = a(e3);
      return r4.url && pt(r4.url) && (r4.url = `https:${r4.url}`), r4.templateUrl && pt(r4.templateUrl) && (r4.templateUrl = `https:${r4.templateUrl}`), r4;
    })), e2;
  }
  async _loadFromSource(e2) {
    const { resourceInfo: r3, portalItem: t2, style: s4 } = this;
    s2(e2);
    const a4 = [];
    if (r3) {
      const t3 = r3.context ? r3.context.url : null;
      if (a4.push(this._loadLayersFromJSON(r3.data, t3, e2)), r3.data.id && !r3.data.title) {
        const e3 = r3.data.id;
        a4.push(a3(e3).then((e4) => {
          e4 && this.read({ title: e4 }, r3.context);
        }));
      }
    } else
      t2 ? a4.push(this._loadFromItem(t2, e2)) : s4 && a4.push(this._loadFromStylesService(s4, e2));
    await Promise.all(a4);
  }
  async _loadLayersFromJSON(e2, r3, t2) {
    var _a, _b;
    const s4 = (_a = this.resourceInfo) == null ? void 0 : _a.context, a4 = ((_b = this.portalItem) == null ? void 0 : _b.portal) || (s4 == null ? void 0 : s4.portal) || null, o = F[(s4 == null ? void 0 : s4.origin) || ""] ?? "web-map", { populateOperationalLayers: i2 } = await import("./layersCreator-STMN4LSU.js"), n2 = [];
    if (s2(t2), e2.baseMapLayers && Array.isArray(e2.baseMapLayers)) {
      const t3 = { context: { ...s4, origin: o, url: r3, portal: a4, layerContainerType: "basemap" }, defaultLayerType: "DefaultTileLayer" }, l = (e3) => "web-scene" === o && "ArcGISSceneServiceLayer" === e3.layerType || e3.isReference, p2 = i2(this.baseLayers, e2.baseMapLayers.filter((e3) => !l(e3)), t3);
      n2.push(p2);
      const c4 = i2(this.referenceLayers, e2.baseMapLayers.filter(l), t3);
      n2.push(c4);
    }
    await Promise.allSettled(n2);
  }
  async _loadFromItem(e2, r3) {
    const t2 = await e2.load(r3), s4 = await t2.fetchData("json", r3), a4 = I(e2.itemUrl ?? "");
    return this._set("resourceInfo", { data: s4.baseMap ?? {}, context: { origin: x[e2.type || ""] ?? "web-map", portal: e2.portal || j2.getDefault(), url: a4 } }), this.read(this.resourceInfo.data, this.resourceInfo.context), this.read({ spatialReference: s4.spatialReference }, this.resourceInfo.context), this.read({ title: e2.title, thumbnailUrl: e2.thumbnailUrl }, { origin: "portal-item", portal: e2.portal || j2.getDefault(), url: a4 }), this._loadLayersFromJSON(this.resourceInfo.data, a4, r3);
  }
  async _loadFromStylesService(e2, t2) {
    var _a;
    const s4 = `${e2.serviceUrl}/${e2.id}`, a4 = (await j(s4, { query: { language: e2.getLanguageParamValue() }, signal: t2 == null ? void 0 : t2.signal })).data;
    if (a4.baseMap && Array.isArray(a4.baseMap.baseMapLayers)) {
      for (const r3 of a4.baseMap.baseMapLayers)
        if (!r3.customParameters && ((_a = r3.styleUrl) == null ? void 0 : _a.includes("?"))) {
          const e3 = I(r3.styleUrl);
          e3.query && (r3.styleUrl = e3.path, r3.customParameters = e3.query);
        }
    }
    const o = I(s4);
    return this._set("resourceInfo", { data: a4.baseMap ?? {}, context: { origin: "web-map", url: o } }), this.read(this.resourceInfo.data, this.resourceInfo.context), this.read({ spatialReference: a4.spatialReference }, this.resourceInfo.context), this._loadLayersFromJSON(this.resourceInfo.data, o, t2);
  }
  static fromId(e2) {
    const r3 = s3[e2];
    return r3 ? r3.itemId ? new _({ portalItem: { id: r3.itemId, portal: { url: "https://www.arcgis.com" } } }) : _.fromJSON(r3, { origin: r3.is3d ? "web-scene" : "web-map" }) : null;
  }
};
e([y2({ json: { write: { ignoreOrigin: true, target: "baseMapLayers", writer(e2, r3, t2, s4) {
  this._writeBaseLayers(e2, r3, s4);
} }, origins: { "web-scene": { write: { ignoreOrigin: true, target: { baseMapLayers: { type: V } }, writer(e2, r3, t2, s4) {
  this._writeBaseLayers(e2, r3, s4);
} } } } } })], U.prototype, "baseLayers", null), e([y2({ type: String, json: { origins: { "web-scene": { write: true } } } })], U.prototype, "id", void 0), e([y2({ type: S })], U.prototype, "portalItem", void 0), e([y2()], U.prototype, "referenceLayers", null), e([y2({ readOnly: true })], U.prototype, "resourceInfo", void 0), e([y2({ type: f2 })], U.prototype, "spatialReference", void 0), e([y2({ type: i })], U.prototype, "style", void 0), e([y2()], U.prototype, "thumbnailUrl", void 0), e([y2({ type: String, json: { origins: { "web-scene": { write: { isRequired: true } } } } })], U.prototype, "title", void 0), e([r2("title")], U.prototype, "writeTitle", null), U = _ = e([c(M)], U);
var x = { "Web Scene": "web-scene", "Web Map": "web-map", "Link Chart": "link-chart" };
var F = { "web-scene": "web-scene", "web-map": "web-map", "link-chart": "link-chart" };
var R = U;

export {
  s3 as s,
  R
};
//# sourceMappingURL=chunk-5WWPLX36.js.map
