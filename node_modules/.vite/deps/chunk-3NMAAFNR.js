import {
  ae
} from "./chunk-KMLN2BZX.js";
import {
  D,
  E as E2,
  F as F2,
  I,
  L,
  S as S2,
  T as T3,
  a as a2,
  d as d4,
  f as f3,
  f2 as f4,
  g as g2,
  m as m2,
  p as p3,
  t as t4,
  v,
  w,
  w2,
  x as x3,
  y as y3
} from "./chunk-GGNFNEIJ.js";
import {
  t as t3
} from "./chunk-JZRUQED2.js";
import {
  N as N2
} from "./chunk-Z3CHIB6Q.js";
import {
  F,
  J,
  M,
  N,
  P,
  Pe,
  Re,
  T as T2,
  Ye,
  d,
  f as f2,
  g,
  l2 as l,
  s4 as s3,
  y as y2
} from "./chunk-24PJGGGS.js";
import {
  n as n8
} from "./chunk-RXV6RUH7.js";
import {
  n as n7,
  s as s4
} from "./chunk-JF5KFXQA.js";
import {
  a,
  s as s5
} from "./chunk-SH5MUYBA.js";
import {
  n as n2,
  r,
  r2,
  s as s2,
  t as t2,
  x
} from "./chunk-GXVWD6F2.js";
import {
  c,
  n as n3,
  n2 as n4
} from "./chunk-W4QVNWBV.js";
import {
  Ze
} from "./chunk-BPPKPMEP.js";
import {
  n as n6
} from "./chunk-ZRKSP45X.js";
import {
  n as n5,
  x as x2
} from "./chunk-DT2VHQBL.js";
import {
  d as d2
} from "./chunk-BYK6DXRK.js";
import {
  d as d3
} from "./chunk-UTCX6DGX.js";
import {
  b,
  m
} from "./chunk-45OAWGCA.js";
import {
  K
} from "./chunk-X2TA76Q5.js";
import {
  y
} from "./chunk-XN6LAULS.js";
import {
  Z
} from "./chunk-M7OEQQRX.js";
import {
  i,
  u
} from "./chunk-OJ65P3EQ.js";
import {
  c as c2
} from "./chunk-FWR4JURK.js";
import {
  p as p2
} from "./chunk-IPCIO3PX.js";
import {
  S
} from "./chunk-BHJVWW2P.js";
import {
  p
} from "./chunk-QNOCEWCR.js";
import {
  f
} from "./chunk-QWPLZ3QH.js";
import {
  T
} from "./chunk-HLGIRLYQ.js";
import {
  j,
  t3 as t
} from "./chunk-R5DM4YAB.js";
import {
  E,
  h
} from "./chunk-RFPH3ZTZ.js";
import {
  n
} from "./chunk-WGO3VFQP.js";
import {
  s3 as s
} from "./chunk-WJ3HJKNC.js";
import {
  has
} from "./chunk-4V6374PV.js";

// node_modules/@arcgis/core/arcade/featureSetCollection.js
var e = class {
  constructor() {
    this.declaredRootClass = "esri.arcade.featureSetCollection", this._layerById = {}, this._layerByName = {};
  }
  add(e3, t6, a6) {
    this._layerById[t6] = a6, this._layerByName[e3] = a6;
  }
  async featureSetByName(e3, t6 = true, a6 = ["*"]) {
    return void 0 === this._layerByName[e3] ? null : this._layerByName[e3];
  }
  async featureSetById(e3, t6 = true, a6 = ["*"]) {
    return void 0 === this._layerById[e3] ? null : this._layerById[e3];
  }
  castToText(e3 = false) {
    return "object, FeatureSetCollection";
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/AttributeFilter.js
var c3 = class _c extends x3 {
  constructor(e3) {
    super(e3), this.declaredClass = "esri.arcade.featureset.actions.AttributeFilter", this._maxProcessing = 1e3, this._parent = e3.parentfeatureset, e3.whereclause instanceof x ? (this._whereclause = e3.whereclause, this._whereClauseFunction = null) : (this._whereClauseFunction = e3.whereclause, this._whereclause = null);
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.fields = this._parent.fields.slice(0), this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types) : (this.fields = [], this.typeIdField = "", this.objectIdField = "", this.globalIdField = "", this.spatialReference = new f({ wkid: 4326 }), this.geometryType = N.point);
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t6 = await this._parent._getFilteredSet("", null, this._whereclause, null, e3);
      return this._checkCancelled(e3), null !== this._whereClauseFunction ? this._wset = new t4(t6._candidates.slice(0).concat(t6._known.slice(0)), [], t6._ordered, this._clonePageDefinition(t6.pagesDefinition)) : this._wset = new t4(t6._candidates.slice(0), t6._known.slice(0), t6._ordered, this._clonePageDefinition(t6.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e3) {
    var _a;
    let t6 = (_a = this._parent) == null ? void 0 : _a._isInFeatureSet(e3);
    return t6 === s3.NotInFeatureSet ? t6 : (t6 = this._idstates[e3], void 0 === t6 ? s3.Unknown : t6);
  }
  _getFeature(e3, t6, s7) {
    return this._parent._getFeature(e3, t6, s7);
  }
  _getFeatures(e3, t6, s7, i2) {
    return this._parent._getFeatures(e3, t6, s7, i2);
  }
  _featureFromCache(e3) {
    return this._parent._featureFromCache(e3);
  }
  executeWhereClause(e3) {
    var _a;
    return ((_a = this._whereclause) == null ? void 0 : _a.testFeature(e3)) ?? false;
  }
  async executeWhereClauseDeferred(e3) {
    if (null !== this._whereClauseFunction) {
      const t6 = this._whereClauseFunction(e3);
      return E(t6), t6;
    }
    return this.executeWhereClause(e3);
  }
  async _fetchAndRefineFeatures(e3, t6, s7) {
    var _a, _b, _c2;
    const r3 = new t4([], e3, false, null), a6 = Math.min(t6, e3.length);
    if (await ((_a = this._parent) == null ? void 0 : _a._getFeatures(r3, -1, a6, s7)), this._checkCancelled(s7), null == this._whereClauseFunction) {
      for (let t7 = 0; t7 < a6; t7++) {
        const s8 = (_b = this._parent) == null ? void 0 : _b._featureFromCache(e3[t7]);
        true === this.executeWhereClause(s8) ? this._idstates[e3[t7]] = s3.InFeatureSet : this._idstates[e3[t7]] = s3.NotInFeatureSet;
      }
      return "success";
    }
    const l3 = [];
    for (let i2 = 0; i2 < a6; i2++) {
      const t7 = (_c2 = this._parent) == null ? void 0 : _c2._featureFromCache(e3[i2]);
      l3.push(await this.executeWhereClauseDeferred(t7));
    }
    for (let i2 = 0; i2 < t6; i2++)
      true === l3[i2] ? this._idstates[e3[i2]] = s3.InFeatureSet : this._idstates[e3[i2]] = s3.NotInFeatureSet;
    return "success";
  }
  async _getFilteredSet(e3, t6, s7, r3, n9) {
    null !== this._whereClauseFunction || (null !== s7 ? null !== this._whereclause && (s7 = g2(this._whereclause, s7)) : s7 = this._whereclause), await this._ensureLoaded();
    const l3 = await this._parent._getFilteredSet(e3, t6, s7, r3, n9);
    let h2;
    return this._checkCancelled(n9), h2 = null !== this._whereClauseFunction ? new t4(l3._candidates.slice(0).concat(l3._known.slice(0)), [], l3._ordered, this._clonePageDefinition(l3.pagesDefinition)) : new t4(l3._candidates.slice(0), l3._known.slice(0), l3._ordered, this._clonePageDefinition(l3.pagesDefinition)), h2;
  }
  async _stat(e3, t6, s7, i2, r3, n9, l3) {
    if (null !== this._whereClauseFunction)
      return null === r3 && "" === s7 && null === i2 ? this._manualStat(e3, t6, n9, l3) : { calculated: false };
    let h2 = this._whereclause;
    null !== r3 && null !== this._whereclause && (h2 = g2(this._whereclause, r3));
    const u2 = await this._parent._stat(e3, t6, s7, i2, h2, n9, l3);
    return false === u2.calculated ? null === r3 && "" === s7 && null === i2 ? this._manualStat(e3, t6, n9, l3) : { calculated: false } : u2;
  }
  async _canDoAggregates(e3, t6, s7, i2, r3) {
    return null === this._whereClauseFunction && (null !== r3 ? null !== this._whereclause && (r3 = g2(this._whereclause, r3)) : r3 = this._whereclause, null !== this._parent && this._parent._canDoAggregates(e3, t6, s7, i2, r3));
  }
  async _getAggregatePagesDataSourceDefinition(s7, i2, r3, n9, l3, h2, u2) {
    if (null === this._parent)
      throw new s2(r.NeverReach);
    return null !== l3 ? null !== this._whereclause && (l3 = g2(this._whereclause, l3)) : l3 = this._whereclause, this._parent._getAggregatePagesDataSourceDefinition(s7, i2, r3, n9, l3, h2, u2);
  }
  static registerAction() {
    x3._featuresetFunctions.filter = function(e3) {
      if ("function" == typeof e3)
        return new _c({ parentfeatureset: this, whereclause: e3 });
      let t6 = null;
      return e3 instanceof x && (t6 = e3), new _c({ parentfeatureset: this, whereclause: t6 });
    };
  }
  getFieldsIndex() {
    return this._parent.getFieldsIndex();
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/Adapted.js
var D2 = class {
  constructor(e3) {
    this.field = e3, this.sqlRewritable = false;
  }
  postInitialization(e3, t6) {
  }
};
var I2 = class extends D2 {
  constructor(e3) {
    super(e3), this.sqlRewritable = true;
  }
  extractValue(e3) {
    return e3.attributes[this.field.name];
  }
  rewriteSql(e3) {
    return { rewritten: this.sqlRewritable, where: e3 };
  }
};
var k = class extends D2 {
  constructor(e3, t6, r3) {
    super(y2(e3)), this.originalField = e3, this.sqlRewritable = true, this.field.name = t6, this.field.alias = r3;
  }
  rewriteSql(e3, t6) {
    return { rewritten: this.sqlRewritable, where: m2(e3, this.field.name, this.originalField.name, t6.getFieldsIndex()) };
  }
  extractValue(e3) {
    return e3.attributes[this.originalField.name];
  }
};
var b2 = class _b extends D2 {
  constructor(e3, t6, r3) {
    super(e3), this.codefield = t6, this.lkp = r3, this.reverseLkp = {};
    for (const s7 in r3)
      this.reverseLkp[r3[s7]] = s7;
    this.sqlRewritable = true;
  }
  rewriteSql(e3, t6) {
    const r3 = this.evaluateNodeToWhereClause(e3.parseTree, l.Standardised, this.field.name, this.codefield instanceof x ? f3(this.codefield, l.Standardised) : this.codefield, e3.parameters);
    return r3.includes(_b.BADNESS) ? { rewritten: false, where: e3 } : { rewritten: this.sqlRewritable, where: x.create(r3, t6._parent.getFieldsIndex(), t6.dateFieldsTimeZoneDefaultUTC) };
  }
  evaluateNodeToWhereClause(e3, t6, a6 = null, i2 = null, l3) {
    let n9, o, h2, g4;
    switch (e3.type) {
      case "interval":
        return F2(this.evaluateNodeToWhereClause(e3.value, t6, a6, i2, l3), e3.qualifier, e3.op);
      case "case-expression": {
        let r3 = " CASE ";
        "simple" === e3.format && (r3 += this.evaluateNodeToWhereClause(e3.operand, t6, a6, _b.BADNESS, l3));
        for (let s7 = 0; s7 < e3.clauses.length; s7++)
          r3 += " WHEN " + this.evaluateNodeToWhereClause(e3.clauses[s7].operand, t6, a6, _b.BADNESS, l3) + " THEN " + this.evaluateNodeToWhereClause(e3.clauses[s7].value, t6, a6, _b.BADNESS, l3);
        return null !== e3.else && (r3 += " ELSE " + this.evaluateNodeToWhereClause(e3.else, t6, a6, _b.BADNESS, l3)), r3 += " END ", r3;
      }
      case "parameter": {
        const r3 = l3[e3.value.toLowerCase()];
        if ("string" == typeof r3)
          return "'" + r3.toString().replaceAll("'", "''") + "'";
        if (f2(r3))
          return w(r3, t6);
        if (d(r3))
          return w(r3, t6);
        if (g(r3))
          return E2(r3, t6);
        if (T2(r3))
          return T3(r3, t6);
        if (F(r3))
          return S2(r3, t6);
        if (r3 instanceof Array) {
          const e4 = [];
          for (let s7 = 0; s7 < r3.length; s7++)
            "string" == typeof r3[s7] ? e4.push("'" + r3[s7].toString().replaceAll("'", "''") + "'") : f2(r3[s7]) || d(r3[s7]) ? e4.push(w(r3[s7], t6)) : g(r3[s7]) ? e4.push(E2(r3[s7], t6)) : T2(r3[s7]) ? e4.push(T3(r3[s7], t6)) : F(r3[s7]) ? e4.push(S2(r3[s7], t6)) : e4.push(r3[s7].toString());
          return e4;
        }
        return r3.toString();
      }
      case "expression-list":
        o = [];
        for (const r3 of e3.value)
          o.push(this.evaluateNodeToWhereClause(r3, t6, a6, i2, l3));
        return o;
      case "unary-expression":
        return " ( NOT " + this.evaluateNodeToWhereClause(e3.expr, t6, a6, _b.BADNESS, l3) + " ) ";
      case "binary-expression":
        switch (e3.operator) {
          case "AND":
            return " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " AND " + this.evaluateNodeToWhereClause(e3.right, t6, a6, i2, l3) + ") ";
          case "OR":
            return " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " OR " + this.evaluateNodeToWhereClause(e3.right, t6, a6, i2, l3) + ") ";
          case "IS":
            if ("null" !== e3.right.type)
              throw new n2(t2.UnsupportedIsRhs);
            return " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " IS NULL )";
          case "ISNOT":
            if ("null" !== e3.right.type)
              throw new n2(t2.UnsupportedIsRhs);
            return " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " IS NOT NULL )";
          case "IN":
            if (n9 = [], "expression-list" === e3.right.type) {
              if ("column-reference" === e3.left.type && e3.left.column.toUpperCase() === this.field.name.toUpperCase()) {
                const r3 = [];
                let s7 = true;
                for (const t7 of e3.right.value) {
                  if ("string" !== t7.type) {
                    s7 = false;
                    break;
                  }
                  if (void 0 === this.lkp[t7.value]) {
                    s7 = false;
                    break;
                  }
                  r3.push(this.lkp[t7.value].toString());
                }
                if (s7)
                  return " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " IN (" + r3.join(",") + ")) ";
              }
              return n9 = this.evaluateNodeToWhereClause(e3.right, t6, a6, i2, l3), " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " IN (" + n9.join(",") + ")) ";
            }
            return g4 = this.evaluateNodeToWhereClause(e3.right, t6, a6, i2, l3), g4 instanceof Array ? " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " IN (" + g4.join(",") + ")) " : " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " IN (" + g4 + ")) ";
          case "NOT IN":
            if (n9 = [], "expression-list" === e3.right.type) {
              if ("column-reference" === e3.left.type && e3.left.column.toUpperCase() === this.field.name.toUpperCase()) {
                const r3 = [];
                let s7 = true;
                for (const t7 of e3.right.value) {
                  if ("string" !== t7.type) {
                    s7 = false;
                    break;
                  }
                  if (void 0 === this.lkp[t7.value]) {
                    s7 = false;
                    break;
                  }
                  r3.push(this.lkp[t7.value].toString());
                }
                if (s7)
                  return " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " NOT IN (" + r3.join(",") + ")) ";
              }
              return n9 = this.evaluateNodeToWhereClause(e3.right, t6, a6, i2, l3), " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " NOT IN (" + n9.join(",") + ")) ";
            }
            return g4 = this.evaluateNodeToWhereClause(e3.right, t6, a6, i2, l3), g4 instanceof Array ? " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " NOT IN (" + g4.join(",") + ")) " : " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, i2, l3) + " NOT IN (" + g4 + ")) ";
          case "BETWEEN":
            return h2 = this.evaluateNodeToWhereClause(e3.right, t6, a6, _b.BADNESS, l3), " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, _b.BADNESS, l3) + " BETWEEN " + h2[0] + " AND " + h2[1] + " ) ";
          case "NOTBETWEEN":
            return h2 = this.evaluateNodeToWhereClause(e3.right, t6, a6, _b.BADNESS, l3), " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, _b.BADNESS, l3) + " NOT BETWEEN " + h2[0] + " AND " + h2[1] + " ) ";
          case "LIKE":
            return "" !== e3.escape ? " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, _b.BADNESS, l3) + " LIKE " + this.evaluateNodeToWhereClause(e3.right, t6, a6, _b.BADNESS, l3) + " ESCAPE '" + e3.escape + "') " : " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, _b.BADNESS, l3) + " LIKE " + this.evaluateNodeToWhereClause(e3.right, t6, a6, _b.BADNESS, l3) + ") ";
          case "NOT LIKE":
            return "" !== e3.escape ? " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, _b.BADNESS, l3) + " NOT LIKE " + this.evaluateNodeToWhereClause(e3.right, t6, a6, _b.BADNESS, l3) + " ESCAPE '" + e3.escape + "') " : " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, _b.BADNESS, l3) + " NOT LIKE " + this.evaluateNodeToWhereClause(e3.right, t6, a6, _b.BADNESS, l3) + ") ";
          case "<>":
          case "=":
            if ("column-reference" === e3.left.type && "string" === e3.right.type) {
              if (e3.left.column.toUpperCase() === this.field.name.toUpperCase() && void 0 !== this.lkp[e3.right.value.toString()])
                return " (" + i2 + " " + e3.operator + " " + this.lkp[e3.right.value.toString()].toString() + ") ";
            } else if ("column-reference" === e3.right.type && "string" === e3.left.type && e3.right.column.toUpperCase() === this.field.name.toUpperCase())
              return " (" + this.lkp[e3.right.value.toString()].toString() + " " + e3.operator + " " + i2 + ") ";
            return " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, _b.BADNESS, l3) + " " + e3.operator + " " + this.evaluateNodeToWhereClause(e3.right, t6, a6, _b.BADNESS, l3) + ") ";
          case "<":
          case ">":
          case ">=":
          case "<=":
          case "*":
          case "-":
          case "+":
          case "/":
          case "||":
            return " (" + this.evaluateNodeToWhereClause(e3.left, t6, a6, _b.BADNESS, l3) + " " + e3.operator + " " + this.evaluateNodeToWhereClause(e3.right, t6, a6, _b.BADNESS, l3) + ") ";
        }
      case "null":
        return "null";
      case "boolean":
        return true === e3.value ? "1" : "0";
      case "string":
        return "'" + e3.value.toString().replaceAll("'", "''") + "'";
      case "timestamp":
        return `timestamp '${e3.value}'`;
      case "date":
        return `date '${e3.value}'`;
      case "time":
        return `time '${e3.value}'`;
      case "number":
        return e3.value.toString();
      case "current-time":
        return L("date" === e3.mode, t6);
      case "column-reference":
        return a6 && a6.toLowerCase() === e3.column.toLowerCase() ? "(" + i2 + ")" : e3.column;
      case "data-type":
        return e3.value;
      case "function": {
        const r3 = this.evaluateNodeToWhereClause(e3.args, t6, a6, _b.BADNESS, l3);
        return y3(e3.name, r3, t6);
      }
    }
    throw new n2(t2.UnsupportedSyntax, { node: e3.type });
  }
  extractValue(e3) {
    return this.codefield instanceof x ? this.reverseLkp[x.convertValueToStorageFormat(this.codefield.calculateValueCompiled(e3))] : this.reverseLkp[e3.attributes[this.codefield]];
  }
};
b2.BADNESS = "_!!!_BAD_LKP_!!!!";
var B = class extends D2 {
  constructor(e3, t6) {
    super(e3), this._sql = t6;
  }
  rewriteSql(e3, t6) {
    return { rewritten: true, where: m2(e3, this.field.name, f3(this._sql, l.Standardised), t6.getFieldsIndex()) };
  }
  extractValue(e3) {
    return x.convertValueToStorageFormat(this._sql.calculateValueCompiled(e3), this.field.type);
  }
};
var L2 = class extends x3 {
  static findField(e3, t6) {
    for (const r3 of e3)
      if (r3.name.toLowerCase() === t6.toString().toLowerCase())
        return r3;
    return null;
  }
  constructor(e3) {
    super(e3), this._calcFunc = null, this.declaredClass = "esri.arcade.featureset.actions.Adapted", this.adaptedFields = [], this._extraFilter = null, this._extraFilter = e3.extraFilter, this._parent = e3.parentfeatureset, this._maxProcessing = 30, this.adaptedFields = e3.adaptedFields;
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types) : (this.spatialReference = new f({ wkid: 4326 }), this.objectIdField = "", this.globalIdField = "", this.geometryType = N.point, this.typeIdField = "", this.types = null), this.fields = [];
    for (const e3 of this.adaptedFields)
      e3.postInitialization(this, this._parent), this.fields.push(e3.field);
  }
  async _getSet(e3) {
    var _a;
    if (null === this._wset) {
      await this._ensureLoaded();
      let t6 = null;
      return t6 = this._extraFilter ? await this._getFilteredSet("", null, null, null, e3) : await ((_a = this._parent) == null ? void 0 : _a._getSet(e3)), this._checkCancelled(e3), n(t6), this._wset = new t4(t6._candidates.slice(0), t6._known.slice(0), t6._ordered, this._clonePageDefinition(t6.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e3) {
    return this._parent._isInFeatureSet(e3);
  }
  async _getFeatures(r3, s7, a6, i2) {
    var _a, _b;
    const l3 = [];
    -1 !== s7 && void 0 === this._featureCache[s7] && l3.push(s7);
    const o = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(r3, o))
      return await this._expandPagedSet(r3, o, 0, 0, i2), this._getFeatures(r3, s7, a6, i2);
    let h2 = 0;
    for (let e3 = r3._lastFetchedIndex; e3 < r3._known.length && (h2++, h2 <= a6 && (r3._lastFetchedIndex += 1), !(void 0 === this._featureCache[r3._known[e3]] && (r3._known[e3] !== s7 && l3.push(r3._known[e3]), l3.length >= o))); e3++)
      ;
    if (0 === l3.length)
      return "success";
    r3 = new t4([], l3, r3._ordered, null);
    const u2 = Math.min(l3.length, a6);
    await ((_a = this._parent) == null ? void 0 : _a._getFeatures(r3, -1, u2, i2)), this._checkCancelled(i2);
    const c5 = [];
    for (let e3 = 0; e3 < u2; e3++) {
      const t6 = (_b = this._parent) == null ? void 0 : _b._featureFromCache(l3[e3]);
      void 0 !== t6 && c5.push({ geometry: t6.geometry, attributes: t6.attributes, id: l3[e3] });
    }
    for (const n9 of c5) {
      const r4 = [];
      for (const e3 of this.adaptedFields)
        r4[e3.field.name] = e3.extractValue(n9);
      this._featureCache[n9.id] = new c2({ attributes: r4, geometry: c(n9.geometry) });
    }
    return "success";
  }
  async _fetchAndRefineFeatures() {
    throw new s2(r.NeverReach);
  }
  async _getFilteredSet(e3, t6, r3, s7, a6) {
    let i2 = false;
    const l3 = this._reformulateWithoutAdaptions(r3);
    i2 = l3.cannot, r3 = l3.where;
    let o = false;
    if (null !== s7) {
      o = true;
      const e4 = [];
      for (const t7 of this.adaptedFields)
        if (!(t7 instanceof I2) && true === s7.scanForField(t7.field.name)) {
          if (!(t7 instanceof k)) {
            s7 = null, o = false;
            break;
          }
          e4.push({ field: t7.field.name, newfield: t7.originalField.name });
        }
      s7 && e4.length > 0 && (s7 = s7.replaceFields(e4));
    }
    null !== r3 ? null !== this._extraFilter && (r3 = g2(this._extraFilter, r3)) : r3 = this._extraFilter, await this._ensureLoaded();
    const h2 = await this._parent._getFilteredSet(e3, t6, r3, s7, a6);
    let u2;
    return this._checkCancelled(a6), u2 = true === i2 ? new t4(h2._candidates.slice(0).concat(h2._known.slice(0)), [], true === o && h2._ordered, this._clonePageDefinition(h2.pagesDefinition)) : new t4(h2._candidates.slice(0), h2._known.slice(0), true === o && h2._ordered, this._clonePageDefinition(h2.pagesDefinition)), u2;
  }
  _reformulateWithoutAdaptions(e3) {
    const t6 = { cannot: false, where: e3 };
    if (null !== e3) {
      for (const r3 of this.adaptedFields)
        if (true === v(e3, r3.field.name)) {
          const s7 = r3.rewriteSql(e3, this);
          if (true !== s7.rewritten) {
            t6.cannot = true, t6.where = null;
            break;
          }
          t6.where = s7.where;
        }
    }
    return t6;
  }
  async _stat(e3, t6, r3, s7, a6, i2, l3) {
    let n9 = false, o = this._reformulateWithoutAdaptions(t6);
    if (n9 = o.cannot, t6 = o.where, o = this._reformulateWithoutAdaptions(a6), n9 = n9 || o.cannot, null !== (a6 = o.where) ? null !== this._extraFilter && (a6 = g2(this._extraFilter, a6)) : a6 = this._extraFilter, true === n9)
      return null === a6 && "" === r3 && null === s7 ? this._manualStat(e3, t6, i2, l3) : { calculated: false };
    const h2 = await this._parent._stat(e3, t6, r3, s7, a6, i2, l3);
    return false === h2.calculated ? null === a6 && "" === r3 && null === s7 ? this._manualStat(e3, t6, i2, l3) : { calculated: false } : h2;
  }
  async _canDoAggregates(e3, t6, r3, s7, a6) {
    if (null === this._parent)
      return false;
    for (let n9 = 0; n9 < e3.length; n9++)
      for (const t7 of this.adaptedFields)
        if (e3[n9].toLowerCase() === t7.field.name.toLowerCase() && !(t7 instanceof I2))
          return false;
    const i2 = [];
    for (let n9 = 0; n9 < t6.length; n9++) {
      const e4 = t6[n9];
      if (null !== e4.workingexpr) {
        const t7 = this._reformulateWithoutAdaptions(e4.workingexpr);
        if (t7.cannot)
          return false;
        const r4 = e4.clone();
        r4.workingexpr = t7.where, i2.push(r4);
      } else
        i2.push(e4);
    }
    const l3 = this._reformulateWithoutAdaptions(a6);
    return !l3.cannot && (null !== (a6 = l3.where) ? null !== this._extraFilter && (a6 = g2(this._extraFilter, a6)) : a6 = this._extraFilter, this._parent._canDoAggregates(e3, i2, r3, s7, a6));
  }
  async _getAggregatePagesDataSourceDefinition(e3, t6, r3, s7, l3, n9, o) {
    if (null === this._parent)
      throw new s2(r.NeverReach);
    const h2 = [];
    for (let c5 = 0; c5 < t6.length; c5++) {
      const e4 = t6[c5];
      if (null !== e4.workingexpr) {
        const t7 = this._reformulateWithoutAdaptions(e4.workingexpr);
        if (t7.cannot)
          throw new s2(r.NeverReach);
        const r4 = e4.clone();
        r4.workingexpr = t7.where, h2.push(r4);
      } else
        h2.push(e4);
    }
    const u2 = this._reformulateWithoutAdaptions(l3);
    if (u2.cannot)
      throw new s2(r.NeverReach);
    return null !== (l3 = u2.where) ? null !== this._extraFilter && (l3 = g2(this._extraFilter, l3)) : l3 = this._extraFilter, this._parent._getAggregatePagesDataSourceDefinition(e3, h2, r3, s7, l3, n9, o);
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/OrderbyClause.js
function t5(t6, e3) {
  return t6 === e3 ? 0 : null === t6 ? -1 : null === e3 ? 1 : t6 < e3 ? -1 : 1;
}
var e2 = class _e {
  constructor(t6) {
    const e3 = t6.split(",");
    this._fields = [], this._directions = [];
    for (let s7 = 0; s7 < e3.length; s7++) {
      const t7 = e3[s7].match(/\S+/g);
      this._fields.push(t7[0]), 2 === t7.length ? "asc" === t7[1].toLowerCase() ? this._directions.push(1) : this._directions.push(0) : this._directions.push(1);
    }
  }
  constructClause() {
    let t6 = "";
    for (let e3 = 0; e3 < this._fields.length; e3++)
      0 !== e3 && (t6 += ","), t6 += this._fields[e3], 1 === this._directions[e3] ? t6 += " ASC" : t6 += " DESC";
    return t6;
  }
  order(e3) {
    e3.sort((e4, s7) => {
      for (let i2 = 0; i2 < this._fields.length; i2++) {
        const r3 = this.featureValue(e4.feature, this._fields[i2], i2), l3 = this.featureValue(s7.feature, this._fields[i2], i2);
        let o = 0;
        if (o = 1 === this._directions[i2] ? t5(r3, l3) : -1 * t5(r3, l3), 0 !== o)
          return o;
      }
      return 0;
    });
  }
  scanForField(t6) {
    for (let e3 = 0; e3 < this._fields.length; e3++)
      if (this._fields[e3].toLowerCase().trim() === t6.toLowerCase().trim())
        return true;
    return false;
  }
  replaceFields(t6) {
    let s7 = "";
    for (let e3 = 0; e3 < this._fields.length; e3++) {
      0 !== e3 && (s7 += ",");
      let i2 = this._fields[e3];
      for (const e4 of t6)
        if (i2.toLowerCase() === e4.field.toLowerCase()) {
          i2 = e4.newfield;
          break;
        }
      s7 += i2, 1 === this._directions[e3] ? s7 += " ASC" : s7 += " DESC";
    }
    return new _e(s7);
  }
  featureValue(t6, e3, s7) {
    const i2 = t6.attributes[e3];
    if (void 0 !== i2)
      return i2;
    for (const r3 in t6.attributes)
      if (e3.toLowerCase() === r3.toLowerCase())
        return this._fields[s7] = r3, t6.attributes[r3];
    return null;
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/OrderBy.js
var a3 = class _a extends x3 {
  constructor(e3) {
    super(e3), this._orderbyclause = null, this.declaredClass = "esri.arcade.featureset.actions.OrderBy", this._maxProcessing = 100, this._orderbyclause = e3.orderbyclause, this._parent = e3.parentfeatureset;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t6 = await this._getFilteredSet("", null, null, this._orderbyclause, e3);
      return this._checkCancelled(e3), this._wset = t6, this._wset;
    }
    return this._wset;
  }
  async manualOrderSet(e3, t6) {
    var _a2;
    const r3 = await this.getIdColumnDictionary(e3, [], -1, t6);
    (_a2 = this._orderbyclause) == null ? void 0 : _a2.order(r3);
    const n9 = new t4([], [], true, null);
    for (let s7 = 0; s7 < r3.length; s7++)
      n9._known.push(r3[s7].id);
    return n9;
  }
  async getIdColumnDictionary(t6, r3, n9, s7) {
    if (n9 < t6._known.length - 1) {
      const i2 = this._maxQueryRate();
      if ("GETPAGES" === t6._known[n9 + 1])
        return await Re(this._parent._expandPagedSet(t6, i2, 0, 0, s7)), this.getIdColumnDictionary(t6, r3, n9, s7);
      let a6 = n9 + 1;
      const o = [];
      for (; a6 < t6._known.length && "GETPAGES" !== t6._known[a6]; )
        o.push(t6._known[a6]), a6++;
      n9 += o.length;
      const u2 = await Re(this._parent._getFeatureBatch(o, s7));
      this._checkCancelled(s7);
      for (const e3 of u2)
        r3.push({ id: e3.attributes[this.objectIdField], feature: e3 });
      return this.getIdColumnDictionary(t6, r3, n9, s7);
    }
    return t6._candidates.length > 0 ? (await Re(this._refineSetBlock(t6, this._maxProcessingRate(), s7)), this._checkCancelled(s7), this.getIdColumnDictionary(t6, r3, n9, s7)) : r3;
  }
  _isInFeatureSet(e3) {
    return this._parent._isInFeatureSet(e3);
  }
  _getFeatures(e3, t6, r3, n9) {
    return this._parent._getFeatures(e3, t6, r3, n9);
  }
  _featureFromCache(e3) {
    if (void 0 === this._featureCache[e3]) {
      const t6 = this._parent._featureFromCache(e3);
      if (void 0 === t6)
        return;
      return null === t6 ? null : (this._featureCache[e3] = t6, t6);
    }
    return this._featureCache[e3];
  }
  async _fetchAndRefineFeatures() {
    throw new s2(r.NeverReach);
  }
  async _getFilteredSet(e3, t6, r3, n9, i2) {
    await this._ensureLoaded();
    const a6 = await this._parent._getFilteredSet(e3, t6, r3, null === n9 ? this._orderbyclause : n9, i2);
    this._checkCancelled(i2);
    const o = new t4(a6._candidates.slice(0), a6._known.slice(0), a6._ordered, this._clonePageDefinition(a6.pagesDefinition));
    let u2 = true;
    if (a6._candidates.length > 0 && (u2 = false), false === o._ordered) {
      let e4 = await this.manualOrderSet(o, i2);
      return false === u2 && (null === t6 && null === r3 || (e4 = new t4(e4._candidates.slice(0).concat(e4._known.slice(0)), [], e4._ordered, this._clonePageDefinition(e4.pagesDefinition)))), e4;
    }
    return o;
  }
  static registerAction() {
    x3._featuresetFunctions.orderBy = function(e3) {
      return "" === e3 ? this : new _a({ parentfeatureset: this, orderbyclause: new e2(e3) });
    };
  }
  getFieldsIndex() {
    return this._parent.getFieldsIndex();
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/StatsField.js
function s6(s7) {
  if ("function" === s7.parseTree.type) {
    if (0 === s7.parseTree.args.value.length)
      return { name: s7.parseTree.name, expr: null };
    if (s7.parseTree.args.value.length > 1)
      throw new n2(t2.MissingStatisticParameters);
    const a6 = x.create(p3(s7.parseTree.args.value[0], l.Standardised, s7.parameters), s7.fieldsIndex, s7.timeZone);
    return { name: s7.parseTree.name, expr: a6 };
  }
  return null;
}
var a4 = class _a {
  constructor() {
    this.field = "", this.tofieldname = "", this.typeofstat = "MIN", this.workingexpr = null;
  }
  clone() {
    const e3 = new _a();
    return e3.field = this.field, e3.tofieldname = this.tofieldname, e3.typeofstat = this.typeofstat, e3.workingexpr = this.workingexpr, e3;
  }
  static parseStatField(r3, n9, o, l3) {
    const p5 = new _a();
    p5.field = r3;
    const f7 = x.create(n9, o, l3), u2 = s6(f7);
    if (null === u2)
      throw new n2(t2.UnsupportedSqlFunction, { function: "" });
    const c5 = u2.name.toUpperCase().trim();
    if ("MIN" === c5) {
      if (p5.typeofstat = "MIN", p5.workingexpr = u2.expr, null === f7)
        throw new n2(t2.InvalidFunctionParameters, { function: "min" });
    } else if ("MAX" === c5) {
      if (p5.typeofstat = "MAX", p5.workingexpr = u2.expr, null === f7)
        throw new n2(t2.InvalidFunctionParameters, { function: "max" });
    } else if ("COUNT" === c5)
      p5.typeofstat = "COUNT", p5.workingexpr = u2.expr;
    else if ("STDEV" === c5) {
      if (p5.typeofstat = "STDDEV", p5.workingexpr = u2.expr, null === f7)
        throw new n2(t2.InvalidFunctionParameters, { function: "stdev" });
    } else if ("SUM" === c5) {
      if (p5.typeofstat = "SUM", p5.workingexpr = u2.expr, null === f7)
        throw new n2(t2.InvalidFunctionParameters, { function: "sum" });
    } else if ("MEAN" === c5) {
      if (p5.typeofstat = "AVG", p5.workingexpr = u2.expr, null === f7)
        throw new n2(t2.InvalidFunctionParameters, { function: c5 });
    } else if ("AVG" === c5) {
      if (p5.typeofstat = "AVG", p5.workingexpr = u2.expr, null === f7)
        throw new n2(t2.InvalidFunctionParameters, { function: "avg" });
    } else {
      if ("VAR" !== c5)
        throw new n2(t2.UnsupportedSqlFunction, { function: c5 });
      if (p5.typeofstat = "VAR", p5.workingexpr = u2.expr, null === f7)
        throw new n2(t2.InvalidFunctionParameters, { function: "var" });
    }
    return p5;
  }
  toStatisticsName() {
    switch (this.typeofstat.toUpperCase()) {
      case "MIN":
        return "min";
      case "MAX":
        return "max";
      case "SUM":
        return "sum";
      case "COUNT":
      default:
        return "count";
      case "VAR":
        return "var";
      case "STDDEV":
        return "stddev";
      case "AVG":
        return "avg";
    }
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/GroupBy.js
function G(e3) {
  if (!e3)
    return "COUNT";
  switch (e3.toLowerCase()) {
    case "max":
      return "MAX";
    case "var":
    case "variance":
      return "VAR";
    case "avg":
    case "average":
    case "mean":
      return "AVG";
    case "min":
      return "MIN";
    case "sum":
      return "SUM";
    case "stdev":
    case "stddev":
      return "STDDEV";
    case "count":
      return "COUNT";
  }
  return "COUNT";
}
var O = class _O extends x3 {
  constructor(e3) {
    super(e3), this._decodedStatsfield = [], this._decodedGroupbyfield = [], this._candosimplegroupby = true, this.phsyicalgroupbyfields = [], this.objectIdField = "ROW__ID", this._internalObjectIdField = "ROW__ID", this._adaptedFields = [], this.declaredClass = "esri.arcade.featureset.actions.Aggregate", this._uniqueIds = 1, this._maxQuery = 10, this._maxProcessing = 10, this._parent = e3.parentfeatureset, this._config = e3;
  }
  isTable() {
    return true;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      const t6 = await this._getFilteredSet("", null, null, null, e3);
      return this._wset = t6, this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet() {
    return s3.InFeatureSet;
  }
  _nextUniqueName(e3) {
    for (; 1 === e3["T" + this._uniqueIds.toString()]; )
      this._uniqueIds++;
    const t6 = "T" + this._uniqueIds.toString();
    return e3[t6] = 1, t6;
  }
  _convertToEsriFieldType(e3) {
    return e3;
  }
  _initialiseFeatureSet() {
    const e3 = {};
    let t6 = false, n9 = 1;
    const r3 = this._parent ? this._parent.getFieldsIndex() : new Z([]);
    for (this.objectIdField = "ROW__ID", this.globalIdField = ""; false === t6; ) {
      let e4 = false;
      for (let t7 = 0; t7 < this._config.groupbyfields.length; t7++)
        if (this._config.groupbyfields[t7].name.toLowerCase() === this.objectIdField.toLowerCase()) {
          e4 = true;
          break;
        }
      if (false === e4) {
        for (let t7 = 0; t7 < this._config.statsfields.length; t7++)
          if (this._config.statsfields[t7].name.toLowerCase() === this.objectIdField.toLowerCase()) {
            e4 = true;
            break;
          }
      }
      false === e4 ? t6 = true : (this.objectIdField = "ROW__ID" + n9.toString(), n9++);
    }
    for (const i2 of this._config.statsfields) {
      const e4 = new a4();
      e4.field = i2.name, e4.tofieldname = i2.name, e4.workingexpr = i2.expression instanceof x ? i2.expression : x.create(i2.expression, r3, this.dateFieldsTimeZoneDefaultUTC), e4.typeofstat = G(i2.statistic), this._decodedStatsfield.push(e4);
    }
    this._decodedGroupbyfield = [];
    for (const i2 of this._config.groupbyfields) {
      const e4 = { name: i2.name, singlefield: null, tofieldname: i2.name, expression: i2.expression instanceof x ? i2.expression : x.create(i2.expression, r3, this.dateFieldsTimeZoneDefaultUTC), sqlType: null };
      this._decodedGroupbyfield.push(e4);
    }
    if (null !== this._parent) {
      this.geometryType = this._parent.geometryType, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = "";
      for (const t7 of this._parent.fields)
        e3[t7.name.toUpperCase()] = 1;
      this.types = null;
    } else
      this.geometryType = N.point, this.typeIdField = "", this.types = null, this.spatialReference = new f({ wkid: 4326 });
    this.fields = [];
    const a6 = new a4();
    a6.field = this._nextUniqueName(e3), a6.tofieldname = this.objectIdField, a6.workingexpr = x.create(this._parent.objectIdField, this._parent.getFieldsIndex(), this.dateFieldsTimeZoneDefaultUTC), a6.typeofstat = "MIN", this._decodedStatsfield.push(a6);
    for (const s7 of this._decodedGroupbyfield) {
      const t7 = new y();
      if (s7.name = this._nextUniqueName(e3), t7.name = s7.tofieldname, t7.alias = t7.name, D(s7.expression)) {
        const e4 = this._parent.getField(f3(s7.expression, l.Standardised));
        if (!e4)
          throw new s2(r.AggregationFieldNotFound);
        s7.name = e4.name, s7.singlefield = e4.name, this.phsyicalgroupbyfields.push(e4.name), t7.type = e4.type, s7.sqlType = e4.type;
      } else {
        t7.type = this._convertToEsriFieldType(I(s7.expression, this._parent.fields));
        const e4 = new y();
        e4.name = s7.name, e4.alias = e4.name, this.phsyicalgroupbyfields.push(s7.name), this._adaptedFields.push(new B(e4, s7.expression)), this._candosimplegroupby = false, s7.sqlType = t7.type;
      }
      this.fields.push(t7);
    }
    if (this._adaptedFields.length > 0)
      for (const i2 of this._parent.fields)
        this._adaptedFields.push(new I2(i2));
    for (let i2 = 0; i2 < this._decodedStatsfield.length; i2++) {
      const t7 = new y();
      let s7 = null;
      const n10 = this._decodedStatsfield[i2];
      n10.field = this._nextUniqueName(e3), n10.tofieldname === this.objectIdField && (this._internalObjectIdField = n10.field), t7.name = n10.tofieldname, t7.alias = t7.name;
      const r4 = null !== n10.workingexpr && D(n10.workingexpr) ? f3(n10.workingexpr, l.Standardised) : "";
      switch (this._decodedStatsfield[i2].typeofstat) {
        case "SUM":
          if ("" !== r4) {
            if (s7 = this._parent.getField(r4), !s7)
              throw new s2(r.AggregationFieldNotFound);
            t7.type = s7.type;
          } else
            t7.type = "double";
          break;
        case "MIN":
        case "MAX":
          if ("" !== r4) {
            if (s7 = this._parent.getField(r4), !s7)
              throw new s2(r.AggregationFieldNotFound);
            t7.type = s7.type;
          } else
            t7.type = "double";
          break;
        case "COUNT":
          t7.type = "integer";
          break;
        case "STDDEV":
        case "VAR":
        case "AVG":
          if ("" !== r4 && (s7 = this._parent.getField(r4), !s7))
            throw new s2(r.AggregationFieldNotFound);
          t7.type = "double";
      }
      this.fields.push(t7);
    }
  }
  async _canDoAggregates() {
    return false;
  }
  async _getFeatures(e3, t6, i2, s7) {
    -1 !== t6 && this._featureCache[t6];
    const n9 = this._maxQuery;
    return true === this._checkIfNeedToExpandKnownPage(e3, n9) ? (await this._expandPagedSet(e3, n9, 0, 0, s7), this._getFeatures(e3, t6, i2, s7)) : "success";
  }
  async _getFilteredSet(e3, t6, i2, s7, o) {
    if ("" !== e3)
      return new t4([], [], true, null);
    let l3 = null;
    const d7 = { ordered: false, nowhereclause: false };
    if (await this._ensureLoaded(), null !== i2) {
      for (let n9 = 0; n9 < this._decodedStatsfield.length; n9++)
        if (true === v(i2, this._decodedStatsfield[n9].tofieldname)) {
          d7.nowhereclause = true, i2 = null;
          break;
        }
    }
    if (null !== s7) {
      d7.ordered = true;
      for (let e4 = 0; e4 < this._decodedStatsfield.length; e4++)
        if (true === s7.scanForField(this._decodedStatsfield[e4].tofieldname)) {
          s7 = null, d7.ordered = false;
          break;
        }
      if (null !== s7) {
        for (const e4 of this._decodedGroupbyfield)
          if (null === e4.singlefield && true === s7.scanForField(e4.tofieldname)) {
            s7 = null, d7.ordered = false;
            break;
          }
      }
    }
    if (false !== this._candosimplegroupby && await this._parent._canDoAggregates(this.phsyicalgroupbyfields, this._decodedStatsfield, "", null, null)) {
      let e4 = null;
      i2 && (e4 = this._reformulateWhereClauseWithoutGroupByFields(i2));
      let t7 = null;
      s7 && (t7 = this._reformulateOrderClauseWithoutGroupByFields(s7));
      const n9 = await this._parent._getAggregatePagesDataSourceDefinition(this.phsyicalgroupbyfields, this._decodedStatsfield, "", null, e4, t7, this._internalObjectIdField);
      return this._checkCancelled(o), l3 = true === d7.nowhereclause ? new t4(n9._candidates.slice(0).concat(n9._known.slice(0)), [], true === d7.ordered && n9._ordered, this._clonePageDefinition(n9.pagesDefinition)) : new t4(n9._candidates.slice(0), n9._known.slice(0), true === d7.ordered && n9._ordered, this._clonePageDefinition(n9.pagesDefinition)), l3;
    }
    let c5 = this._parent;
    if (this._adaptedFields.length > 0 && (c5 = new L2({ parentfeatureset: this._parent, adaptedFields: this._adaptedFields, extraFilter: null })), true === d7.nowhereclause)
      l3 = new t4(["GETPAGES"], [], false, { aggregatefeaturesetpagedefinition: true, resultOffset: 0, resultRecordCount: this._maxQuery, internal: { fullyResolved: false, workingItem: null, type: "manual", iterator: null, set: [], subfeatureset: new a3({ parentfeatureset: c5, orderbyclause: new e2(this.phsyicalgroupbyfields.join(",") + "," + this._parent.objectIdField + " ASC") }) } });
    else {
      let e4 = c5;
      if (null !== i2) {
        let t7 = null;
        i2 && (t7 = this._reformulateWhereClauseWithoutGroupByFields(i2)), e4 = new c3({ parentfeatureset: e4, whereclause: t7 });
      }
      l3 = new t4(["GETPAGES"], [], false, { aggregatefeaturesetpagedefinition: true, resultOffset: 0, resultRecordCount: this._maxQuery, internal: { fullyResolved: false, workingItem: null, type: "manual", iterator: null, set: [], subfeatureset: new a3({ parentfeatureset: e4, orderbyclause: new e2(this.phsyicalgroupbyfields.join(",") + "," + this._parent.objectIdField + " ASC") }) } });
    }
    return l3;
  }
  _reformulateWhereClauseWithoutStatsFields(e3) {
    for (const t6 of this._decodedStatsfield)
      e3 = m2(e3, t6.tofieldname, f3(t6.workingexpr, l.Standardised), this._parent.getFieldsIndex());
    return e3;
  }
  _reformulateWhereClauseWithoutGroupByFields(e3) {
    for (const t6 of this._decodedGroupbyfield)
      t6.tofieldname !== t6.name && (e3 = m2(e3, t6.tofieldname, f3(t6.expression, l.Standardised), this._parent.getFieldsIndex()));
    return e3;
  }
  _reformulateOrderClauseWithoutGroupByFields(e3) {
    const t6 = [];
    for (const i2 of this._decodedGroupbyfield)
      i2.tofieldname !== i2.name && t6.push({ field: i2.tofieldname, newfield: i2.name });
    return t6.length > 0 ? e3.replaceFields(t6) : e3;
  }
  _clonePageDefinition(e3) {
    return null === e3 ? null : true === e3.aggregatefeaturesetpagedefinition ? { aggregatefeaturesetpagedefinition: true, resultRecordCount: e3.resultRecordCount, resultOffset: e3.resultOffset, internal: e3.internal } : this._parent._clonePageDefinition(e3);
  }
  async _refineSetBlock(e3, t6, i2) {
    if (true === this._checkIfNeedToExpandCandidatePage(e3, this._maxQuery))
      return await this._expandPagedSet(e3, this._maxQuery, 0, 0, i2), this._refineSetBlock(e3, t6, i2);
    this._checkCancelled(i2);
    const s7 = e3._candidates.length;
    this._refineKnowns(e3, t6);
    e3._candidates.length;
    return e3._candidates.length, e3;
  }
  _expandPagedSet(e3, t6, i2, s7, n9) {
    return this._expandPagedSetFeatureSet(e3, t6, i2, s7, n9);
  }
  async _getPhysicalPage(t6, i2, s7) {
    if (true === t6.pagesDefinition.aggregatefeaturesetpagedefinition)
      return this._sequentialGetPhysicalItem(t6, t6.pagesDefinition.resultRecordCount, s7, []);
    const n9 = await this._getAgregagtePhysicalPage(t6, i2, s7);
    for (const r3 of n9) {
      const t7 = { geometry: r3.geometry, attributes: {} }, i3 = {};
      for (const e3 in r3.attributes)
        i3[e3.toLowerCase()] = r3.attributes[e3];
      for (const e3 of this._decodedGroupbyfield)
        t7.attributes[e3.tofieldname] = i3[e3.name.toLowerCase()];
      for (const e3 of this._decodedStatsfield)
        t7.attributes[e3.tofieldname] = i3[e3.field.toLowerCase()];
      this._featureCache[t7.attributes[this.objectIdField]] = new c2(t7);
    }
    return n9.length;
  }
  _sequentialGetPhysicalItem(e3, t6, i2, s7) {
    return new Promise((n9, r3) => {
      null === e3.pagesDefinition.internal.iterator && (e3.pagesDefinition.internal.iterator = e3.pagesDefinition.internal.subfeatureset.iterator(i2)), true === e3.pagesDefinition.internal.fullyResolved || 0 === t6 ? n9(s7.length) : this._nextAggregateItem(e3, t6, i2, s7, (r4) => {
        null === r4 ? n9(s7.length) : (t6 -= 1, n9(this._sequentialGetPhysicalItem(e3, t6, i2, s7)));
      }, r3);
    });
  }
  _nextAggregateItem(e3, i2, s7, n9, r3, a6) {
    try {
      Re(e3.pagesDefinition.internal.iterator.next()).then((t6) => {
        if (null === t6)
          if (null !== e3.pagesDefinition.internal.workingItem) {
            const t7 = this._calculateAndAppendAggregateItem(e3.pagesDefinition.internal.workingItem);
            n9.push(t7), e3.pagesDefinition.internal.workingItem = null, e3.pagesDefinition.internal.set.push(t7.attributes[this.objectIdField]), e3.pagesDefinition.internal.fullyResolved = true, r3(null);
          } else
            e3.pagesDefinition.internal.fullyResolved = true, r3(null);
        else {
          const o = this._generateAggregateHash(t6);
          if (null === e3.pagesDefinition.internal.workingItem)
            e3.pagesDefinition.internal.workingItem = { features: [t6], id: o };
          else {
            if (o !== e3.pagesDefinition.internal.workingItem.id) {
              const s8 = this._calculateAndAppendAggregateItem(e3.pagesDefinition.internal.workingItem);
              return n9.push(s8), e3.pagesDefinition.internal.workingItem = null, e3.pagesDefinition.internal.set.push(s8.attributes[this.objectIdField]), i2 -= 1, e3.pagesDefinition.internal.workingItem = { features: [t6], id: o }, void r3(s8);
            }
            e3.pagesDefinition.internal.workingItem.features.push(t6);
          }
          this._nextAggregateItem(e3, i2, s7, n9, r3, a6);
        }
      }, a6);
    } catch (o) {
      a6(o);
    }
  }
  _calculateFieldStat(e3, t6, i2) {
    const s7 = [];
    for (let n9 = 0; n9 < e3.features.length; n9++)
      if (null !== t6.workingexpr) {
        const i3 = t6.workingexpr.calculateValue(e3.features[n9]);
        null !== i3 && (i3 instanceof n3 || i3 instanceof n4 ? s7.push(i3.toNumber()) : i3 instanceof r2 ? s7.push(i3.toMilliseconds()) : s7.push(i3));
      } else
        s7.push(null);
    switch (t6.typeofstat) {
      case "MIN":
        i2.attributes[t6.tofieldname] = d4("min", s7, -1);
        break;
      case "MAX":
        i2.attributes[t6.tofieldname] = d4("max", s7, -1);
        break;
      case "SUM":
        i2.attributes[t6.tofieldname] = d4("sum", s7, -1);
        break;
      case "COUNT":
        i2.attributes[t6.tofieldname] = s7.length;
        break;
      case "VAR":
        i2.attributes[t6.tofieldname] = d4("var", s7, -1);
        break;
      case "STDDEV":
        i2.attributes[t6.tofieldname] = d4("stddev", s7, -1);
        break;
      case "AVG":
        i2.attributes[t6.tofieldname] = d4("avg", s7, -1);
    }
    return true;
  }
  _calculateAndAppendAggregateItem(t6) {
    const i2 = { attributes: {}, geometry: null };
    for (const e3 of this._decodedGroupbyfield) {
      const s8 = e3.singlefield ? t6.features[0].attributes[e3.singlefield] : x.convertValueToStorageFormat(e3.expression.calculateValue(t6.features[0]), e3.sqlType);
      i2.attributes[e3.tofieldname] = s8;
    }
    for (const e3 of this._decodedStatsfield)
      this._calculateFieldStat(t6, e3, i2);
    const s7 = [];
    for (let e3 = 0; e3 < this._decodedStatsfield.length; e3++)
      s7.push(this._calculateFieldStat(t6, this._decodedStatsfield[e3], i2));
    return this._featureCache[i2.attributes[this.objectIdField]] = new c2({ attributes: i2.attributes, geometry: i2.geometry }), i2;
  }
  _generateAggregateHash(e3) {
    let t6 = "";
    for (const i2 of this._decodedGroupbyfield) {
      const s7 = i2.singlefield ? e3.attributes[i2.singlefield] : i2.expression.calculateValue(e3);
      t6 += null == s7 ? ":" : ":" + s7.toString();
    }
    return x2(t6, n5.String);
  }
  async _stat() {
    return { calculated: false };
  }
  async getFeatureByObjectId() {
    return null;
  }
  static registerAction() {
    x3._featuresetFunctions.groupby = function(e3, t6) {
      return new _O({ parentfeatureset: this, groupbyfields: e3, statsfields: t6 });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/Top.js
var a5 = class _a extends x3 {
  constructor(t6) {
    super(t6), this._topnum = 0, this.declaredClass = "esri.arcade.featureset.actions.Top", this._countedin = 0, this._maxProcessing = 100, this._topnum = t6.topnum, this._parent = t6.parentfeatureset;
  }
  async _getSet(t6) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const e3 = await this._parent._getSet(t6);
      return this._wset = new t4(e3._candidates.slice(0), e3._known.slice(0), false, this._clonePageDefinition(e3.pagesDefinition)), this._setKnownLength(this._wset) > this._topnum && (this._wset._known = this._wset._known.slice(0, this._topnum)), this._setKnownLength(this._wset) >= this._topnum && (this._wset._candidates = []), this._wset;
    }
    return this._wset;
  }
  _setKnownLength(t6) {
    return t6._known.length > 0 && "GETPAGES" === t6._known[t6._known.length - 1] ? t6._known.length - 1 : t6._known.length;
  }
  _isInFeatureSet(t6) {
    const e3 = this._parent._isInFeatureSet(t6);
    if (e3 === s3.NotInFeatureSet)
      return e3;
    const n9 = this._idstates[t6];
    return n9 === s3.InFeatureSet || n9 === s3.NotInFeatureSet ? n9 : e3 === s3.InFeatureSet && void 0 === n9 ? this._countedin < this._topnum ? (this._idstates[t6] = s3.InFeatureSet, this._countedin++, s3.InFeatureSet) : (this._idstates[t6] = s3.NotInFeatureSet, s3.NotInFeatureSet) : s3.Unknown;
  }
  async _expandPagedSet(n9, s7, i2, a6, o) {
    if (null === this._parent)
      throw new s2(r.NotImplemented);
    if (s7 > this._topnum && (s7 = this._topnum), this._countedin >= this._topnum && n9.pagesDefinition.internal.set.length <= n9.pagesDefinition.resultOffset) {
      let t6 = n9._known.length;
      return t6 > 0 && "GETPAGES" === n9._known[t6 - 1] && (n9._known.length = t6 - 1), t6 = n9._candidates.length, t6 > 0 && "GETPAGES" === n9._candidates[t6 - 1] && (n9._candidates.length = t6 - 1), "success";
    }
    const r3 = await this._parent._expandPagedSet(n9, s7, i2, a6, o);
    return this._setKnownLength(n9) > this._topnum && (n9._known.length = this._topnum), this._setKnownLength(n9) >= this._topnum && (n9._candidates.length = 0), r3;
  }
  async _getFeatures(t6, e3, n9, i2) {
    const a6 = [], o = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(t6, o))
      return await this._expandPagedSet(t6, o, 0, 0, i2), this._getFeatures(t6, e3, n9, i2);
    -1 !== e3 && void 0 === this._featureCache[e3] && a6.push(e3);
    let r3 = 0;
    for (let s7 = t6._lastFetchedIndex; s7 < t6._known.length && (r3++, r3 <= n9 && (t6._lastFetchedIndex += 1), !(void 0 === this._featureCache[t6._known[s7]] && (t6._known[s7] !== e3 && a6.push(t6._known[s7]), a6.length > o))); s7++)
      ;
    if (0 === a6.length)
      return "success";
    const _ = new t4([], a6, false, null), h2 = Math.min(a6.length, n9);
    await this._parent._getFeatures(_, -1, h2, i2);
    for (let s7 = 0; s7 < h2; s7++) {
      const t7 = this._parent._featureFromCache(a6[s7]);
      void 0 !== t7 && (this._featureCache[a6[s7]] = t7);
    }
    return "success";
  }
  async _getFilteredSet(t6, e3, n9, i2, a6) {
    await this._ensureLoaded();
    const o = await this._getSet(a6);
    return new t4(o._candidates.slice(0).concat(o._known.slice(0)), [], false, this._clonePageDefinition(o.pagesDefinition));
  }
  _refineKnowns(t6, e3) {
    let n9 = 0, s7 = null;
    const a6 = [];
    for (let o = 0; o < t6._candidates.length; o++) {
      const r3 = this._isInFeatureSet(t6._candidates[o]);
      if (r3 === s3.InFeatureSet) {
        if (t6._known.push(t6._candidates[o]), n9 += 1, null === s7 ? s7 = { start: o, end: o } : s7.end === o - 1 ? s7.end = o : (a6.push(s7), s7 = { start: o, end: o }), t6._known.length >= this._topnum)
          break;
      } else if (r3 === s3.NotInFeatureSet)
        null === s7 ? s7 = { start: o, end: o } : s7.end === o - 1 ? s7.end = o : (a6.push(s7), s7 = { start: o, end: o }), n9 += 1;
      else if (r3 === s3.Unknown)
        break;
      if (n9 >= e3)
        break;
    }
    null !== s7 && a6.push(s7);
    for (let i2 = a6.length - 1; i2 >= 0; i2--)
      t6._candidates.splice(a6[i2].start, a6[i2].end - a6[i2].start + 1);
    this._setKnownLength(t6) > this._topnum && (t6._known = t6._known.slice(0, this._topnum)), this._setKnownLength(t6) >= this._topnum && (t6._candidates = []);
  }
  async _stat() {
    return { calculated: false };
  }
  async _canDoAggregates() {
    return false;
  }
  static registerAction() {
    x3._featuresetFunctions.top = function(t6) {
      return new _a({ parentfeatureset: this, topnum: t6 });
    };
  }
  getFieldsIndex() {
    return this._parent.getFieldsIndex();
  }
};

// node_modules/@arcgis/core/rest/query/executeQuery.js
async function f5(t6, o, r3, e3) {
  return m3(o, await c4(t6, o, r3, e3), r3, e3);
}
async function c4(t6, o, r3, e3) {
  var _a;
  const n9 = { ...e3 }, i2 = p4(o, r3), u2 = null != ((_a = o.outStatistics) == null ? void 0 : _a[0]), f7 = has("featurelayer-pbf-statistics"), c5 = !u2 || f7;
  let m4;
  if ("pbf" === (r3 == null ? void 0 : r3.format) && c5)
    try {
      m4 = await n8(t6, i2, n9);
    } catch (d7) {
      if ("query:parsing-pbf" !== d7.name)
        throw d7;
      r3.format = "json";
    }
  return "json" !== (r3 == null ? void 0 : r3.format) && c5 || (m4 = await a(t6, i2, n9)), l2(r3 == null ? void 0 : r3.fieldsIndex, m4.fields), m4;
}
function l2(t6, o) {
  if (null != t6 && null != o)
    for (const r3 of o) {
      const o2 = t6.get(r3.name);
      o2 && Object.assign(r3, o2.toJSON());
    }
}
async function m3(t6, r3, e3, n9) {
  var _a;
  const s7 = e3 == null ? void 0 : e3.infoFor3D;
  if (!d5(t6, s7) || null == s7 || !r3.assetMaps || !((_a = r3.features) == null ? void 0 : _a.length))
    return d2.fromJSON(r3);
  const { meshFeatureSetFromJSON: a6 } = await h(import("./meshFeatureSet-YL5BDCNS.js"), n9);
  return a6(t6, s7, r3);
}
function p4(o, s7) {
  let a6 = b.from(o);
  a6.sourceSpatialReference = a6.sourceSpatialReference ?? (s7 == null ? void 0 : s7.sourceSpatialReference) ?? null, ((s7 == null ? void 0 : s7.gdbVersion) || (s7 == null ? void 0 : s7.dynamicDataSource)) && (a6 = a6 === o ? a6.clone() : a6, a6.gdbVersion = o.gdbVersion || s7.gdbVersion, a6.dynamicDataSource = o.dynamicDataSource ? K.from(o.dynamicDataSource) : s7.dynamicDataSource);
  const i2 = s7 == null ? void 0 : s7.infoFor3D;
  if (null != i2 && d5(o, i2)) {
    a6 = a6 === o ? a6.clone() : a6, a6.formatOf3DObjects = null;
    const { supportedFormats: n9, queryFormats: s8 } = i2, u2 = u("model/gltf-binary", n9) ?? i("glb", n9), f7 = u("model/gltf+json", n9) ?? i("gtlf", n9);
    for (const t6 of s8) {
      if (t6 === u2) {
        a6.formatOf3DObjects = t6;
        break;
      }
      t6 !== f7 || a6.formatOf3DObjects || (a6.formatOf3DObjects = t6);
    }
    if (!a6.formatOf3DObjects)
      throw new s("query:unsupported-3d-query-formats", "Could not find any supported 3D object query format. Only supported formats are 3D_glb and 3D_gltf");
    if (null == a6.outFields || !a6.outFields.includes("*")) {
      a6 = a6 === o ? a6.clone() : a6, null == a6.outFields && (a6.outFields = []);
      const { originX: t6, originY: r3, originZ: e3, translationX: n10, translationY: s9, translationZ: u3, scaleX: f8, scaleY: c5, scaleZ: l3, rotationX: m4, rotationY: p5, rotationZ: d7, rotationDeg: y4 } = i2.transformFieldRoles;
      a6.outFields.push(t6, r3, e3, n10, s9, u3, f8, c5, l3, m4, p5, d7, y4);
    }
  }
  return a6;
}
function d5(t6, o) {
  return null != o && true === t6.returnGeometry && "xyFootprint" !== t6.multipatchOption && !t6.outStatistics;
}

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerDynamic.js
var T4 = class _T extends x3 {
  constructor(e3) {
    super(e3), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerDynamic", this._removeGeometry = false, this._overrideFields = null, this.formulaCredential = null, this._pageJustIds = false, this._requestStandardised = false, this._useDefinitionExpression = true, e3.spatialReference && (this.spatialReference = e3.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e3.layer, this._wset = null, void 0 !== e3.outFields && (this._overrideFields = e3.outFields), void 0 !== e3.includeGeometry && (this._removeGeometry = false === e3.includeGeometry);
  }
  _maxQueryRate() {
    return P;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries(e3) {
    this._pageJustIds = e3;
  }
  get urlQueryPath() {
    return this._layer.parsedUrl.path || "";
  }
  convertQueryToLruCacheKey(e3) {
    const t6 = this.urlQueryPath + "," + M(e3.toJSON());
    return x2(t6, n5.String);
  }
  async loadImpl() {
    return true === this._layer.loaded ? (this._initialiseFeatureSet(), this) : (await this._layer.load(), this._initialiseFeatureSet(), this);
  }
  _initialiseFeatureSet() {
    var _a, _b, _c, _d, _e, _f;
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._layer.geometryType, this.fields = this._layer.fields.slice(0), this.hasZ = true === ((_c = (_b = (_a = this._layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.data) == null ? void 0 : _c.supportsZ), this.hasM = true === ((_f = (_e = (_d = this._layer) == null ? void 0 : _d.capabilities) == null ? void 0 : _e.data) == null ? void 0 : _f.supportsM), null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e3 = [], t6 = [];
        for (const i2 of this.fields)
          if ("oid" === i2.type)
            e3.push(i2), t6.push(i2.name);
          else
            for (const r3 of this._overrideFields)
              if (r3.toLowerCase() === i2.name.toLowerCase()) {
                e3.push(i2), t6.push(i2.name);
                break;
              }
        this.fields = e3, this._overrideFields = t6;
      }
    if (this._layer.source && this._layer.source.sourceJSON) {
      const e3 = this._layer.source.sourceJSON.currentVersion;
      true === this._layer.source.sourceJSON.useStandardizedQueries ? (this._databaseType = l.StandardisedNoInterval, null != e3 && e3 >= 10.61 && (this._databaseType = l.Standardised)) : null != e3 && (e3 >= 10.5 && (this._databaseType = l.StandardisedNoInterval, this._requestStandardised = true), e3 >= 10.61 && (this._databaseType = l.Standardised));
    }
    this.objectIdField = this._layer.objectIdField;
    for (const e3 of this.fields)
      "global-id" === e3.type && (this.globalIdField = e3.name);
    this._layer instanceof ae ? (this.typeIdField = this._layer.subtypeField ?? "", this.types = this._layer.subtypes) : (this.typeIdField = this._layer.typeIdField ?? "", this.types = this._layer.types);
  }
  _isInFeatureSet() {
    return s3.InFeatureSet;
  }
  async _refineSetBlock(e3) {
    return e3;
  }
  _candidateIdTransform(e3) {
    return e3;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t6 = await this._getFilteredSet("", null, null, null, e3);
      return this._wset = t6, t6;
    }
    return this._wset;
  }
  async _runDatabaseProbe(e3) {
    await this._ensureLoaded();
    const t6 = new b();
    this.datesInUnknownTimezone && (t6.timeReferenceUnknownClient = true), t6.where = e3.replace("OBJECTID", this._layer.objectIdField);
    try {
      return await this._layer.queryObjectIds(t6), true;
    } catch (i2) {
      return false;
    }
  }
  _canUsePagination() {
    return !(!this._layer.capabilities || !this._layer.capabilities.query || true !== this._layer.capabilities.query.supportsPagination);
  }
  _cacheableFeatureSetSourceKey() {
    return this._layer.url;
  }
  pbfSupportedForQuery(e3) {
    var _a, _b;
    const t6 = (_b = (_a = this._layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.query;
    return !e3.outStatistics && true === (t6 == null ? void 0 : t6.supportsFormatPBF) && true === (t6 == null ? void 0 : t6.supportsQuantizationEditMode);
  }
  async queryPBF(e3) {
    return e3.quantizationParameters = { mode: "edit" }, (await f5(this._layer.parsedUrl, e3, { format: "pbf" }, {})).unquantize();
  }
  get gdbVersion() {
    return this._layer && this._layer.capabilities && this._layer.capabilities.data && this._layer.capabilities.data.isVersioned ? this._layer.gdbVersion || "SDE.DEFAULT" : "";
  }
  nativeCapabilities() {
    return { title: this._layer.title ?? "", source: this, canQueryRelated: true, capabilities: this._layer.capabilities, databaseType: this._databaseType, requestStandardised: this._requestStandardised };
  }
  executeQuery(e3, t6) {
    e3.returnZ = this.hasZ, e3.returnM = this.hasM;
    const i2 = "execute" === t6 ? s5 : "executeForCount" === t6 ? n7 : s4, r3 = "execute" === t6 && this.pbfSupportedForQuery(e3);
    let s7 = null;
    if (this.recentlyUsedQueries) {
      const t7 = this.convertQueryToLruCacheKey(e3);
      s7 = this.recentlyUsedQueries.getFromCache(t7), null === s7 && (s7 = true !== r3 ? i2(this._layer.parsedUrl.path, e3) : this.queryPBF(e3), this.recentlyUsedQueries.addToCache(t7, s7), s7 = s7.catch((e4) => {
        var _a;
        throw (_a = this.recentlyUsedQueries) == null ? void 0 : _a.removeFromCache(t7), e4;
      }));
    }
    return this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: e3, method: t6 }), null === s7 && (s7 = true !== r3 ? i2(this._layer.parsedUrl.path, e3) : this.queryPBF(e3)), s7;
  }
  async _getFilteredSet(e3, t6, i2, r3, s7) {
    const a6 = await this.databaseType();
    if (this.isTable() && t6 && null !== e3 && "" !== e3) {
      return new t4([], [], true, null);
    }
    if (this._canUsePagination())
      return this._getFilteredSetUsingPaging(e3, t6, i2, r3, s7);
    let n9 = "", l3 = false;
    null !== r3 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (n9 = r3.constructClause(), l3 = true);
    const u2 = new b();
    this.datesInUnknownTimezone && (u2.timeReferenceUnknownClient = true), u2.where = null === i2 ? null === t6 ? "1=1" : "" : f3(i2, a6), this._requestStandardised && (u2.sqlFormat = "standard"), u2.spatialRelationship = this._makeRelationshipEnum(e3), u2.outSpatialReference = this.spatialReference, u2.orderByFields = "" !== n9 ? n9.split(",") : null, u2.geometry = null === t6 ? null : t6, u2.relationParameter = this._makeRelationshipParam(e3);
    let d7 = await this.executeQuery(u2, "executeForIds");
    null === d7 && (d7 = []), this._checkCancelled(s7);
    return new t4([], d7, l3, null);
  }
  _expandPagedSet(e3, t6, i2, r3, s7) {
    return this._expandPagedSetFeatureSet(e3, t6, i2, r3, s7);
  }
  async _getFilteredSetUsingPaging(e3, t6, i2, r3, s7) {
    var _a;
    let a6 = "", n9 = false;
    null !== r3 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (a6 = r3.constructClause(), n9 = true);
    const l3 = await this.databaseType();
    let u2 = null === i2 ? null === t6 ? "1=1" : "" : f3(i2, l3);
    this._layer.definitionExpression && this._useDefinitionExpression && (u2 = "" !== u2 ? "((" + this._layer.definitionExpression + ") AND (" + u2 + "))" : this._layer.definitionExpression);
    let d7 = this._maxQueryRate();
    const h2 = (_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount;
    null != h2 && h2 < d7 && (d7 = h2);
    let p5 = null;
    if (true === this._pageJustIds)
      p5 = new t4([], ["GETPAGES"], n9, { spatialRel: this._makeRelationshipEnum(e3), relationParam: this._makeRelationshipParam(e3), outFields: this._layer.objectIdField, resultRecordCount: d7, resultOffset: 0, geometry: null === t6 ? null : t6, where: u2, orderByFields: a6, returnGeometry: false, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
    else {
      let i3 = true;
      true === this._removeGeometry && (i3 = false);
      const r4 = this._overrideFields ?? this._fieldsIncludingObjectId(["*"]);
      p5 = new t4([], ["GETPAGES"], n9, { spatialRel: this._makeRelationshipEnum(e3), relationParam: this._makeRelationshipParam(e3), outFields: r4.join(","), resultRecordCount: d7, resultOffset: 0, geometry: null === t6 ? null : t6, where: u2, orderByFields: a6, returnGeometry: i3, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
    }
    return await this._expandPagedSet(p5, d7, 0, 1, s7), p5;
  }
  _clonePageDefinition(e3) {
    return null === e3 ? null : true !== e3.groupbypage ? { groupbypage: false, spatialRel: e3.spatialRel, relationParam: e3.relationParam, outFields: e3.outFields, resultRecordCount: e3.resultRecordCount, resultOffset: e3.resultOffset, geometry: e3.geometry, where: e3.where, orderByFields: e3.orderByFields, returnGeometry: e3.returnGeometry, returnIdsOnly: e3.returnIdsOnly, internal: e3.internal } : { groupbypage: true, spatialRel: e3.spatialRel, relationParam: e3.relationParam, outFields: e3.outFields, resultRecordCount: e3.resultRecordCount, useOIDpagination: e3.useOIDpagination, generatedOid: e3.generatedOid, groupByFieldsForStatistics: e3.groupByFieldsForStatistics, resultOffset: e3.resultOffset, outStatistics: e3.outStatistics, geometry: e3.geometry, where: e3.where, orderByFields: e3.orderByFields, returnGeometry: e3.returnGeometry, returnIdsOnly: e3.returnIdsOnly, internal: e3.internal };
  }
  async _getPhysicalPage(e3, t6, i2) {
    const r3 = e3.pagesDefinition.internal.lastRetrieved, s7 = r3, a6 = e3.pagesDefinition.internal.lastPage, n9 = new b();
    this._requestStandardised && (n9.sqlFormat = "standard"), this.datesInUnknownTimezone && (n9.timeReferenceUnknownClient = true), n9.spatialRelationship = e3.pagesDefinition.spatialRel, n9.relationParameter = e3.pagesDefinition.relationParam, n9.outFields = e3.pagesDefinition.outFields.split(","), n9.num = e3.pagesDefinition.resultRecordCount, n9.start = e3.pagesDefinition.internal.lastPage, n9.geometry = e3.pagesDefinition.geometry, n9.where = e3.pagesDefinition.where, n9.orderByFields = "" !== e3.pagesDefinition.orderByFields ? e3.pagesDefinition.orderByFields.split(",") : null, n9.returnGeometry = e3.pagesDefinition.returnGeometry, n9.outSpatialReference = this.spatialReference;
    const l3 = await this.executeQuery(n9, "execute");
    if (this._checkCancelled(i2), e3.pagesDefinition.internal.lastPage !== a6)
      return "done";
    const o = this._layer.objectIdField;
    for (let u2 = 0; u2 < l3.features.length; u2++)
      e3.pagesDefinition.internal.set[s7 + u2] = l3.features[u2].attributes[o];
    if (false === this._pageJustIds)
      for (let u2 = 0; u2 < l3.features.length; u2++)
        this._featureCache[l3.features[u2].attributes[o]] = l3.features[u2];
    return (void 0 === l3.exceededTransferLimit && l3.features.length !== e3.pagesDefinition.resultRecordCount || false === l3.exceededTransferLimit) && (e3.pagesDefinition.internal.fullyResolved = true), e3.pagesDefinition.internal.lastRetrieved = r3 + l3.features.length, e3.pagesDefinition.internal.lastPage += e3.pagesDefinition.resultRecordCount, "done";
  }
  _fieldsIncludingObjectId(e3) {
    if (null === e3)
      return [this.objectIdField];
    const t6 = e3.slice(0);
    if (t6.includes("*"))
      return t6;
    let i2 = false;
    for (const r3 of t6)
      if (r3.toUpperCase() === this.objectIdField.toUpperCase()) {
        i2 = true;
        break;
      }
    return false === i2 && t6.push(this.objectIdField), t6;
  }
  async _getFeatures(e3, t6, i2, r3) {
    const s7 = [];
    if (-1 !== t6 && void 0 === this._featureCache[t6] && s7.push(t6), true === this._checkIfNeedToExpandKnownPage(e3, this._maxProcessingRate()))
      return await this._expandPagedSet(e3, this._maxProcessingRate(), 0, 0, r3), this._getFeatures(e3, t6, i2, r3);
    let l3 = 0;
    for (let a6 = e3._lastFetchedIndex; a6 < e3._known.length; a6++) {
      if (e3._lastFetchedIndex += 1, l3++, void 0 === this._featureCache[e3._known[a6]]) {
        let i3 = false;
        if (null !== this._layer._mode && void 0 !== this._layer._mode) {
          const t7 = this._layer._mode;
          if (void 0 !== t7._featureMap[e3._known[a6]]) {
            const r4 = t7._featureMap[e3._known[a6]];
            null !== r4 && (i3 = true, this._featureCache[e3._known[a6]] = r4);
          }
        }
        if (false === i3 && (e3._known[a6] !== t6 && s7.push(e3._known[a6]), s7.length >= this._maxProcessingRate() - 1))
          break;
      }
      if (l3 >= i2 && 0 === s7.length)
        break;
    }
    if (0 === s7.length)
      return "success";
    const o = new b();
    this._requestStandardised && (o.sqlFormat = "standard"), this.datesInUnknownTimezone && (o.timeReferenceUnknownClient = true), o.objectIds = s7, o.outFields = this._overrideFields ?? this._fieldsIncludingObjectId(["*"]), o.returnGeometry = true, true === this._removeGeometry && (o.returnGeometry = false), o.outSpatialReference = this.spatialReference;
    const u2 = await this.executeQuery(o, "execute");
    if (this._checkCancelled(r3), void 0 !== u2.error)
      throw new s2(r.RequestFailed, { reason: u2.error });
    const d7 = this._layer.objectIdField;
    for (let a6 = 0; a6 < u2.features.length; a6++)
      this._featureCache[u2.features[a6].attributes[d7]] = u2.features[a6];
    return "success";
  }
  async _getDistinctPages(e3, t6, i2, r3, s7, l3, o, u2, d7) {
    var _a;
    await this._ensureLoaded();
    const h2 = await this.databaseType();
    let p5 = i2.parseTree.column;
    const c5 = this._layer.fields ?? [];
    for (let a6 = 0; a6 < c5.length; a6++)
      if (c5[a6].name.toLowerCase() === p5.toLowerCase()) {
        p5 = c5[a6].name;
        break;
      }
    const f7 = new b();
    this._requestStandardised && (f7.sqlFormat = "standard"), this.datesInUnknownTimezone && (f7.timeReferenceUnknownClient = true);
    let m4 = null === l3 ? null === s7 ? "1=1" : "" : f3(l3, h2);
    this._layer.definitionExpression && this._useDefinitionExpression && (m4 = "" !== m4 ? "((" + this._layer.definitionExpression + ") AND (" + m4 + "))" : this._layer.definitionExpression), f7.where = m4, f7.spatialRelationship = this._makeRelationshipEnum(r3), f7.relationParameter = this._makeRelationshipParam(r3), f7.geometry = null === s7 ? null : s7, f7.returnDistinctValues = true, f7.returnGeometry = false, f7.outFields = [p5];
    const _ = await this.executeQuery(f7, "execute");
    if (this._checkCancelled(d7), !_.hasOwnProperty("features"))
      throw new s2(r.InvalidStatResponse);
    let g4 = false;
    for (let a6 = 0; a6 < c5.length; a6++)
      if (c5[a6].name === p5) {
        "date" === c5[a6].type && (g4 = true);
        break;
      }
    for (let a6 = 0; a6 < _.features.length; a6++) {
      if (g4) {
        const e4 = _.features[a6].attributes[p5];
        null !== e4 ? u2.push(new Date(e4)) : u2.push(e4);
      } else
        u2.push(_.features[a6].attributes[p5]);
      if (u2.length >= o)
        break;
    }
    if (0 === _.features.length)
      return u2;
    if (_.features.length === ((_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount) && u2.length < o) {
      return { calculated: true, result: await this._getDistinctPages(e3 + _.features.length, t6, i2, r3, s7, l3, o, u2, d7) };
    }
    return u2;
  }
  async _distinctStat(e3, t6, i2, r3, s7, a6, n9) {
    return { calculated: true, result: await this._getDistinctPages(0, e3, t6, i2, r3, s7, a6, [], n9) };
  }
  isTable() {
    return this._layer.isTable || null === this._layer.geometryType || "table" === this._layer.type || "" === this._layer.geometryType || "esriGeometryNull" === this._layer.geometryType;
  }
  async _countstat(e3, t6, i2, r3) {
    const s7 = await this.databaseType(), a6 = new b();
    if (this._requestStandardised && (a6.sqlFormat = "standard"), this.isTable() && i2 && null !== t6 && "" !== t6)
      return { calculated: true, result: 0 };
    let n9 = null === r3 ? null === i2 ? "1=1" : "" : f3(r3, s7);
    this._layer.definitionExpression && this._useDefinitionExpression && (n9 = "" !== n9 ? "((" + this._layer.definitionExpression + ") AND (" + n9 + "))" : this._layer.definitionExpression), a6.where = n9, this.datesInUnknownTimezone && (a6.timeReferenceUnknownClient = true), a6.where = n9, a6.spatialRelationship = this._makeRelationshipEnum(t6), a6.relationParameter = this._makeRelationshipParam(t6), a6.geometry = null === i2 ? null : i2, a6.returnGeometry = false;
    return { calculated: true, result: await this.executeQuery(a6, "executeForCount") };
  }
  async _stats(e3, t6, i2, r3, s7, l3, o) {
    await this._ensureLoaded();
    const u2 = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsSqlExpression, d7 = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsStatistics, h2 = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsDistinct;
    if ("count" === e3)
      return h2 ? this._countstat(e3, i2, r3, s7) : { calculated: false };
    if (false === d7 || false === D(t6) && false === u2 || false === t6.isStandardized)
      return "" !== i2 || null !== s7 ? { calculated: false } : this._manualStat(e3, t6, l3, o);
    if ("distinct" === e3)
      return false === h2 ? "" !== i2 || null !== s7 ? { calculated: false } : this._manualStat(e3, t6, l3, o) : this._distinctStat(e3, t6, i2, r3, s7, l3, o);
    const p5 = await this.databaseType();
    if (this.isTable() && r3 && null !== i2 && "" !== i2)
      return { calculated: true, result: null };
    const c5 = new b();
    this._requestStandardised && (c5.sqlFormat = "standard");
    let _ = null === s7 ? null === r3 ? "1=1" : "" : f3(s7, p5);
    this._layer.definitionExpression && this._useDefinitionExpression && (_ = "" !== _ ? "((" + this._layer.definitionExpression + ") AND (" + _ + "))" : this._layer.definitionExpression), c5.where = _, c5.spatialRelationship = this._makeRelationshipEnum(i2), c5.relationParameter = this._makeRelationshipParam(i2), c5.geometry = null === r3 ? null : r3, this.datesInUnknownTimezone && (c5.timeReferenceUnknownClient = true);
    const g4 = new m();
    g4.statisticType = w2(e3), g4.onStatisticField = f3(t6, p5), g4.outStatisticFieldName = "ARCADE_STAT_RESULT", c5.returnGeometry = false;
    let w3 = "ARCADE_STAT_RESULT";
    c5.outStatistics = [g4];
    const R = await this.executeQuery(c5, "execute");
    if (!R.hasOwnProperty("features") || 0 === R.features.length)
      throw new s2(r.InvalidStatResponse);
    let S3 = false;
    const F4 = R.fields ?? [];
    for (let a6 = 0; a6 < F4.length; a6++)
      if ("ARCADE_STAT_RESULT" === F4[a6].name.toUpperCase()) {
        w3 = F4[a6].name, "date" === F4[a6].type && (S3 = true);
        break;
      }
    if (S3) {
      let e4 = R.features[0].attributes[w3];
      return null !== e4 && (e4 = new Date(R.features[0].attributes[w3])), { calculated: true, result: e4 };
    }
    return { calculated: true, result: R.features[0].attributes[w3] };
  }
  _stat(e3, t6, i2, r3, s7, a6, n9) {
    return this._stats(e3, t6, i2, r3, s7, a6, n9);
  }
  async _canDoAggregates(e3, t6) {
    var _a, _b;
    await this._ensureLoaded();
    let i2 = false;
    const r3 = (_a = this._layer.capabilities) == null ? void 0 : _a.query, s7 = true === (r3 == null ? void 0 : r3.supportsSqlExpression);
    if (null != r3 && true === r3.supportsStatistics && true === r3.supportsOrderBy && (i2 = true), i2)
      for (let a6 = 0; a6 < t6.length - 1; a6++)
        (false === ((_b = t6[a6].workingexpr) == null ? void 0 : _b.isStandardized) || false === D(t6[a6].workingexpr) && false === s7) && (i2 = false);
    return false !== i2;
  }
  _makeRelationshipEnum(e3) {
    if (e3.includes("esriSpatialRelRelation"))
      return "relation";
    switch (e3) {
      case "esriSpatialRelRelation":
        return "relation";
      case "esriSpatialRelIntersects":
        return "intersects";
      case "esriSpatialRelContains":
        return "contains";
      case "esriSpatialRelOverlaps":
        return "overlaps";
      case "esriSpatialRelWithin":
        return "within";
      case "esriSpatialRelTouches":
        return "touches";
      case "esriSpatialRelCrosses":
        return "crosses";
      case "esriSpatialRelEnvelopeIntersects":
        return "envelope-intersects";
    }
    return e3;
  }
  _makeRelationshipParam(e3) {
    return e3.includes("esriSpatialRelRelation") ? e3.split(":")[1] : "";
  }
  async _getAggregatePagesDataSourceDefinition(e3, t6, i2, r3, s7, a6, n9) {
    var _a;
    await this._ensureLoaded();
    const l3 = await this.databaseType();
    let u2 = "", d7 = false, h2 = false;
    null !== a6 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (u2 = a6.constructClause(), h2 = true), this._layer.capabilities && this._layer.capabilities.query && false === this._layer.capabilities.query.supportsPagination && (h2 = false, d7 = true, u2 = this._layer.objectIdField);
    const p5 = [];
    for (let o = 0; o < t6.length; o++) {
      const e4 = new m();
      e4.onStatisticField = null !== t6[o].workingexpr ? f3(t6[o].workingexpr, l3) : "", e4.outStatisticFieldName = t6[o].field, e4.statisticType = t6[o].toStatisticsName(), p5.push(e4);
    }
    "" === u2 && (u2 = e3.join(","));
    let c5 = this._maxQueryRate();
    const f7 = (_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount;
    null != f7 && f7 < c5 && (c5 = f7);
    let m4 = null === s7 ? null === r3 ? "1=1" : "" : f3(s7, l3);
    this._layer.definitionExpression && this._useDefinitionExpression && (m4 = "" !== m4 ? "((" + this._layer.definitionExpression + ") AND (" + m4 + "))" : this._layer.definitionExpression);
    return new t4([], ["GETPAGES"], h2, { groupbypage: true, spatialRel: this._makeRelationshipEnum(i2), relationParam: this._makeRelationshipParam(i2), outFields: ["*"], useOIDpagination: d7, generatedOid: n9, resultRecordCount: c5, resultOffset: 0, groupByFieldsForStatistics: e3, outStatistics: p5, geometry: null === r3 ? null : r3, where: m4, orderByFields: u2, returnGeometry: false, returnIdsOnly: false, internal: { lastMaxId: -1, set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
  }
  async _getAgregagtePhysicalPage(t6, i2, r3) {
    let s7 = t6.pagesDefinition.where;
    true === t6.pagesDefinition.useOIDpagination && (s7 = "" !== s7 ? "(" + s7 + ") AND (" + t6.pagesDefinition.generatedOid + ">" + t6.pagesDefinition.internal.lastMaxId.toString() + ")" : t6.pagesDefinition.generatedOid + ">" + t6.pagesDefinition.internal.lastMaxId.toString());
    const l3 = t6.pagesDefinition.internal.lastRetrieved, o = l3, u2 = t6.pagesDefinition.internal.lastPage, d7 = new b();
    if (this._requestStandardised && (d7.sqlFormat = "standard"), d7.where = s7, d7.spatialRelationship = t6.pagesDefinition.spatialRel, d7.relationParameter = t6.pagesDefinition.relationParam, d7.outFields = t6.pagesDefinition.outFields, d7.outStatistics = t6.pagesDefinition.outStatistics, d7.geometry = t6.pagesDefinition.geometry, d7.groupByFieldsForStatistics = t6.pagesDefinition.groupByFieldsForStatistics, d7.num = t6.pagesDefinition.resultRecordCount, d7.start = t6.pagesDefinition.internal.lastPage, d7.returnGeometry = t6.pagesDefinition.returnGeometry, this.datesInUnknownTimezone && (d7.timeReferenceUnknownClient = true), d7.orderByFields = "" !== t6.pagesDefinition.orderByFields ? t6.pagesDefinition.orderByFields.split(",") : null, this.isTable() && d7.geometry && d7.spatialRelationship)
      return [];
    const h2 = await this.executeQuery(d7, "execute");
    if (this._checkCancelled(r3), !h2.hasOwnProperty("features"))
      throw new s2(r.InvalidStatResponse);
    const p5 = [];
    if (t6.pagesDefinition.internal.lastPage !== u2)
      return [];
    h2.features.length > 0 && void 0 === h2.features[0].attributes[t6.pagesDefinition.generatedOid] && (t6.pagesDefinition.generatedOid = t6.pagesDefinition.generatedOid.toLowerCase());
    for (let e3 = 0; e3 < h2.features.length; e3++)
      t6.pagesDefinition.internal.set[o + e3] = h2.features[e3].attributes[t6.pagesDefinition.generatedOid];
    for (let a6 = 0; a6 < h2.features.length; a6++)
      p5.push(new c2({ attributes: h2.features[a6].attributes, geometry: null }));
    return true === t6.pagesDefinition.useOIDpagination ? 0 === h2.features.length ? t6.pagesDefinition.internal.fullyResolved = true : t6.pagesDefinition.internal.lastMaxId = h2.features[h2.features.length - 1].attributes[t6.pagesDefinition.generatedOid] : (void 0 === h2.exceededTransferLimit && h2.features.length !== t6.pagesDefinition.resultRecordCount || false === h2.exceededTransferLimit) && (t6.pagesDefinition.internal.fullyResolved = true), t6.pagesDefinition.internal.lastRetrieved = l3 + h2.features.length, t6.pagesDefinition.internal.lastPage += t6.pagesDefinition.resultRecordCount, p5;
  }
  static create(e3, t6, i2, r3, s7) {
    const a6 = new Ze({ url: e3, outFields: null === t6 ? ["*"] : t6 });
    return new _T({ layer: a6, spatialReference: i2, lrucache: r3, interceptor: s7 });
  }
  relationshipMetaData() {
    var _a;
    return this._layer && this._layer.source && ((_a = this._layer.source.sourceJSON) == null ? void 0 : _a.relationships) ? this._layer.source.sourceJSON.relationships : [];
  }
  serviceUrl() {
    return J(this._layer.parsedUrl.path);
  }
  async queryAttachments(e3, t6, i2, a6, n9) {
    const l3 = this._layer.capabilities;
    if ((l3 == null ? void 0 : l3.data.supportsAttachment) && (l3 == null ? void 0 : l3.operations.supportsQueryAttachments)) {
      const l4 = { objectIds: [e3], returnMetadata: n9 };
      (t6 && t6 > 0 || i2 && i2 > 0) && (l4.size = [t6 && t6 > 0 ? t6 : 0, i2 && i2 > 0 ? i2 : t6 + 1]), a6 && a6.length > 0 && (l4.attachmentTypes = a6), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: l4, method: "attachments" });
      const o = await this._layer.queryAttachments(l4), u2 = [];
      return o && o[e3] && o[e3].forEach((t7) => {
        const i3 = this._layer.parsedUrl.path + "/" + e3.toString() + "/attachments/" + t7.id.toString();
        let a7 = null;
        n9 && t7.exifInfo && (a7 = N2.convertJsonToArcade(t7.exifInfo, "system", true)), u2.push(new t3(t7.id, t7.name, t7.contentType, t7.size, i3, a7, t7.keywords ?? null));
      }), u2;
    }
    return [];
  }
  async queryRelatedFeatures(t6) {
    var _a;
    const r3 = { f: "json", relationshipId: t6.relationshipId.toString(), definitionExpression: t6.where, outFields: (_a = t6.outFields) == null ? void 0 : _a.join(","), returnGeometry: t6.returnGeometry.toString() };
    void 0 !== t6.resultOffset && null !== t6.resultOffset && (r3.resultOffset = t6.resultOffset.toString()), void 0 !== t6.resultRecordCount && null !== t6.resultRecordCount && (r3.resultRecordCount = t6.resultRecordCount.toString()), t6.orderByFields && (r3.orderByFields = t6.orderByFields.join(",")), t6.objectIds && t6.objectIds.length > 0 && (r3.objectIds = t6.objectIds.join(",")), t6.outSpatialReference && (r3.outSR = T(t6.outSpatialReference)), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preRequestCallback({ layer: this._layer, queryPayload: r3, method: "relatedrecords", url: this._layer.parsedUrl.path + "/queryRelatedRecords" });
    const s7 = await j(this._layer.parsedUrl.path + "/queryRelatedRecords", { responseType: "json", query: r3 });
    if (s7.data) {
      const t7 = {}, i2 = s7.data;
      if (i2 == null ? void 0 : i2.relatedRecordGroups) {
        const r4 = i2.spatialReference;
        for (const s8 of i2.relatedRecordGroups) {
          const a6 = s8.objectId, n9 = [];
          for (const t8 of s8.relatedRecords) {
            t8.geometry && (t8.geometry.spatialReference = r4);
            const i3 = new c2({ geometry: t8.geometry ? p2(t8.geometry) : null, attributes: t8.attributes });
            n9.push(i3);
          }
          t7[a6] = { features: n9, exceededTransferLimit: true === i2.exceededTransferLimit };
        }
      }
      return t7;
    }
    throw new s2(r.InvalidRequest);
  }
  async getFeatureByObjectId(e3, t6) {
    const i2 = new b();
    i2.outFields = t6, i2.returnGeometry = false, i2.outSpatialReference = this.spatialReference, i2.where = this.objectIdField + "=" + e3.toString(), this.datesInUnknownTimezone && (i2.timeReferenceUnknownClient = true), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: i2, method: "execute" });
    const r3 = await s5(this._layer.parsedUrl.path, i2);
    return 1 === r3.features.length ? r3.features[0] : null;
  }
  async getIdentityUser() {
    var _a;
    await this.load();
    const e3 = (_a = t) == null ? void 0 : _a.findCredential(this._layer.url);
    return e3 ? e3.userId : null;
  }
  async getOwningSystemUrl() {
    var _a, _b;
    await this.load();
    const e3 = (_a = t) == null ? void 0 : _a.findServerInfo(this._layer.url);
    if (e3)
      return e3.owningSystemUrl;
    let r3 = this._layer.url;
    const s7 = r3.toLowerCase().indexOf("/rest/services");
    if (r3 = s7 > -1 ? r3.substring(0, s7) : r3, r3) {
      r3 += "/rest/info";
      try {
        const e4 = await j(r3, { query: { f: "json" } });
        let t6 = "";
        return ((_b = e4.data) == null ? void 0 : _b.owningSystemUrl) && (t6 = e4.data.owningSystemUrl), t6;
      } catch (a6) {
        return "";
      }
    }
    return "";
  }
  getDataSourceFeatureSet() {
    const e3 = new _T({ layer: this._layer, spatialReference: this.spatialReference ?? void 0, outFields: this._overrideFields ?? void 0, includeGeometry: !this._removeGeometry, lrucache: this.recentlyUsedQueries ?? void 0, interceptor: this.featureSetQueryInterceptor ?? void 0 });
    return e3._useDefinitionExpression = false, e3;
  }
  get preferredTimeZone() {
    return this._layer.preferredTimeZone ?? null;
  }
  get dateFieldsTimeZone() {
    return this._layer.dateFieldsTimeZone ?? null;
  }
  get datesInUnknownTimezone() {
    return this._layer.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    return this._layer.editFieldsInfo ?? null;
  }
  get timeInfo() {
    return this._layer.timeInfo ?? null;
  }
  async getFeatureSetInfo() {
    var _a, _b;
    if (this.fsetInfo)
      return this.fsetInfo;
    let e3 = null, { parsedUrl: { path: t6 }, serviceItemId: r3 = null } = this._layer;
    if (t6) {
      const s8 = await j(t6, { responseType: "json", query: { f: "json" } });
      e3 = ((_a = s8 == null ? void 0 : s8.data) == null ? void 0 : _a.name) ?? null, r3 = ((_b = s8 == null ? void 0 : s8.data) == null ? void 0 : _b.serviceItemId) ?? null;
    }
    const s7 = this._layer.title && null !== (this._layer.parent ?? null);
    return this.featureSetInfo = { layerId: this._layer.layerId, layerName: "" === e3 ? null : e3, itemId: "" === r3 ? null : r3, serviceLayerUrl: "" === t6 ? null : t6, webMapLayerId: s7 ? this._layer.id ?? null : null, webMapLayerTitle: s7 ? this._layer.title ?? null : null, className: null, objectClassId: null }, this.fsetInfo;
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerMemory.js
var f6 = class _f extends x3 {
  constructor(e3) {
    super(e3), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerMemory", this._removeGeometry = false, this._overrideFields = null, this._forceIsTable = false, e3.spatialReference && (this.spatialReference = e3.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e3.layer, this._wset = null, true === e3.isTable && (this._forceIsTable = true), void 0 !== e3.outFields && (this._overrideFields = e3.outFields), void 0 !== e3.includeGeometry && (this._removeGeometry = false === e3.includeGeometry);
  }
  _maxQueryRate() {
    return P;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries() {
  }
  async loadImpl() {
    return true === this._layer.loaded ? (this._initialiseFeatureSet(), this) : (await this._layer.load(), this._initialiseFeatureSet(), this);
  }
  get gdbVersion() {
    return "";
  }
  _initialiseFeatureSet() {
    var _a, _b, _c, _d, _e, _f2;
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._layer.geometryType, this.fields = this._layer.fields.slice(0), null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e3 = [], t6 = [];
        for (const r3 of this.fields)
          if ("oid" === r3.type)
            e3.push(r3), t6.push(r3.name);
          else
            for (const s7 of this._overrideFields)
              if (s7.toLowerCase() === r3.name.toLowerCase()) {
                e3.push(r3), t6.push(r3.name);
                break;
              }
        this.fields = e3, this._overrideFields = t6;
      }
    this.objectIdField = this._layer.objectIdField;
    for (const e3 of this.fields)
      "global-id" === e3.type && (this.globalIdField = e3.name);
    this._databaseType = l.Standardised, this.hasZ = true === ((_c = (_b = (_a = this._layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.data) == null ? void 0 : _c.supportsZ), this.hasM = true === ((_f2 = (_e = (_d = this._layer) == null ? void 0 : _d.capabilities) == null ? void 0 : _e.data) == null ? void 0 : _f2.supportsM), this._layer instanceof ae ? (this.typeIdField = this._layer.subtypeField ?? "", this.types = this._layer.subtypes) : (this.typeIdField = this._layer.typeIdField ?? "", this.types = this._layer.types);
  }
  isTable() {
    return this._forceIsTable || this._layer.isTable || "table" === this._layer.type || !this._layer.geometryType;
  }
  _isInFeatureSet() {
    return s3.InFeatureSet;
  }
  _candidateIdTransform(e3) {
    return e3;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t6 = await this._getFilteredSet("", null, null, null, e3);
      return this._wset = t6, t6;
    }
    return this._wset;
  }
  _changeFeature(t6) {
    const r3 = {};
    for (const e3 of this.fields)
      r3[e3.name] = t6.attributes[e3.name];
    return new c2({ geometry: true === this._removeGeometry ? null : t6.geometry, attributes: r3 });
  }
  async _getFilteredSet(e3, t6, r3, s7, a6) {
    let n9 = "", u2 = false;
    if (null !== s7 && (n9 = s7.constructClause(), u2 = true), this.isTable() && t6 && null !== e3 && "" !== e3) {
      return new t4([], [], true, null);
    }
    const h2 = new b();
    h2.returnZ = this.hasZ, h2.returnM = this.hasM, h2.where = null === r3 ? null === t6 ? "1=1" : "" : f3(r3, l.Standardised), h2.spatialRelationship = this._makeRelationshipEnum(e3), h2.outSpatialReference = this.spatialReference, h2.orderByFields = "" !== n9 ? n9.split(",") : null, h2.geometry = null === t6 ? null : t6, h2.returnGeometry = true, h2.relationParameter = this._makeRelationshipParam(e3);
    const y4 = await this._layer.queryFeatures(h2);
    if (null === y4)
      return new t4([], [], u2, null);
    this._checkCancelled(a6);
    const c5 = [];
    y4.features.forEach((e4) => {
      const t7 = e4.attributes[this._layer.objectIdField];
      c5.push(t7), this._featureCache[t7] = this._changeFeature(e4);
    });
    return new t4([], c5, u2, null);
  }
  _makeRelationshipEnum(e3) {
    if (e3.includes("esriSpatialRelRelation"))
      return "relation";
    switch (e3) {
      case "esriSpatialRelRelation":
        return "relation";
      case "esriSpatialRelIntersects":
        return "intersects";
      case "esriSpatialRelContains":
        return "contains";
      case "esriSpatialRelOverlaps":
        return "overlaps";
      case "esriSpatialRelWithin":
        return "within";
      case "esriSpatialRelTouches":
        return "touches";
      case "esriSpatialRelCrosses":
        return "crosses";
      case "esriSpatialRelEnvelopeIntersects":
        return "envelope-intersects";
    }
    return e3;
  }
  _makeRelationshipParam(e3) {
    return e3.includes("esriSpatialRelRelation") ? e3.split(":")[1] : "";
  }
  async _queryAllFeatures() {
    if (this._wset)
      return this._wset;
    const e3 = new b();
    if (e3.where = "1=1", await this._ensureLoaded(), this._layer.source && this._layer.source.items) {
      const e4 = [];
      return this._layer.source.items.forEach((t7) => {
        const r4 = t7.attributes[this._layer.objectIdField];
        e4.push(r4), this._featureCache[r4] = this._changeFeature(t7);
      }), this._wset = new t4([], e4, false, null), this._wset;
    }
    e3.returnZ = this.hasZ, e3.returnM = this.hasM;
    const t6 = await this._layer.queryFeatures(e3), r3 = [];
    return t6.features.forEach((e4) => {
      const t7 = e4.attributes[this._layer.objectIdField];
      r3.push(t7), this._featureCache[t7] = this._changeFeature(e4);
    }), this._wset = new t4([], r3, false, null), this._wset;
  }
  async _getFeatures(e3, s7, i2) {
    const a6 = [];
    -1 !== s7 && void 0 === this._featureCache[s7] && a6.push(s7);
    for (let t6 = e3._lastFetchedIndex; t6 < e3._known.length && (e3._lastFetchedIndex += 1, !(void 0 === this._featureCache[e3._known[t6]] && (e3._known[t6] !== s7 && a6.push(e3._known[t6]), a6.length > i2))); t6++)
      ;
    if (0 === a6.length)
      return "success";
    throw new s2(r.MissingFeatures);
  }
  async _refineSetBlock(e3) {
    return e3;
  }
  async _stat() {
    return { calculated: false };
  }
  async _canDoAggregates() {
    return false;
  }
  relationshipMetaData() {
    return [];
  }
  static _cloneAttr(e3) {
    const t6 = {};
    for (const r3 in e3)
      t6[r3] = e3[r3];
    return t6;
  }
  nativeCapabilities() {
    return { title: this._layer.title ?? "", canQueryRelated: false, source: this, capabilities: this._layer.capabilities, databaseType: this._databaseType, requestStandardised: true };
  }
  static create(e3, t6) {
    var _a, _b, _c, _d;
    let r3 = e3.layerDefinition.objectIdField;
    const s7 = e3.layerDefinition.typeIdField ?? "", i2 = [];
    if (e3.layerDefinition.types)
      for (const u2 of e3.layerDefinition.types)
        i2.push(n6.fromJSON(u2));
    let a6 = e3.layerDefinition.geometryType;
    void 0 === a6 && (a6 = e3.featureSet.geometryType || "");
    let l3 = e3.featureSet.features;
    const n9 = t6.toJSON();
    if (!r3) {
      let t7 = false;
      for (const s8 of e3.layerDefinition.fields)
        if ("oid" === s8.type || "esriFieldTypeOID" === s8.type) {
          r3 = s8.name, t7 = true;
          break;
        }
      if (false === t7) {
        let t8 = "FID", s8 = true, i3 = 0;
        for (; s8; ) {
          let r4 = true;
          for (const s9 of e3.layerDefinition.fields)
            if (s9.name === t8) {
              r4 = false;
              break;
            }
          true === r4 ? s8 = false : (i3++, t8 = "FID" + i3.toString());
        }
        e3.layerDefinition.fields.push({ type: "esriFieldTypeOID", name: t8, alias: t8 });
        const a7 = [];
        for (let r4 = 0; r4 < l3.length; r4++)
          a7.push({ geometry: e3.featureSet.features[r4].geometry, attributes: e3.featureSet.features[r4].attributes ? this._cloneAttr(e3.featureSet.features[r4].attributes) : {} }), a7[r4].attributes[t8] = r4;
        l3 = a7, r3 = t8;
      }
    }
    const o = [];
    for (const u2 of e3.layerDefinition.fields)
      u2 instanceof y ? o.push(u2) : o.push(y.fromJSON(u2));
    let y4 = a6;
    switch (y4 || (y4 = ""), y4) {
      case "esriGeometryPoint":
        y4 = "point";
        break;
      case "esriGeometryPolyline":
        y4 = "polyline";
        break;
      case "esriGeometryPolygon":
        y4 = "polygon";
        break;
      case "esriGeometryEnvelope":
        y4 = "extent";
        break;
      case "esriGeometryMultipoint":
        y4 = "multipoint";
        break;
      case "":
      case "esriGeometryNull":
        y4 = "esriGeometryNull";
    }
    if ("esriGeometryNull" !== y4)
      for (const h2 of l3)
        h2.geometry && h2.geometry instanceof p == false && (h2.geometry.type = y4, void 0 === h2.geometry.spatialReference && (h2.geometry.spatialReference = n9));
    else
      for (const u2 of l3)
        u2.geometry && (u2.geometry = null);
    const p5 = { outFields: ["*"], source: l3, fields: o, hasZ: true === ((_a = e3 == null ? void 0 : e3.layerDefinition) == null ? void 0 : _a.hasZ) || true === ((_b = e3 == null ? void 0 : e3.featureSet) == null ? void 0 : _b.hasZ), hasM: true === ((_c = e3 == null ? void 0 : e3.layerDefinition) == null ? void 0 : _c.hasM) || true === ((_d = e3 == null ? void 0 : e3.featureSet) == null ? void 0 : _d.hasM), types: i2, typeIdField: s7, objectIdField: r3, spatialReference: t6 }, m4 = "esriGeometryNull" === y4 || null === y4;
    m4 || (p5.geometryType = y4);
    const _ = new Ze(p5);
    return new _f({ layer: _, spatialReference: t6, isTable: m4 });
  }
  async queryAttachments() {
    return [];
  }
  async getFeatureByObjectId(e3) {
    const t6 = new b();
    t6.where = this.objectIdField + "=" + e3.toString(), t6.returnZ = this.hasZ, t6.returnM = this.hasM;
    const r3 = await this._layer.queryFeatures(t6);
    return 1 === r3.features.length ? r3.features[0] : null;
  }
  async getOwningSystemUrl() {
    return "";
  }
  async getIdentityUser() {
    return "";
  }
  get preferredTimeZone() {
    return this._layer.preferredTimeZone ?? null;
  }
  get dateFieldsTimeZone() {
    return this._layer.dateFieldsTimeZone ?? null;
  }
  get datesInUnknownTimezone() {
    var _a;
    return (_a = this._layer) == null ? void 0 : _a.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a;
    return (_a = this._layer) == null ? void 0 : _a.editFieldsInfo;
  }
  get timeInfo() {
    var _a;
    return (_a = this._layer) == null ? void 0 : _a.timeInfo;
  }
  async getFeatureSetInfo() {
    const e3 = this._layer.title && this._layer.parent;
    return this.fsetInfo ?? { layerId: null, layerName: null, itemId: null, serviceLayerUrl: null, webMapLayerId: e3 ? this._layer.id ?? null : null, webMapLayerTitle: e3 ? this._layer.title ?? null : null, className: null, objectClassId: null };
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerRelated.js
var d6 = class extends x3 {
  constructor(e3) {
    super(e3), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerRelated", this._findObjectId = -1, this._requestStandardised = false, this._removeGeometry = false, this._overrideFields = null, this.featureObjectId = null, e3.spatialReference && (this.spatialReference = e3.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e3.layer, this._wset = null, this._findObjectId = e3.objectId, this.featureObjectId = e3.objectId, this.relationship = e3.relationship, this._relatedLayer = e3.relatedLayer, void 0 !== e3.outFields && (this._overrideFields = e3.outFields), void 0 !== e3.includeGeometry && (this._removeGeometry = false === e3.includeGeometry);
  }
  _maxQueryRate() {
    return P;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries() {
  }
  async loadImpl() {
    var _a;
    return await Promise.all([this._layer.load(), (_a = this._relatedLayer) == null ? void 0 : _a.load()]), this._initialiseFeatureSet(), this;
  }
  nativeCapabilities() {
    return this._relatedLayer.nativeCapabilities();
  }
  _initialiseFeatureSet() {
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._relatedLayer.geometryType, this.fields = this._relatedLayer.fields.slice(0), this.hasZ = this._relatedLayer.hasZ, this.hasM = this._relatedLayer.hasM, null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e4 = [], t6 = [];
        for (const r3 of this.fields)
          if ("oid" === r3.type)
            e4.push(r3), t6.push(r3.name);
          else
            for (const i2 of this._overrideFields)
              if (i2.toLowerCase() === r3.name.toLowerCase()) {
                e4.push(r3), t6.push(r3.name);
                break;
              }
        this.fields = e4, this._overrideFields = t6;
      }
    const e3 = this._layer.nativeCapabilities();
    e3 && (this._databaseType = e3.databaseType, this._requestStandardised = e3.requestStandardised), this.objectIdField = this._relatedLayer.objectIdField, this.globalIdField = this._relatedLayer.globalIdField, this.hasM = this._relatedLayer.supportsM, this.hasZ = this._relatedLayer.supportsZ, this.typeIdField = this._relatedLayer.typeIdField, this.types = this._relatedLayer.types;
  }
  async databaseType() {
    return await this._relatedLayer.databaseType(), this._databaseType = this._relatedLayer._databaseType, this._databaseType;
  }
  isTable() {
    return this._relatedLayer.isTable();
  }
  _isInFeatureSet() {
    return s3.InFeatureSet;
  }
  _candidateIdTransform(e3) {
    return e3;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t6 = await this._getFilteredSet("", null, null, null, e3);
      return this._wset = t6, t6;
    }
    return this._wset;
  }
  _changeFeature(t6) {
    const r3 = {};
    for (const e3 of this.fields)
      r3[e3.name] = t6.attributes[e3.name];
    return new c2({ geometry: true === this._removeGeometry ? null : t6.geometry, attributes: r3 });
  }
  async _getFilteredSet(e3, t6, r3, i2, a6) {
    var _a, _b;
    if (await this.databaseType(), this.isTable() && t6 && null !== e3 && "" !== e3) {
      return new t4([], [], true, null);
    }
    const n9 = this._layer.nativeCapabilities();
    if (false === n9.canQueryRelated) {
      return new t4([], [], true, null);
    }
    if (((_a = n9.capabilities) == null ? void 0 : _a.queryRelated) && n9.capabilities.queryRelated.supportsPagination)
      return this._getFilteredSetUsingPaging(e3, t6, r3, i2, a6);
    let d7 = "", o = false;
    null !== i2 && ((_b = n9.capabilities) == null ? void 0 : _b.queryRelated) && true === n9.capabilities.queryRelated.supportsOrderBy && (d7 = i2.constructClause(), o = true);
    const u2 = new d3();
    u2.objectIds = [this._findObjectId];
    const h2 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._relatedLayer.fields ? this._relatedLayer.fields.map((e4) => e4.name) : ["*"]);
    u2.outFields = h2, u2.relationshipId = this.relationship.id, u2.where = "1=1";
    let c5 = true;
    true === this._removeGeometry && (c5 = false), u2.returnGeometry = c5, this._requestStandardised && (u2.sqlFormat = "standard"), u2.outSpatialReference = this.spatialReference, u2.orderByFields = "" !== d7 ? d7.split(",") : null;
    const y4 = await n9.source.queryRelatedFeatures(u2);
    this._checkCancelled(a6);
    const p5 = y4[this._findObjectId] ? y4[this._findObjectId].features : [], _ = [];
    for (let s7 = 0; s7 < p5.length; s7++)
      this._featureCache[p5[s7].attributes[this._relatedLayer.objectIdField]] = p5[s7], _.push(p5[s7].attributes[this._relatedLayer.objectIdField]);
    const f7 = t6 && null !== e3 && "" !== e3, g4 = null != r3;
    return new t4(f7 || g4 ? _ : [], f7 || g4 ? [] : _, o, null);
  }
  _fieldsIncludingObjectId(e3) {
    if (null === e3)
      return [this.objectIdField];
    const t6 = e3.slice(0);
    if (t6.includes("*"))
      return t6;
    let r3 = false;
    for (const i2 of t6)
      if (i2.toUpperCase() === this.objectIdField.toUpperCase()) {
        r3 = true;
        break;
      }
    return false === r3 && t6.push(this.objectIdField), t6;
  }
  async _getFilteredSetUsingPaging(e3, t6, r3, i2, a6) {
    var _a, _b;
    let n9 = "", l3 = false;
    const d7 = this._layer.nativeCapabilities();
    null !== i2 && ((_a = d7 == null ? void 0 : d7.capabilities) == null ? void 0 : _a.queryRelated) && true === d7.capabilities.queryRelated.supportsOrderBy && (n9 = i2.constructClause(), l3 = true), await this.databaseType();
    const o = "1=1";
    let u2 = this._maxQueryRate();
    const h2 = (_b = d7.capabilities) == null ? void 0 : _b.query.maxRecordCount;
    null != h2 && h2 < u2 && (u2 = h2);
    const c5 = t6 && null !== e3 && "" !== e3, y4 = null != r3;
    let p5 = null, _ = true;
    true === this._removeGeometry && (_ = false);
    const f7 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._relatedLayer.fields ? this._relatedLayer.fields.map((e4) => e4.name) : ["*"]);
    return p5 = new t4(c5 || y4 ? ["GETPAGES"] : [], c5 || y4 ? [] : ["GETPAGES"], l3, { outFields: f7.join(","), resultRecordCount: u2, resultOffset: 0, objectIds: [this._findObjectId], where: o, orderByFields: n9, returnGeometry: _, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } }), await this._expandPagedSet(p5, u2, 0, 0, a6), p5;
  }
  _expandPagedSet(e3, t6, r3, i2, s7) {
    return this._expandPagedSetFeatureSet(e3, t6, r3, i2, s7);
  }
  _clonePageDefinition(e3) {
    return null === e3 ? null : true !== e3.groupbypage ? { groupbypage: false, outFields: e3.outFields, resultRecordCount: e3.resultRecordCount, resultOffset: e3.resultOffset, where: e3.where, objectIds: e3.objectIds, orderByFields: e3.orderByFields, returnGeometry: e3.returnGeometry, returnIdsOnly: e3.returnIdsOnly, internal: e3.internal } : { groupbypage: true, outFields: e3.outFields, resultRecordCount: e3.resultRecordCount, useOIDpagination: e3.useOIDpagination, generatedOid: e3.generatedOid, groupByFieldsForStatistics: e3.groupByFieldsForStatistics, resultOffset: e3.resultOffset, outStatistics: e3.outStatistics, geometry: e3.geometry, where: e3.where, objectIds: e3.objectIds, orderByFields: e3.orderByFields, returnGeometry: e3.returnGeometry, returnIdsOnly: e3.returnIdsOnly, internal: e3.internal };
  }
  async _getPhysicalPage(e3, t6, r3) {
    const i2 = e3.pagesDefinition.internal.lastRetrieved, s7 = i2, a6 = e3.pagesDefinition.internal.lastPage, n9 = this._layer.nativeCapabilities(), d7 = new d3();
    true === this._requestStandardised && (d7.sqlFormat = "standard"), d7.relationshipId = this.relationship.id, d7.objectIds = e3.pagesDefinition.objectIds, d7.resultOffset = e3.pagesDefinition.internal.lastPage, d7.resultRecordCount = e3.pagesDefinition.resultRecordCount, d7.outFields = e3.pagesDefinition.outFields.split(","), d7.where = e3.pagesDefinition.where, d7.orderByFields = "" !== e3.pagesDefinition.orderByFields ? e3.pagesDefinition.orderByFields.split(",") : null, d7.returnGeometry = e3.pagesDefinition.returnGeometry, d7.outSpatialReference = this.spatialReference;
    const o = await n9.source.queryRelatedFeatures(d7);
    if (this._checkCancelled(r3), e3.pagesDefinition.internal.lastPage !== a6)
      return 0;
    const u2 = o[this._findObjectId] ? o[this._findObjectId].features : [];
    for (let l3 = 0; l3 < u2.length; l3++)
      e3.pagesDefinition.internal.set[s7 + l3] = u2[l3].attributes[this._relatedLayer.objectIdField];
    for (let l3 = 0; l3 < u2.length; l3++)
      this._featureCache[u2[l3].attributes[this._relatedLayer.objectIdField]] = u2[l3];
    const h2 = !o[this._findObjectId] || false === o[this._findObjectId].exceededTransferLimit;
    return u2.length !== e3.pagesDefinition.resultRecordCount && h2 && (e3.pagesDefinition.internal.fullyResolved = true), e3.pagesDefinition.internal.lastRetrieved = i2 + u2.length, e3.pagesDefinition.internal.lastPage += e3.pagesDefinition.resultRecordCount, u2.length;
  }
  async _getFeatures(e3, i2, s7, a6) {
    const n9 = [];
    -1 !== i2 && void 0 === this._featureCache[i2] && n9.push(i2);
    const l3 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(e3, l3))
      return await this._expandPagedSet(e3, l3, 0, 0, a6), this._getFeatures(e3, i2, s7, a6);
    let d7 = 0;
    for (let t6 = e3._lastFetchedIndex; t6 < e3._known.length && (d7++, d7 <= s7 && (e3._lastFetchedIndex += 1), !("GETPAGES" !== e3._known[t6] && void 0 === this._featureCache[e3._known[t6]] && (e3._known[t6] !== i2 && n9.push(e3._known[t6]), n9.length > s7))) && !(d7 >= s7 && 0 === n9.length); t6++)
      ;
    if (0 === n9.length)
      return "success";
    throw new s2(r.MissingFeatures);
  }
  async _refineSetBlock(e3, t6, r3) {
    return e3;
  }
  async _stat(e3, t6, r3, i2, s7, a6, n9) {
    return { calculated: false };
  }
  get gdbVersion() {
    return this._relatedLayer.gdbVersion;
  }
  async _canDoAggregates(e3, t6, r3, i2, s7) {
    return false;
  }
  relationshipMetaData() {
    return this._relatedLayer.relationshipMetaData();
  }
  serviceUrl() {
    return this._relatedLayer.serviceUrl();
  }
  queryAttachments(e3, t6, r3, i2, s7) {
    return this._relatedLayer.queryAttachments(e3, t6, r3, i2, s7);
  }
  getFeatureByObjectId(e3, t6) {
    return this._relatedLayer.getFeatureByObjectId(e3, t6);
  }
  getOwningSystemUrl() {
    return this._relatedLayer.getOwningSystemUrl();
  }
  getIdentityUser() {
    return this._relatedLayer.getIdentityUser();
  }
  getDataSourceFeatureSet() {
    return this._relatedLayer;
  }
  get preferredTimeZone() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.preferredTimeZone) ?? null;
  }
  get dateFieldsTimeZone() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.dateFieldsTimeZone) ?? null;
  }
  get datesInUnknownTimezone() {
    var _a;
    return (_a = this._relatedLayer) == null ? void 0 : _a.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.editFieldsInfo) ?? null;
  }
  get timeInfo() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.timeInfo) ?? null;
  }
  async getFeatureSetInfo() {
    return this.fsetInfo ?? this._layer.featureSetInfo;
  }
};

// node_modules/@arcgis/core/arcade/featureSetUtils.js
function L3() {
  null === a2.applicationCache && (a2.applicationCache = new a2());
}
async function I3(e3, t6) {
  if (a2.applicationCache) {
    const r3 = a2.applicationCache.getLayerInfo(e3);
    if (r3) {
      const a6 = await r3;
      return new Ze({ url: e3, outFields: t6, sourceJSON: a6 });
    }
    const n9 = new Ze({ url: e3, outFields: t6 }), i2 = (async () => (await n9.load(), n9.sourceJSON))();
    if (a2.applicationCache) {
      a2.applicationCache.setLayerInfo(e3, i2);
      try {
        return await i2, n9;
      } catch (a6) {
        throw a2.applicationCache.clearLayerInfo(e3), a6;
      }
    }
    return await i2, n9;
  }
  return new Ze({ url: e3, outFields: t6 });
}
async function F3(e3, t6, a6, r3, n9, i2 = null) {
  return g3(await I3(e3, ["*"]), t6, a6, r3, n9, i2);
}
function g3(e3, t6 = null, r3 = null, n9 = true, i2 = null, s7 = null) {
  if (e3 instanceof Ze || Pe(e3)) {
    const a6 = { layer: e3, spatialReference: t6, outFields: r3, includeGeometry: n9, lrucache: i2, interceptor: s7 };
    return true == !(e3.url || !e3.source) ? new f6(a6) : new T4(a6);
  }
  const l3 = g3(e3.parent, t6, r3, n9, i2, s7);
  return l3.filter(x.create(e3.parent.subtypeField + "=" + e3.subtypeCode.toString(), e3.parent.fieldsIndex, l3.dateFieldsTimeZoneDefaultUTC));
}
async function A(t6) {
  if (null !== a2.applicationCache) {
    const e3 = a2.applicationCache.getLayerInfo(t6);
    if (null !== e3)
      return e3;
  }
  const a6 = (async () => {
    const a7 = await j(t6, { responseType: "json", query: { f: "json" } });
    return a7.data ? a7.data : null;
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(t6, a6);
    try {
      return await a6;
    } catch (r3) {
      throw a2.applicationCache.clearLayerInfo(t6), r3;
    }
  }
  return a6;
}
async function N3(t6, a6) {
  const r3 = "QUERYDATAELEMTS:" + a6.toString() + ":" + t6;
  if (null !== a2.applicationCache) {
    const e3 = a2.applicationCache.getLayerInfo(r3);
    if (null !== e3)
      return e3;
  }
  const n9 = (async () => {
    var _a;
    const r4 = await j(t6 + "/queryDataElements", { method: "post", responseType: "json", query: { layers: JSON.stringify([a6.toString()]), f: "json" } });
    if (r4.data) {
      const e3 = r4.data;
      if ((_a = e3.layerDataElements) == null ? void 0 : _a[0])
        return e3.layerDataElements[0];
    }
    throw new s2(r.DataElementsNotFound);
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(r3, n9);
    try {
      return await n9;
    } catch (i2) {
      throw a2.applicationCache.clearLayerInfo(r3), i2;
    }
  }
  return n9;
}
async function C(t6) {
  if (null !== a2.applicationCache) {
    const e3 = a2.applicationCache.getLayerInfo(t6);
    if (null !== e3)
      return e3;
  }
  const a6 = (async () => {
    const a7 = await j(t6, { responseType: "json", query: { f: "json" } });
    if (a7.data) {
      const e3 = a7.data;
      return e3.layers || (e3.layers = []), e3.tables || (e3.tables = []), e3;
    }
    return { layers: [], tables: [] };
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(t6, a6);
    try {
      return await a6;
    } catch (r3) {
      throw a2.applicationCache.clearLayerInfo(t6), r3;
    }
  }
  return a6;
}
async function T5(e3, t6) {
  var _a, _b, _c;
  const a6 = { metadata: null, networkId: -1, unVersion: 3, terminals: [], queryelem: null, layerNameLkp: {}, lkp: null }, r3 = await C(e3);
  if (a6.metadata = r3, void 0 !== ((_a = r3.controllerDatasetLayers) == null ? void 0 : _a.utilityNetworkLayerId) && null !== r3.controllerDatasetLayers.utilityNetworkLayerId) {
    if (r3.layers)
      for (const e4 of r3.layers)
        a6.layerNameLkp[e4.id] = e4.name;
    if (r3.tables)
      for (const e4 of r3.tables)
        a6.layerNameLkp[e4.id] = e4.name;
    const n9 = r3.controllerDatasetLayers.utilityNetworkLayerId;
    a6.networkId = n9;
    const i2 = await N3(e3, n9);
    if (i2) {
      a6.queryelem = i2, ((_b = a6.queryelem) == null ? void 0 : _b.dataElement) && void 0 !== a6.queryelem.dataElement.schemaGeneration && (a6.unVersion = a6.queryelem.dataElement.schemaGeneration), a6.lkp = {}, a6.queryelem.dataElement.domainNetworks || (a6.queryelem.dataElement.domainNetworks = []);
      for (const e4 of a6.queryelem.dataElement.domainNetworks) {
        for (const t7 of e4.edgeSources ?? []) {
          const e5 = { layerId: t7.layerId, sourceId: t7.sourceId, className: a6.layerNameLkp[t7.layerId] ?? null };
          e5.className && (a6.lkp[e5.className] = e5);
        }
        for (const t7 of e4.junctionSources ?? []) {
          const e5 = { layerId: t7.layerId, sourceId: t7.sourceId, className: a6.layerNameLkp[t7.layerId] ?? null };
          e5.className && (a6.lkp[e5.className] = e5);
        }
      }
      if (a6.queryelem.dataElement.terminalConfigurations)
        for (const e4 of a6.queryelem.dataElement.terminalConfigurations)
          for (const t7 of e4.terminals)
            a6.terminals.push({ terminalId: t7.terminalId, terminalName: t7.terminalName });
      const r4 = await A(e3 + "/" + n9);
      if (void 0 !== ((_c = r4.systemLayers) == null ? void 0 : _c.associationsTableId) && null !== r4.systemLayers.associationsTableId) {
        const n10 = [];
        a6.unVersion >= 4 && (n10.push("STATUS"), n10.push("PERCENTALONG"));
        let i3 = await F3(e3 + "/" + r4.systemLayers.associationsTableId.toString(), t6, ["OBJECTID", "FROMNETWORKSOURCEID", "TONETWORKSOURCEID", "FROMGLOBALID", "TOGLOBALID", "TOTERMINALID", "FROMTERMINALID", "ASSOCIATIONTYPE", "ISCONTENTVISIBLE", "GLOBALID", ...n10], false, null, null);
        return await i3.load(), a6.unVersion >= 4 && (i3 = i3.filter(x.create("STATUS NOT IN (1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63)", i3.getFieldsIndex(), i3.dateFieldsTimeZoneDefaultUTC)), await i3.load()), { lkp: a6.lkp, associations: i3, unVersion: a6.unVersion, terminals: a6.terminals };
      }
      return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
    }
    return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
  }
  return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
}
async function k2(e3, t6, a6, r3 = null, n9 = null, i2 = true, s7 = null, l3 = null) {
  let o = e3.serviceUrl();
  if (!o)
    return null;
  o = "/" === o.charAt(o.length - 1) ? o + t6.relatedTableId.toString() : o + "/" + t6.relatedTableId.toString();
  const u2 = await F3(o, r3, n9, i2, s7, l3);
  return new d6({ layer: e3, relatedLayer: u2, relationship: t6, objectId: a6, spatialReference: r3, outFields: n9, includeGeometry: i2, lrucache: s7, interceptor: l3 });
}
c3.registerAction(), O.registerAction(), a3.registerAction(), f4.registerAction(), a5.registerAction();
var b3 = class extends e {
  constructor(e3, t6 = null, a6 = null, r3 = null) {
    super(), this._map = e3, this._overridespref = t6, this._lrucache = a6, this._interceptor = r3, this._instantLayers = [];
  }
  _makeAndAddFeatureSet(e3, t6 = true, a6 = null) {
    const r3 = g3(e3, this._overridespref, null === a6 ? ["*"] : a6, t6, this._lrucache, this._interceptor);
    return this._instantLayers.push({ featureset: r3, opitem: e3, includeGeometry: t6, outFields: JSON.stringify(a6) }), r3;
  }
  async featureSetByName(e3, t6 = true, r3 = null) {
    if (void 0 !== this._map.loaded && void 0 !== this._map.load && false === this._map.loaded)
      return await this._map.load(), this.featureSetByName(e3, t6, r3);
    null === r3 && (r3 = ["*"]), r3 = (r3 = r3.slice(0)).sort();
    const n9 = JSON.stringify(r3);
    for (let a6 = 0; a6 < this._instantLayers.length; a6++) {
      const r4 = this._instantLayers[a6];
      if (r4.opitem.title === e3 && r4.includeGeometry === t6 && r4.outFields === n9)
        return this._instantLayers[a6].featureset;
    }
    const i2 = [], s7 = this._map.allLayers.find((t7) => {
      if (t7 instanceof Ze) {
        if (t7.title === e3)
          return true;
      } else if (Pe(t7)) {
        if (t7.title === e3)
          return true;
        i2.push(t7);
      }
      return false;
    });
    if (s7)
      return this._makeAndAddFeatureSet(s7, t6, r3);
    if (this._map.tables) {
      const a6 = this._map.tables.find((t7) => !!(t7.title && t7.title === e3 || t7.title && t7.title === e3));
      if (a6) {
        if (a6 instanceof Ze)
          return this._makeAndAddFeatureSet(a6, t6, r3);
        if (a6._materializedTable)
          ;
        else {
          const e4 = a6.outFields ? a6 : { ...a6, outFields: ["*"] };
          a6._materializedTable = new Ze(e4);
        }
        return await a6._materializedTable.load(), this._makeAndAddFeatureSet(a6._materializedTable, t6, r3);
      }
    }
    for (const a6 of i2) {
      if ("not-loaded" === a6.loadStatus || "loading" === a6.loadStatus)
        try {
          await a6.load();
        } catch (l3) {
        }
      const n10 = a6.sublayers.find((t7) => t7.title === e3);
      if (n10)
        return this._makeAndAddFeatureSet(n10, t6, r3);
    }
    return null;
  }
  async featureSetById(e3, t6 = true, r3 = ["*"]) {
    if (void 0 !== this._map.loaded && void 0 !== this._map.load && false === this._map.loaded)
      return await this._map.load(), this.featureSetById(e3, t6, r3);
    null === r3 && (r3 = ["*"]), r3 = (r3 = r3.slice(0)).sort();
    const n9 = JSON.stringify(r3);
    for (let a6 = 0; a6 < this._instantLayers.length; a6++) {
      const r4 = this._instantLayers[a6];
      if (r4.opitem.id === e3 && r4.includeGeometry === t6 && r4.outFields === n9)
        return this._instantLayers[a6].featureset;
    }
    const i2 = [], s7 = this._map.allLayers.find((t7) => {
      if (t7 instanceof Ze) {
        if (t7.id === e3)
          return true;
      } else if (Pe(t7)) {
        if (t7.id === e3)
          return true;
        i2.push(t7);
      }
      return false;
    });
    if (s7)
      return this._makeAndAddFeatureSet(s7, t6, r3);
    if (this._map.tables) {
      const a6 = this._map.tables.find((t7) => t7.id === e3);
      if (a6) {
        if (a6 instanceof Ze)
          return this._makeAndAddFeatureSet(a6, t6, r3);
        if (a6._materializedTable)
          ;
        else {
          const e4 = { ...a6, outFields: ["*"] };
          a6._materializedTable = new Ze(e4);
        }
        return await a6._materializedTable.load(), this._makeAndAddFeatureSet(a6._materializedTable, t6, r3);
      }
    }
    for (const a6 of i2) {
      if ("not-loaded" === a6.loadStatus || "loading" === a6.loadStatus)
        try {
          await a6.load();
        } catch (l3) {
        }
      const n10 = a6.sublayers.find((t7) => t7.id === e3);
      if (n10)
        return this._makeAndAddFeatureSet(n10, t6, r3);
    }
    return null;
  }
};
var O2 = class _O extends e {
  constructor(e3, t6 = null, a6 = null, r3 = null) {
    super(), this._url = e3, this._overridespref = t6, this._lrucache = a6, this._interceptor = r3, this.metadata = null, this._instantLayers = [];
  }
  get url() {
    return this._url;
  }
  _makeAndAddFeatureSet(e3, t6 = true, a6 = null) {
    const r3 = g3(e3, this._overridespref, null === a6 ? ["*"] : a6, t6, this._lrucache);
    return this._instantLayers.push({ featureset: r3, opitem: e3, includeGeometry: t6, outFields: JSON.stringify(a6) }), r3;
  }
  async _loadMetaData() {
    const e3 = await C(this._url);
    return this.metadata = e3, e3;
  }
  load() {
    return this._loadMetaData();
  }
  clone() {
    return new _O(this._url, this._overridespref, this._lrucache, this._interceptor);
  }
  async featureSetByName(e3, t6 = true, a6 = null) {
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice(0)).sort();
    const r3 = JSON.stringify(a6);
    for (let s7 = 0; s7 < this._instantLayers.length; s7++) {
      const a7 = this._instantLayers[s7];
      if (a7.opitem.title === e3 && a7.includeGeometry === t6 && a7.outFields === r3)
        return this._instantLayers[s7].featureset;
    }
    const n9 = await this._loadMetaData();
    let i2 = null;
    for (const s7 of n9.layers ?? [])
      s7.name === e3 && (i2 = s7);
    if (!i2)
      for (const s7 of n9.tables ?? [])
        s7.name === e3 && (i2 = s7);
    if (i2) {
      const e4 = await I3(this._url + "/" + i2.id, ["*"]);
      return this._makeAndAddFeatureSet(e4, t6, a6);
    }
    return null;
  }
  async featureSetById(e3, t6 = true, a6 = ["*"]) {
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice(0)).sort();
    const r3 = JSON.stringify(a6);
    e3 = null != e3 ? e3.toString() : "";
    for (let s7 = 0; s7 < this._instantLayers.length; s7++) {
      const a7 = this._instantLayers[s7];
      if (a7.opitem.id === e3 && a7.includeGeometry === t6 && a7.outFields === r3)
        return this._instantLayers[s7].featureset;
    }
    const n9 = await this._loadMetaData();
    let i2 = null;
    for (const s7 of n9.layers ?? [])
      null !== s7.id && void 0 !== s7.id && s7.id.toString() === e3 && (i2 = s7);
    if (!i2)
      for (const s7 of n9.tables ?? [])
        null !== s7.id && void 0 !== s7.id && s7.id.toString() === e3 && (i2 = s7);
    if (i2) {
      const e4 = await I3(this._url + "/" + i2.id, ["*"]);
      return this._makeAndAddFeatureSet(e4, t6, a6);
    }
    return null;
  }
};
function D3(e3, t6, a6 = null, r3 = null) {
  return new b3(e3, t6, a6, r3);
}
function E3(e3, t6, a6 = null, r3 = null) {
  return new O2(e3, t6, a6, r3);
}
function j2(e3, t6, n9, i2, s7) {
  if (null === e3)
    return null;
  if (e3 instanceof Ze) {
    switch (t6) {
      case "datasource":
        return g3(e3, s7, e3.outFields, true, n9, i2).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return g3(e3, s7, e3.outFields, true, n9, i2);
    }
    return null;
  }
  if (Pe(e3)) {
    switch (t6) {
      case "datasource":
        return g3(e3, s7, e3.outFields, true, n9, i2).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return g3(e3, s7, e3.outFields, true, n9, i2);
    }
    return null;
  }
  if (Ye(e3)) {
    switch (t6) {
      case "datasource":
        return g3(e3.parent, s7, e3.parent.outFields, true, n9, i2).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return g3(e3, s7, e3.parent.outFields, true, n9, i2);
    }
    return null;
  }
  if (e3 instanceof x3)
    switch (t6) {
      case "datasource":
        return e3.getDataSourceFeatureSet();
      case "parent":
        return e3;
      case "root":
        return e3.getRootFeatureSet();
    }
  return null;
}
async function q(e3, t6, a6, r3, n9, i2, s7, l3 = null) {
  if (a2.applicationCache) {
    const o2 = a2.applicationCache.getLayerInfo(e3 + ":" + i2.url);
    if (o2) {
      const e4 = await o2;
      return g3(new Ze({ url: J(e4.url) + "/" + t6, outFields: ["*"] }), a6, r3, n9, s7, l3);
    }
  }
  const o = new S({ id: e3, portal: i2 }).load();
  a2.applicationCache && a2.applicationCache.setLayerInfo(e3 + ":" + i2.url, o);
  try {
    const e4 = await o;
    return g3(new Ze({ url: J(e4.url ?? "") + "/" + t6, outFields: ["*"] }), a6, r3, n9, s7, l3);
  } catch (u2) {
    throw a2.applicationCache && a2.applicationCache.clearLayerInfo(e3 + ":" + i2.url), u2;
  }
}

export {
  e,
  c3 as c,
  I2 as I,
  k,
  b2 as b,
  B,
  L2 as L,
  e2,
  a3 as a,
  a5 as a2,
  f6 as f,
  L3 as L2,
  F3 as F,
  g3 as g,
  T5 as T,
  k2,
  D3 as D,
  E3 as E,
  j2 as j,
  q
};
//# sourceMappingURL=chunk-3NMAAFNR.js.map
