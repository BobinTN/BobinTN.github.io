import {
  $,
  C,
  E,
  P,
  U,
  b,
  d,
  f,
  j,
  k,
  p,
  x
} from "./chunk-AZHRWST4.js";
import "./chunk-PFFV4MXI.js";
import "./chunk-NYTJIWNN.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-HLM2UN42.js";
import "./chunk-5WWPLX36.js";
import "./chunk-UNONG753.js";
import "./chunk-OFRZSMZB.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-A43TI6AT.js";
import "./chunk-BHJVWW2P.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import "./chunk-LXXF7K7W.js";
import "./chunk-SBW6NNVI.js";
import "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/smartMapping/statistics/support/statsWorker.js
async function d2(e) {
  const { attribute: a, features: s } = e, { normalizationType: r, normalizationField: m, minValue: f2, maxValue: u, fieldType: d3 } = a, p3 = await b({ field: a.field, valueExpression: a.valueExpression, normalizationType: r, normalizationField: m, normalizationTotal: a.normalizationTotal, viewInfoParams: a.viewInfoParams, timeZone: a.timeZone, fieldInfos: a.fieldInfos }, s), v2 = f({ normalizationType: r, normalizationField: m, minValue: f2, maxValue: u }), c2 = { value: 0.5, fieldType: d3 }, z2 = "esriFieldTypeString" === d3 ? d({ values: p3, supportsNullCount: v2, percentileParams: c2 }) : p({ values: p3, minValue: f2, maxValue: u, useSampleStdDev: !r, supportsNullCount: v2, percentileParams: c2 });
  return C(z2, "esriFieldTypeDate" === d3);
}
async function p2(e) {
  const { attribute: a, features: n } = e, o = await b({ field: a.field, field2: a.field2, field3: a.field3, fieldDelimiter: a.fieldDelimiter, valueExpression: a.valueExpression, viewInfoParams: a.viewInfoParams, timeZone: a.timeZone, fieldInfos: a.fieldInfos }, n, false), t = k(o);
  return $(t, a.domains, a.returnAllCodedValues, a.fieldDelimiter);
}
async function v(e) {
  const { attribute: a, features: n } = e, { field: o, normalizationType: t, normalizationField: l, normalizationTotal: s, classificationMethod: r } = a, u = await b({ field: o, valueExpression: a.valueExpression, normalizationType: t, normalizationField: l, normalizationTotal: s, viewInfoParams: a.viewInfoParams, timeZone: a.timeZone, fieldInfos: a.fieldInfos }, n), d3 = E(u, { field: o, normalizationType: t, normalizationField: l, normalizationTotal: s, classificationMethod: r, standardDeviationInterval: a.standardDeviationInterval, numClasses: a.numClasses, minValue: a.minValue, maxValue: a.maxValue });
  return P(d3, r);
}
async function c(e) {
  const { attribute: a, features: n } = e, { field: o, normalizationType: t, normalizationField: l, normalizationTotal: s, classificationMethod: r } = a, m = await b({ field: o, valueExpression: a.valueExpression, normalizationType: t, normalizationField: l, normalizationTotal: s, viewInfoParams: a.viewInfoParams, timeZone: a.timeZone, fieldInfos: a.fieldInfos }, n);
  return U(m, { field: o, normalizationType: t, normalizationField: l, normalizationTotal: s, classificationMethod: r, standardDeviationInterval: a.standardDeviationInterval, numBins: a.numBins, minValue: a.minValue, maxValue: a.maxValue });
}
async function z(i) {
  const { attribute: n, features: o } = i, { field: t, radius: l, fieldOffset: s, transform: r, spatialReference: m } = n, f2 = n.size ?? [0, 0], u = j(o ?? [], r, m, f2), { count: d3, min: p3, max: v2, mean: c2, stdDev: z2 } = x(u, l ?? void 0, s, t, f2[0], f2[1]);
  return { count: d3, min: p3, max: v2, avg: c2, stddev: z2 };
}
export {
  v as classBreaks,
  z as heatmapStatistics,
  c as histogram,
  d2 as summaryStatistics,
  p2 as uniqueValues
};
//# sourceMappingURL=statsWorker-RXCKHDZM.js.map
