import {
  I
} from "./chunk-3BAHO36Z.js";
import "./chunk-NI23WAWZ.js";
import "./chunk-ODGAHKYT.js";
import "./chunk-OPV4AZKI.js";
import {
  j,
  t,
  v
} from "./chunk-K4NVR6KM.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-ZBT4RUU7.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-X5VYGREB.js";
import "./chunk-SEKLTVY5.js";
import {
  b
} from "./chunk-45OAWGCA.js";
import "./chunk-X2TA76Q5.js";
import "./chunk-XN6LAULS.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-2AXFVQBN.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-BEALJUHO.js";
import {
  e
} from "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import {
  a2 as a
} from "./chunk-OIIDE5GZ.js";
import {
  u
} from "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import "./chunk-LXXF7K7W.js";
import "./chunk-SBW6NNVI.js";
import "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/features/support/whereUtils.js
var a2 = s.getLogger("esri.views.2d.layers.features.support.whereUtils");
var o = { getAttribute: (e2, r) => e2.readAttribute(r) };
async function s3(r, s4) {
  try {
    const n = await e(r, s4);
    if (!n.isStandardized) {
      const r2 = new s2("mapview - bad input", "Unable to apply filter's definition expression, as expression is not standardized.", n);
      a2.error(r2);
    }
    return (e2) => {
      const r2 = e2.readArcadeFeature();
      return n.testFeature(r2, o);
    };
  } catch (n) {
    return a2.warn("mapview-bad-where-clause", "Encountered an error when evaluating where clause", r), (e2) => true;
  }
}

// node_modules/@arcgis/core/views/2d/layers/features/support/FeatureFilter.js
var d = 1;
var m = 2;
var p = class {
  constructor(t2) {
    this._geometryBounds = u(), this._idToVisibility = /* @__PURE__ */ new Map(), this._serviceInfo = t2;
  }
  get hash() {
    return this._hash;
  }
  check(t2) {
    return this._applyFilter(t2);
  }
  clear() {
    const t2 = this._resetAllHiddenIds();
    return this.update(), { show: t2, hide: [] };
  }
  invalidate() {
    this._idToVisibility.forEach((t2, e2) => {
      this._idToVisibility.set(e2, 0);
    });
  }
  setKnownIds(t2) {
    for (const e2 of t2)
      this._idToVisibility.set(e2, d);
  }
  setTrue(t2) {
    const e2 = [], i = [], s4 = new Set(t2);
    return this._idToVisibility.forEach((t3, r) => {
      const o2 = !!(this._idToVisibility.get(r) & d), h = s4.has(r);
      !o2 && h ? e2.push(r) : o2 && !h && i.push(r), this._idToVisibility.set(r, h ? d | m : 0);
    }), { show: e2, hide: i };
  }
  createQuery() {
    const { geometry: t2, spatialRel: e2, where: i, timeExtent: s4, objectIds: r } = this;
    return b.fromJSON({ geometry: t2, spatialRel: e2, where: i, timeExtent: s4, objectIds: r });
  }
  async update(t2, e2) {
    this._hash = JSON.stringify(t2);
    const i = await j(t2, null, e2);
    await Promise.all([this._setGeometryFilter(i), this._setIdFilter(i), this._setAttributeFilter(i), this._setTimeFilter(i)]);
  }
  async _setAttributeFilter(t2) {
    if (!(t2 == null ? void 0 : t2.where))
      return this._clause = null, void (this.where = null);
    this._clause = await s3(t2.where, this._serviceInfo.fieldsIndex), this.where = t2.where;
  }
  _setIdFilter(t2) {
    this._idsToShow = (t2 == null ? void 0 : t2.objectIds) && new Set(t2.objectIds), this._idsToHide = (t2 == null ? void 0 : t2.hiddenIds) && new Set(t2.hiddenIds), this.objectIds = t2 == null ? void 0 : t2.objectIds;
  }
  async _setGeometryFilter(t2) {
    if (!(t2 == null ? void 0 : t2.geometry))
      return this._spatialQueryOperator = null, this.geometry = null, void (this.spatialRel = null);
    const e2 = t2.geometry, i = t2.spatialRel || "esriSpatialRelIntersects", r = await v(i, e2, this._serviceInfo.geometryType, this._serviceInfo.hasZ, this._serviceInfo.hasM);
    a(this._geometryBounds, e2), this._spatialQueryOperator = r, this.geometry = e2, this.spatialRel = i;
  }
  _setTimeFilter(i) {
    if (this.timeExtent = this._timeOperator = null, i == null ? void 0 : i.timeExtent)
      if (this._serviceInfo.timeInfo)
        this.timeExtent = i.timeExtent, this._timeOperator = t(this._serviceInfo.timeInfo, i.timeExtent, I);
      else {
        const s4 = new s2("feature-layer-view:time-filter-not-available", "Unable to apply time filter, as layer doesn't have time metadata.", i.timeExtent);
        s.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter").error(s4);
      }
  }
  _applyFilter(t2) {
    return this._filterByGeometry(t2) && this._filterById(t2) && this._filterByTime(t2) && this._filterByExpression(t2);
  }
  _filterByExpression(t2) {
    return !this.where || this._clause(t2);
  }
  _filterById(t2) {
    var _a, _b;
    return (!((_a = this._idsToHide) == null ? void 0 : _a.size) || !this._idsToHide.has(t2.getObjectId())) && (!((_b = this._idsToShow) == null ? void 0 : _b.size) || this._idsToShow.has(t2.getObjectId()));
  }
  _filterByGeometry(t2) {
    if (!this.geometry)
      return true;
    const e2 = t2.readHydratedGeometry();
    return !!e2 && this._spatialQueryOperator(e2);
  }
  _filterByTime(t2) {
    return null == this._timeOperator || this._timeOperator(t2);
  }
  _resetAllHiddenIds() {
    const t2 = [];
    return this._idToVisibility.forEach((e2, i) => {
      e2 & d || (this._idToVisibility.set(i, d), t2.push(i));
    }), t2;
  }
};
export {
  p as default
};
//# sourceMappingURL=FeatureFilter-KF4SJHPX.js.map
