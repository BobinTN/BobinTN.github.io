import {
  m,
  p
} from "./chunk-673OQ2U7.js";
import {
  n
} from "./chunk-APYNYYQC.js";
import {
  _
} from "./chunk-6TJWLWLO.js";
import {
  g,
  s as s2,
  v
} from "./chunk-RFPH3ZTZ.js";
import {
  s3 as s
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/webdoc/support/saveUtils.js
async function u(e, r, o = null) {
  const t = await i(e, r, o);
  await h(t, r, o);
}
async function p2(e, r, o, t, s3 = null) {
  const a = await i(o, t, s3);
  await e.update({ data: r }), await h(a, t, s3);
}
async function i(e, s3, n2 = null) {
  if (!(s3 == null ? void 0 : s3.resources))
    return;
  const u2 = s3.portalItem === e.portalItem ? new Set(e.paths) : /* @__PURE__ */ new Set();
  e.paths.length = 0, e.portalItem = s3.portalItem;
  const p3 = new Set(s3.resources.toKeep.map((e2) => e2.resource.path)), i2 = /* @__PURE__ */ new Set(), h2 = [];
  p3.forEach((r) => {
    u2.delete(r), e.paths.push(r);
  });
  for (const r of s3.resources.toUpdate)
    if (u2.delete(r.resource.path), p3.has(r.resource.path) || i2.has(r.resource.path)) {
      const { resource: o, content: t, finish: s4, error: u3 } = r, p4 = m(o, n());
      e.paths.push(p4.path), h2.push(f({ resource: p4, content: t, compress: r.compress, finish: s4, error: u3 }, n2));
    } else
      e.paths.push(r.resource.path), h2.push(l(r, n2)), i2.add(r.resource.path);
  for (const r of s3.resources.toAdd)
    e.paths.push(r.resource.path), u2.has(r.resource.path) ? u2.delete(r.resource.path) : h2.push(f(r, n2));
  if (0 === h2.length)
    return u2;
  const m3 = await g(h2);
  if (s2(n2), m3.length > 0)
    throw new s("save:resources", "Failed to save one or more resources", { errors: m3 });
  return u2;
}
async function h(e, r, o = null) {
  if (!e || !r.portalItem)
    return;
  const t = [];
  for (const s3 of e) {
    const e2 = r.portalItem.resourceFromPath(s3);
    t.push(e2.portalItem.removeResource(e2, o));
  }
  await v(t);
}
async function f(r, o) {
  var _a, _b;
  const t = { ...null != o ? o : {}, compress: r.compress }, s3 = await _(r.resource.portalItem.addResource(r.resource, await p(r.content), t));
  if (true !== s3.ok)
    throw (_a = r.error) == null ? void 0 : _a.call(r, s3.error), s3.error;
  (_b = r.finish) == null ? void 0 : _b.call(r, r.resource);
}
async function l(r, o) {
  var _a, _b;
  const t = await _(r.resource.update(await p(r.content), o));
  if (true !== t.ok)
    throw (_a = r.error) == null ? void 0 : _a.call(r, t.error), t.error;
  (_b = r.finish) == null ? void 0 : _b.call(r, r.resource);
}
async function m2(e) {
  const r = [];
  for (const o of e.allLayers)
    if ("beforeSave" in o && "function" == typeof o.beforeSave) {
      const e2 = o.beforeSave();
      e2 && r.push(e2);
    }
  await Promise.allSettled(r);
}

export {
  u,
  p2 as p,
  m2 as m
};
//# sourceMappingURL=chunk-ZKKM4KJT.js.map
