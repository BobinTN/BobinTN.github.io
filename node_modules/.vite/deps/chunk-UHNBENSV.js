import {
  n2 as n,
  p,
  v
} from "./chunk-GDKL26HH.js";
import {
  o
} from "./chunk-V2RPSCV3.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/renderers/SimpleRenderer.js
var c2;
var n2 = c2 = class extends v(p) {
  constructor(e2) {
    super(e2), this.description = null, this.label = null, this.symbol = null, this.type = "simple";
  }
  async collectRequiredFields(e2, s) {
    await Promise.all([this.collectSymbolFields(e2, s), this.collectVVRequiredFields(e2, s)]);
  }
  async collectSymbolFields(e2, s) {
    await Promise.all(this.getSymbols().map((r) => r.collectRequiredFields(e2, s)));
  }
  getSymbol(e2, s) {
    return this.symbol;
  }
  async getSymbolAsync(e2, s) {
    return this.symbol;
  }
  getSymbols() {
    return this.symbol ? [this.symbol] : [];
  }
  getAttributeHash() {
    return this.visualVariables && this.visualVariables.reduce((e2, s) => e2 + s.getAttributeHash(), "");
  }
  getMeshHash() {
    return this.getSymbols().reduce((e2, s) => e2 + JSON.stringify(s), "");
  }
  get arcadeRequired() {
    return this.arcadeRequiredForVisualVariables;
  }
  clone() {
    return new c2({ description: this.description, label: this.label, symbol: this.symbol && this.symbol.clone(), visualVariables: a(this.visualVariables), authoringInfo: this.authoringInfo && this.authoringInfo.clone() });
  }
};
e([y({ type: String, json: { write: true } })], n2.prototype, "description", void 0), e([y({ type: String, json: { write: true } })], n2.prototype, "label", void 0), e([y(n)], n2.prototype, "symbol", void 0), e([o({ simple: "simple" })], n2.prototype, "type", void 0), n2 = c2 = e([c("esri.renderers.SimpleRenderer")], n2);
var p2 = n2;

export {
  p2 as p
};
//# sourceMappingURL=chunk-UHNBENSV.js.map
