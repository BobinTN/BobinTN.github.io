import {
  i
} from "./chunk-R6XZFUCV.js";
import "./chunk-UGJNQG6H.js";
import {
  re
} from "./chunk-VGF3CFL5.js";
import "./chunk-HBFRNOJQ.js";
import "./chunk-EQVODNOJ.js";
import "./chunk-MPQZTJY3.js";
import "./chunk-HU7IF5IM.js";
import "./chunk-BIFYNKHZ.js";
import {
  m as m2,
  u
} from "./chunk-SBC4OSBO.js";
import "./chunk-IF6ORLWU.js";
import "./chunk-AZKAB65C.js";
import "./chunk-BV5PCIP6.js";
import {
  C,
  O,
  S2 as S,
  T,
  c as c2,
  j2 as j,
  m
} from "./chunk-ORSLHIYT.js";
import "./chunk-BXZIEADJ.js";
import "./chunk-L7TO2DFS.js";
import "./chunk-A6KO3R3G.js";
import "./chunk-T56C4ORZ.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-JWWTIFGY.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-NI23WAWZ.js";
import "./chunk-GBFYGM27.js";
import "./chunk-5JUAGSVT.js";
import "./chunk-HVJP4M5N.js";
import "./chunk-2M3E5AI7.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-BRF3NTLN.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-GSATUKJ4.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-WR3GXMXV.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-46VITINB.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import "./chunk-RCLKRKWR.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-JLSYG6MV.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import "./chunk-ZBT4RUU7.js";
import "./chunk-DZE6ZO7Z.js";
import "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import "./chunk-EY7PGBJG.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-DYYHVSPV.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-DCL3YBJN.js";
import "./chunk-3ZWLSDVT.js";
import "./chunk-P3R45ANF.js";
import "./chunk-2CL4LRYG.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-ICVVQFO6.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-OCLKX5SY.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-2Q2Q2Z4U.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-M7OEQQRX.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import {
  l
} from "./chunk-2AXTYAMY.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-FWR4JURK.js";
import "./chunk-BELGAUAK.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-HITXLR5N.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-4TSAC52K.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  P,
  d
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import {
  V
} from "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  e as e2
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import "./chunk-WJ3HJKNC.js";
import {
  k
} from "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var k2 = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var M = { graphic: null, property: null, oldValue: null, newValue: null };
function V2(t) {
  return t instanceof m || t instanceof c2 || t instanceof C || t instanceof T || t instanceof j || t instanceof S || t instanceof O;
}
function j2(t) {
  return V.isCollection(t) && t.length && V2(t.at(0));
}
function v(t) {
  return Array.isArray(t) && t.length > 0 && V2(t[0]);
}
var G = class extends m2(u) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map();
  }
  get _routeItems() {
    return new l({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this._updatingHandles.addOnCollectionChange(() => this._routeItems, (t) => this._routeItemsChanged(t), P);
  }
  destroy() {
    var _a;
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), (_a = this._get("_routeItems")) == null ? void 0 : _a.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView();
  }
  async fetchPopupFeatures(t) {
    return this._graphicsView.hitTest(t).filter((t2) => !!t2.popupTemplate);
  }
  highlight(t) {
    let r;
    r = V2(t) ? [this._getNetworkFeatureUid(t)] : v(t) ? t.map((t2) => this._getNetworkFeatureUid(t2)) : j2(t) ? t.map((t2) => this._getNetworkFeatureUid(t2)).toArray() : [t.uid];
    const i2 = r.filter(k);
    return i2.length ? (this._addHighlight(i2), e2(() => this._removeHighlight(i2))) : e2();
  }
  async hitTest(t, r) {
    if (this.suspended)
      return null;
    const i2 = this._graphicsView.hitTest(t).filter(k).map((t2) => this._networkGraphicMap.get(t2));
    if (!i2.length)
      return null;
    const { layer: s } = this;
    return i2.reverse().map((e3) => ({ type: "route", layer: s, mapPoint: t, networkFeature: e3 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveStart() {
  }
  moveEnd() {
  }
  update(t) {
    this._graphicsView.processUpdate(t);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t) {
    for (const e3 of t)
      if (this._highlightIds.has(e3)) {
        const t2 = this._highlightIds.get(e3);
        this._highlightIds.set(e3, t2 + 1);
      } else
        this._highlightIds.set(e3, 1);
    this._updateHighlight();
  }
  _createGraphic(t) {
    const e3 = t.toGraphic();
    return e3.layer = this.layer, e3.sourceLayer = this.layer, e3;
  }
  _createGraphicsView() {
    const t = this.view, e3 = () => this.requestUpdate(), r = new i(t.featuresTilingScheme);
    this._graphicsView = new re({ container: r, graphics: this._graphics, requestUpdateCallback: e3, view: t }), this.container.addChild(r), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t) {
    const e3 = this._networkGraphicMap.get(t);
    return k2.indexOf(e3.type);
  }
  _getNetworkFeatureUid(t) {
    return this._networkFeatureMap.has(t) ? this._networkFeatureMap.get(t).uid : null;
  }
  _removeHighlight(t) {
    for (const e3 of t)
      if (this._highlightIds.has(e3)) {
        const t2 = this._highlightIds.get(e3) - 1;
        0 === t2 ? this._highlightIds.delete(e3) : this._highlightIds.set(e3, t2);
      }
    this._updateHighlight();
  }
  _routeItemsChanged(t) {
    if (t.removed.length) {
      this._graphics.removeMany(t.removed.map((t2) => {
        const e3 = this._networkFeatureMap.get(t2);
        return this._networkFeatureMap.delete(t2), this._networkGraphicMap.delete(e3), e3;
      }));
      for (const e3 of t.removed)
        this.removeHandles(e3);
    }
    if (t.added.length) {
      this._graphics.addMany(t.added.map((t2) => {
        const e3 = this._createGraphic(t2);
        return null == e3.symbol ? null : (this._networkFeatureMap.set(t2, e3), this._networkGraphicMap.set(e3, t2), e3);
      }).filter(k));
      for (const e3 of t.added)
        this.addHandles([d(() => e3.geometry, (t2, r) => {
          this._updateGraphic(e3, "geometry", t2, r);
        }), d(() => e3.symbol, (t2, r) => {
          this._updateGraphic(e3, "symbol", t2, r);
        })], e3);
      this._graphics.sort((t2, e3) => this._getDrawOrder(t2) - this._getDrawOrder(e3));
    }
  }
  _updateGraphic(t, e3, r, i2) {
    if (!this._networkFeatureMap.has(t)) {
      const e4 = this._createGraphic(t);
      return this._networkFeatureMap.set(t, e4), this._networkGraphicMap.set(e4, t), void this._graphics.add(e4);
    }
    const s = this._networkFeatureMap.get(t);
    s[e3] = r, M.graphic = s, M.property = e3, M.oldValue = i2, M.newValue = r, this._graphicsView.graphicUpdateHandler(M);
  }
  _updateHighlight() {
    const t = Array.from(this._highlightIds.keys());
    this._graphicsView.setHighlight(t);
  }
};
e([y()], G.prototype, "_graphics", void 0), e([y()], G.prototype, "_routeItems", null), G = e([c("esri.views.2d.layers.RouteLayerView2D")], G);
var I = G;
export {
  I as default
};
//# sourceMappingURL=RouteLayerView2D-LVP2PFG5.js.map
