import {
  p
} from "./chunk-LBDV3JOS.js";
import {
  m3 as m
} from "./chunk-OIIDE5GZ.js";
import {
  o
} from "./chunk-WURET5CW.js";
import {
  r
} from "./chunk-QWPLZ3QH.js";
import {
  f
} from "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";

// node_modules/@arcgis/core/rest/networks/support/Association.js
var m2 = class extends f {
  constructor(o2) {
    super(o2), this.globalId = null, this.associationType = null, this.fromNetworkElement = null, this.toNetworkElement = null, this.geometry = null, this.errorMessage = null, this.percentAlong = null, this.errorCode = null, this.isContentVisible = null, this.status = null;
  }
  readFromNetworkElement(o2, e2) {
    const r2 = new p();
    return r2.globalId = e2.fromGlobalId, r2.networkSourceId = e2.fromNetworkSourceId, r2.terminalId = e2.fromTerminalId, r2;
  }
  writeFromNetworkElement(o2, e2) {
    o2 && (e2.fromGlobalId = o2.globalId, e2.fromNetworkSourceId = o2.networkSourceId, e2.fromTerminalId = o2.terminalId);
  }
  readToNetworkElement(o2, e2) {
    const r2 = new p();
    return r2.globalId = e2.toGlobalId, r2.networkSourceId = e2.toNetworkSourceId, r2.terminalId = e2.toTerminalId, r2;
  }
  writeToNetworkElement(o2, e2) {
    o2 && (e2.toGlobalId = o2.globalId, e2.toNetworkSourceId = o2.networkSourceId, e2.toTerminalId = o2.terminalId);
  }
};
e([y({ type: String, json: { write: true } })], m2.prototype, "globalId", void 0), e([y({ type: ["attachment", "connectivity", "containment"], json: { write: true } })], m2.prototype, "associationType", void 0), e([y({ type: p, json: { write: { target: { fromGlobalId: { type: String }, fromNetworkSourceId: { type: Number }, fromTerminalId: { type: Number } } }, read: { source: ["fromGlobalId", "fromNetworkSourceId", "fromTerminalId"] } } })], m2.prototype, "fromNetworkElement", void 0), e([o("fromNetworkElement")], m2.prototype, "readFromNetworkElement", null), e([r("fromNetworkElement")], m2.prototype, "writeFromNetworkElement", null), e([y({ type: p, json: { write: { target: { toGlobalId: { type: String }, toNetworkSourceId: { type: Number }, toTerminalId: { type: Number } } }, read: { source: ["toGlobalId", "toNetworkSourceId", "toTerminalId"] } } })], m2.prototype, "toNetworkElement", void 0), e([o("toNetworkElement")], m2.prototype, "readToNetworkElement", null), e([r("toNetworkElement")], m2.prototype, "writeToNetworkElement", null), e([y({ type: m, json: { write: true } })], m2.prototype, "geometry", void 0), e([y({ type: String, json: { write: true } })], m2.prototype, "errorMessage", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "percentAlong", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "errorCode", void 0), e([y({ type: Boolean, json: { write: true } })], m2.prototype, "isContentVisible", void 0), e([y({ type: Number, json: { write: true } })], m2.prototype, "status", void 0), m2 = e([c("esri.rest.networks.support.Association")], m2);
var p2 = m2;

export {
  p2 as p
};
//# sourceMappingURL=chunk-H6KFOOBX.js.map
