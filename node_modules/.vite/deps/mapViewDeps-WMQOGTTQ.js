import {
  N,
  o as o4
} from "./chunk-F3L5SDRN.js";
import {
  i as i9
} from "./chunk-R6XZFUCV.js";
import {
  n as n4
} from "./chunk-FUZOO24T.js";
import {
  J,
  a,
  a2,
  e as e8,
  m as m2,
  n as n7,
  n2 as n8,
  r as r6,
  r2 as r7,
  t as t8,
  t2 as t9,
  y
} from "./chunk-6RBC3ROY.js";
import "./chunk-UQHFLGCY.js";
import "./chunk-UGJNQG6H.js";
import {
  re
} from "./chunk-VGF3CFL5.js";
import {
  i as i8
} from "./chunk-DOYHEHQS.js";
import "./chunk-HBFRNOJQ.js";
import "./chunk-EQVODNOJ.js";
import "./chunk-MPQZTJY3.js";
import "./chunk-HU7IF5IM.js";
import "./chunk-BIFYNKHZ.js";
import {
  m,
  n as n5,
  n3 as n6,
  t3 as t6,
  t4 as t7,
  w as w2
} from "./chunk-IF6ORLWU.js";
import {
  h as h3,
  i as i6,
  i2 as i7,
  o as o3,
  t as t5
} from "./chunk-AZKAB65C.js";
import {
  e2 as e7,
  f as f2
} from "./chunk-BV5PCIP6.js";
import {
  i as i5
} from "./chunk-O2FQJXDX.js";
import "./chunk-TKUQYK2U.js";
import "./chunk-R72HXU5Y.js";
import "./chunk-DRBYLQY3.js";
import "./chunk-L7TO2DFS.js";
import {
  t as t3
} from "./chunk-V4OCWQ27.js";
import "./chunk-PTWYQEPE.js";
import "./chunk-DJ3H5D5X.js";
import "./chunk-BNTQULGG.js";
import {
  E as E4,
  h as h2,
  i as i3,
  i2 as i4
} from "./chunk-A6KO3R3G.js";
import {
  T as T2,
  e2 as e5
} from "./chunk-T56C4ORZ.js";
import "./chunk-RN5RTM2J.js";
import "./chunk-N3XMQQIW.js";
import {
  L as L3
} from "./chunk-X2WF3O7G.js";
import "./chunk-MGMW5F44.js";
import "./chunk-JWWTIFGY.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-NI23WAWZ.js";
import "./chunk-ODGAHKYT.js";
import "./chunk-GBFYGM27.js";
import "./chunk-MXOY2B3L.js";
import "./chunk-5JIGIHKI.js";
import "./chunk-NB4VIBDC.js";
import "./chunk-5JUAGSVT.js";
import "./chunk-HVJP4M5N.js";
import "./chunk-2M3E5AI7.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-BRF3NTLN.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-GSATUKJ4.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-WR3GXMXV.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import {
  E as E3,
  S,
  T
} from "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-46VITINB.js";
import {
  E as E2,
  F as F2,
  L as L2,
  M as M3,
  Q,
  R as R2,
  _,
  qe,
  ze
} from "./chunk-XFC7DZXI.js";
import {
  t as t2
} from "./chunk-PPQAHSM4.js";
import {
  B,
  C as C2,
  D,
  E,
  F,
  G,
  I,
  L,
  O,
  P as P2,
  R,
  U
} from "./chunk-RCLKRKWR.js";
import "./chunk-OYPRFNII.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import {
  e as e9,
  w as w3
} from "./chunk-YMGMMZM2.js";
import "./chunk-2S2NELNV.js";
import {
  e as e6
} from "./chunk-3II2L7GF.js";
import "./chunk-JLSYG6MV.js";
import {
  e as e4
} from "./chunk-76KPSQLT.js";
import {
  n as n3,
  t as t4
} from "./chunk-MVXU4PVF.js";
import "./chunk-ZBT4RUU7.js";
import {
  s as s3
} from "./chunk-SBUFDP7O.js";
import "./chunk-DZE6ZO7Z.js";
import "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import {
  c,
  e as e3,
  i as i2,
  n as n2
} from "./chunk-EY7PGBJG.js";
import "./chunk-6M5DUIJQ.js";
import {
  r as r5
} from "./chunk-CMGHBCKF.js";
import {
  M as M2,
  f,
  h,
  l as l2
} from "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import {
  r as r4
} from "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-DYYHVSPV.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-DCL3YBJN.js";
import "./chunk-3ZWLSDVT.js";
import "./chunk-P3R45ANF.js";
import "./chunk-2CL4LRYG.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-ICVVQFO6.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-OCLKX5SY.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-2Q2Q2Z4U.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-M7OEQQRX.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-J2R5B4T4.js";
import "./chunk-JIDGV6CL.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-FWR4JURK.js";
import "./chunk-BELGAUAK.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-HITXLR5N.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-4TSAC52K.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import {
  u as u2
} from "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import {
  M,
  i
} from "./chunk-MKW4ORPJ.js";
import {
  n,
  o as o2
} from "./chunk-YTH6VA7N.js";
import {
  r as r3
} from "./chunk-GINTRQSD.js";
import {
  P,
  d as d2
} from "./chunk-TBSVVR6M.js";
import {
  d
} from "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import {
  o
} from "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import {
  Pt,
  j
} from "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  e,
  v
} from "./chunk-LXXF7K7W.js";
import "./chunk-SBW6NNVI.js";
import "./chunk-62CXLI6S.js";
import {
  C,
  r as r2,
  s as s2,
  t,
  w
} from "./chunk-RFPH3ZTZ.js";
import {
  e as e2,
  l,
  r,
  u
} from "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s3 as s
} from "./chunk-WJ3HJKNC.js";
import {
  has,
  p
} from "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/engine/ManagedCanvas.js
var l3 = class {
  constructor(a6) {
    this.events = new o(), this._hasMajorPerformanceCaveat = false, this._lastRenderFrameCounter = 0, this._canvas = document.createElement("canvas"), this._canvas.setAttribute("style", "width: 100%; height:100%; display:block; willChange:transform");
    const r9 = { failIfMajorPerformanceCaveat: true, alpha: true, antialias: false, depth: true, stencil: true };
    a6.appendChild(this._canvas);
    let i14 = t4("2d", this._canvas, r9);
    i14 || (i14 = t4("2d", this._canvas, { ...r9, failIfMajorPerformanceCaveat: false }), this._hasMajorPerformanceCaveat = true), this._gl = i14, this._handles = t([r2(this._canvas, "webglcontextlost", (e10) => this.events.emit("webgl-context-lost", e10))]);
  }
  destroy() {
    var _a;
    (_a = this._canvas.parentNode) == null ? void 0 : _a.removeChild(this._canvas), this._canvas = null, this._handles.remove(), this._gl = null;
  }
  get gl() {
    return this._gl;
  }
  render(e10, t12) {
    if (this._hasMajorPerformanceCaveat || has("esri-force-performance-mode")) {
      if (++this._lastRenderFrameCounter >= has("esri-performance-mode-frames-between-render") && (t12(), this._lastRenderViewState = e10.state.clone(), this._lastRenderFrameCounter = 0), this._lastRenderViewState) {
        const [t13, s9, a6, r9, i14, n13] = this._computeViewTransform(this._lastRenderViewState, e10.state);
        this._canvas.style.transform = `matrix(${t13}, ${s9}, ${a6}, ${r9}, ${i14}, ${n13})`;
      }
    } else
      t12();
  }
  resize(e10) {
    const t12 = this._canvas, s9 = t12.style, { state: { size: a6 }, pixelRatio: r9 } = e10, i14 = a6[0], n13 = a6[1], o11 = Math.round(i14 * r9), h9 = Math.round(n13 * r9);
    t12.width === o11 && t12.height === h9 || (t12.width = o11, t12.height = h9), s9.width = i14 + "px", s9.height = n13 + "px";
  }
  _computeViewTransform(e10, t12) {
    const [s9, c5] = e10.center, [l8, m4] = t12.center, [d5, f6] = e10.toScreen([0, 0], l8, m4), [_5, v3] = e10.toScreen([0, 0], s9, c5), p2 = _5 - d5, u7 = v3 - f6, w4 = e10.scale / t12.scale, g2 = t12.rotation - e10.rotation, j4 = e6();
    return n2(j4), c(j4, j4, [w4, w4]), e3(j4, j4, M(g2)), i2(j4, j4, [p2, u7]), j4;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/Programs.js
var t10 = (e10) => n4({ ID: e10.id, PATTERN: e10.pattern });
var a3 = { shaders: (r9) => ({ vertexShader: t10(r9) + n7("background/background.vert"), fragmentShader: t10(r9) + n7("background/background.frag") }) };
var d3 = (e10) => n4({ ID: e10.id });
var i10 = { shaders: (r9) => ({ vertexShader: d3(r9) + n7("circle/circle.vert"), fragmentShader: d3(r9) + n7("circle/circle.frag") }) };
var n9 = (e10) => n4({ ID: e10.id, PATTERN: e10.pattern });
var l4 = { shaders: (r9) => ({ vertexShader: n9(r9) + n7("fill/fill.vert"), fragmentShader: n9(r9) + n7("fill/fill.frag") }) };
var s4 = (e10) => n4({ ID: e10.id });
var f3 = { shaders: (r9) => ({ vertexShader: s4(r9) + n7("outline/outline.vert"), fragmentShader: s4(r9) + n7("outline/outline.frag") }) };
var h4 = (e10) => n4({ ID: e10.id, SDF: e10.sdf });
var o5 = { shaders: (r9) => ({ vertexShader: h4(r9) + n7("icon/icon.vert"), fragmentShader: h4(r9) + n7("icon/icon.frag") }) };
var g = (e10) => n4({ ID: e10.id, PATTERN: e10.pattern, SDF: e10.sdf });
var c2 = { shaders: (r9) => ({ vertexShader: g(r9) + n7("line/line.vert"), fragmentShader: g(r9) + n7("line/line.frag") }) };
var S2 = (e10) => n4({ ID: e10.id });
var v2 = { shaders: (r9) => ({ vertexShader: S2(r9) + n7("text/text.vert"), fragmentShader: S2(r9) + n7("text/text.frag") }) };

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLMaterialManager.js
var o6 = class {
  constructor() {
    this._programByKey = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._programByKey.forEach((e10) => e10.dispose()), this._programByKey.clear();
  }
  getMaterialProgram(e10, r9, t12) {
    const a6 = r9.key << 3 | this._getMaterialOptionsValue(r9.type, t12);
    if (this._programByKey.has(a6))
      return this._programByKey.get(a6);
    const s9 = this._getProgramTemplate(r9.type), { shaders: n13 } = s9, { vertexShader: c5, fragmentShader: i14 } = n13(t12), o11 = r9.getShaderHeader(), u7 = r9.getShaderMain(), p2 = c5.replace("#pragma header", o11).replace("#pragma main", u7), g2 = e10.programCache.acquire(p2, i14, r9.getAttributeLocations());
    return this._programByKey.set(a6, g2), g2;
  }
  _getMaterialOptionsValue(r9, t12) {
    switch (r9) {
      case L3.BACKGROUND: {
        const e10 = t12;
        return (e10.pattern ? 1 : 0) << 1 | (e10.id ? 1 : 0);
      }
      case L3.FILL: {
        const e10 = t12;
        return (e10.pattern ? 1 : 0) << 1 | (e10.id ? 1 : 0);
      }
      case L3.OUTLINE:
        return t12.id ? 1 : 0;
      case L3.LINE: {
        const e10 = t12;
        return (e10.sdf ? 1 : 0) << 2 | (e10.pattern ? 1 : 0) << 1 | (e10.id ? 1 : 0);
      }
      case L3.ICON: {
        const e10 = t12;
        return (e10.sdf ? 1 : 0) << 1 | (e10.id ? 1 : 0);
      }
      case L3.CIRCLE:
        return t12.id ? 1 : 0;
      case L3.TEXT:
        return t12.id ? 1 : 0;
      default:
        return 0;
    }
  }
  _getProgramTemplate(o11) {
    switch (o11) {
      case L3.BACKGROUND:
        return a3;
      case L3.CIRCLE:
        return i10;
      case L3.FILL:
        return l4;
      case L3.ICON:
        return o5;
      case L3.LINE:
        return c2;
      case L3.OUTLINE:
        return f3;
      case L3.TEXT:
        return v2;
      default:
        return null;
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/BitBlitRenderer.js
var _2 = class {
  constructor() {
    this._initialized = false;
  }
  dispose() {
    this._program = r(this._program), this._vertexArrayObject = r(this._vertexArrayObject);
  }
  render(r9, t12, e10, i14) {
    r9 && (this._initialized || this._initialize(r9), r9.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), r9.bindVAO(this._vertexArrayObject), r9.useProgram(this._program), t12.setSamplingMode(e10), r9.bindTexture(t12, 0), this._program.setUniform1i("u_tex", 0), this._program.setUniform1f("u_opacity", i14), r9.drawArrays(E.TRIANGLE_STRIP, 0, 4), r9.bindTexture(null, 0), r9.bindVAO());
  }
  _initialize(r9) {
    if (this._initialized)
      return true;
    const s9 = e7(r9, e8);
    if (!s9)
      return false;
    const o11 = new Int8Array(16);
    o11[0] = -1, o11[1] = -1, o11[2] = 0, o11[3] = 0, o11[4] = 1, o11[5] = -1, o11[6] = 1, o11[7] = 0, o11[8] = -1, o11[9] = 1, o11[10] = 0, o11[11] = 1, o11[12] = 1, o11[13] = 1, o11[14] = 1, o11[15] = 1;
    const _5 = e8.attributes, p2 = new f2(r9, _5, t7, { geometry: h2.createVertex(r9, F.STATIC_DRAW, o11) });
    return this._program = s9, this._vertexArrayObject = p2, this._initialized = true, true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/MaterialManager.js
var t11 = (e10) => e10 === T.HITTEST || e10 === T.LABEL_ALPHA;
var a4 = (e10) => (t11(e10) ? 1 : 0) | (e10 === T.HIGHLIGHT ? 2 : 0);
var s5 = ({ rendererInfo: r9, drawPhase: e10 }, t12, s9) => `${t12.getVariationHash()}-${a4(e10)}-${r9.getVariationHash()}-${null != s9 && s9.join(".")}`;
var o7 = (e10, a6, s9, o11 = {}) => {
  if (o11 = { ...o11, ...a6.getVariation(), ...e10.rendererInfo.getVariation(), highlight: e10.drawPhase === T.HIGHLIGHT, id: t11(e10.drawPhase) }, null != s9)
    for (const r9 of s9)
      o11[r9] = true;
  return o11;
};
var i11 = class {
  constructor(r9) {
    this._rctx = r9, this._programByKey = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._programByKey.forEach((r9) => r9.dispose()), this._programByKey.clear();
  }
  getProgram(r9, t12 = []) {
    const a6 = r9.vsPath + "." + r9.fsPath + JSON.stringify(t12);
    if (this._programByKey.has(a6))
      return this._programByKey.get(a6);
    const s9 = { ...t12.map((r10) => "string" == typeof r10 ? { name: r10, value: true } : r10).reduce((r10, e10) => ({ ...r10, [e10.name]: e10.value }), {}) }, { vsPath: o11, fsPath: i14, attributes: h9 } = r9, n13 = o4(o11, i14, h9, s9), g2 = this._rctx.programCache.acquire(n13.shaders.vertexShader, n13.shaders.fragmentShader, n13.attributes);
    if (!g2)
      throw new Error("Unable to get program for key: ${key}");
    return this._programByKey.set(a6, g2), g2;
  }
  getMaterialProgram(r9, t12, a6, i14, h9) {
    const n13 = s5(r9, t12, h9);
    if (this._programByKey.has(n13))
      return this._programByKey.get(n13);
    const g2 = o7(r9, t12, h9, { ignoresSamplerPrecision: r9.context.driverTest.ignoresSamplerPrecision.result }), m4 = o4(a6, a6, i14, g2), y2 = this._rctx.programCache.acquire(m4.shaders.vertexShader, m4.shaders.fragmentShader, m4.attributes);
    if (!y2)
      throw new Error("Unable to get program for key: ${key}");
    return this._programByKey.set(n13, y2), y2;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/TextureUploadManager.js
var n10 = class {
  constructor(e10, t12) {
    this._queue = [], this._context = e10, this._refreshable = t12;
  }
  destroy() {
    this._queue = [];
  }
  enqueueTextureUpdate(o11, n13) {
    const h9 = C(), i14 = o11, a6 = qe, c5 = Math.ceil(i14.height / a6);
    if (s2(n13), this._context.type === n3.WEBGL1)
      this._queue.push({ type: "no-chunk", request: o11, resolver: h9, options: n13 });
    else
      for (let e10 = 0; e10 < c5; e10++) {
        const t12 = e10 * a6, s9 = e10 === c5 - 1, u7 = s9 ? i14.height - a6 * e10 : a6;
        this._queue.push({ type: "chunk", request: o11, resolver: h9, chunk: e10, chunkOffset: t12, destHeight: u7, chunkIsLast: s9, options: n13 });
      }
    return w(n13, (e10) => h9.reject(e10)), h9.promise;
  }
  upload() {
    let e10 = 0;
    for (; this._queue.length; ) {
      const t12 = performance.now(), s9 = this._queue.shift();
      if (s9) {
        if (null != s9.options.signal && s9.options.signal.aborted)
          continue;
        switch (s9.type) {
          case "chunk":
            this._uploadChunk(s9);
            break;
          case "no-chunk":
            this._uploadNoChunk(s9);
        }
        const u7 = performance.now() - t12;
        if (e10 += u7, e10 + u7 >= ze)
          break;
      }
    }
    this._queue.length && this._refreshable.requestRender();
  }
  _uploadChunk(e10) {
    const { request: t12, resolver: s9, chunkOffset: o11, chunkIsLast: u7, destHeight: r9 } = e10, { data: n13, texture: h9, width: i14 } = t12;
    null != n13 && (h9.updateData(0, 0, o11, i14, r9, n13, o11), u7 && s9.resolve());
  }
  _uploadNoChunk(e10) {
    const { request: t12, resolver: s9 } = e10, { data: o11, texture: u7 } = t12;
    u7.setData(o11), s9.resolve();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/WorldExtentClipRenderer.js
var u3 = r5(-0.5, -0.5);
var f4 = class {
  constructor() {
    this._centerNdc = n(), this._pxToNdc = n(), this._worldDimensionsPx = n(), this._mat3 = e4(), this._initialized = false;
  }
  dispose() {
    this._program = r(this._program), this._quad = r(this._quad);
  }
  render(t12, s9, i14) {
    const { context: e10 } = t12, r9 = this._updateGeometry(t12, i14);
    if (null != s9) {
      const { r: t13, g: i15, b: r10, a: o11 } = s9;
      e10.setClearColor(o11 * t13 / 255, o11 * i15 / 255, o11 * r10 / 255, o11);
    } else
      e10.setClearColor(0, 0, 0, 0);
    if (e10.setStencilFunction(O.ALWAYS, 0, 255), e10.setStencilWriteMask(255), !r9)
      return e10.setClearStencil(1), void e10.clear(e10.gl.STENCIL_BUFFER_BIT | e10.gl.COLOR_BUFFER_BIT);
    e10.setClearStencil(0), e10.clear(e10.gl.STENCIL_BUFFER_BIT | e10.gl.COLOR_BUFFER_BIT), this._initialized || this._initialize(e10), e10.setDepthWriteEnabled(false), e10.setDepthTestEnabled(false), e10.setColorMask(false, false, false, false), e10.setBlendingEnabled(false), e10.setStencilOp(I.KEEP, I.KEEP, I.REPLACE), e10.setStencilFunction(O.ALWAYS, 1, 255), e10.setStencilTestEnabled(true), e10.useProgram(this._program), this._program.setUniformMatrix3fv("u_worldExtent", this._mat3), this._quad.draw(), this._quad.unbind();
  }
  _initialize(t12) {
    if (this._initialized)
      return;
    const s9 = e7(t12, r6);
    s9 && (this._program = s9, this._quad = new n5(t12, [0, 0, 1, 0, 0, 1, 1, 1]), this._initialized = true);
  }
  _updateGeometry(t12, a6) {
    const { state: n13, pixelRatio: h9 } = t12, { size: l8, rotation: m4 } = n13, _5 = Math.round(l8[0] * h9), d5 = Math.round(l8[1] * h9);
    if (!n13.spatialReference.isWrappable)
      return false;
    const p2 = r3(m4), f6 = Math.abs(Math.cos(p2)), g2 = Math.abs(Math.sin(p2)), E5 = Math.round(_5 * f6 + d5 * g2), S3 = Math.round(n13.worldScreenWidth);
    if (E5 <= S3)
      return false;
    const b = _5 * g2 + d5 * f6, x2 = S3 * h9, C3 = (a6.left - a6.right) * h9 / _5, T4 = (a6.bottom - a6.top) * h9 / d5;
    o2(this._worldDimensionsPx, x2, b, 1), o2(this._pxToNdc, 2 / _5, -2 / d5, 1), o2(this._centerNdc, C3, T4, 1);
    const j4 = this._mat3;
    return l2(j4, this._centerNdc), f(j4, j4, this._pxToNdc), 0 !== m4 && h(j4, j4, p2), f(j4, j4, this._worldDimensionsPx), M2(j4, j4, u3), true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/AnimationEffect.js
var s6 = class extends t6 {
  constructor() {
    super(...arguments), this.defines = [], this._desc = { vsPath: "fx/integrate", fsPath: "fx/integrate", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
  }
  dispose() {
    this._quad && this._quad.dispose();
  }
  bind() {
  }
  unbind() {
  }
  draw(t12, r9) {
    if (!(r9 == null ? void 0 : r9.size))
      return;
    const { context: a6, renderingOptions: s9 } = t12;
    this._quad || (this._quad = new n5(a6, [0, 0, 1, 0, 0, 1, 1, 1]));
    const o11 = a6.getBoundFramebufferObject(), { x: n13, y: u7, width: m4, height: d5 } = a6.getViewport();
    r9.bindTextures(a6);
    const f6 = r9.getBlock(Q);
    if (null == f6)
      return;
    const c5 = f6.getFBO(a6), l8 = f6.getFBO(a6, 1);
    a6.setViewport(0, 0, r9.size, r9.size), this._computeDelta(t12, l8, s9.labelsAnimationTime), this._updateAnimationState(t12, l8, c5), a6.bindFramebuffer(o11), a6.setViewport(n13, u7, m4, d5);
  }
  _computeDelta(e10, i14, a6) {
    const { context: s9, painter: o11, displayLevel: n13 } = e10, u7 = o11.materialManager.getProgram(this._desc, ["delta"]);
    s9.bindFramebuffer(i14), s9.setClearColor(0, 0, 0, 0), s9.clear(s9.gl.COLOR_BUFFER_BIT), s9.useProgram(u7);
    const m4 = has("featurelayer-animation-enabled") ? a6 : 1;
    u7.setUniform1i("u_maskTexture", E2), u7.setUniform1i("u_sourceTexture", F2), u7.setUniform1f("u_timeDelta", e10.deltaTime), u7.setUniform1f("u_animationTime", m4), u7.setUniform1f("u_zoomLevel", Math.round(10 * n13)), this._quad.draw();
  }
  _updateAnimationState(e10, t12, r9) {
    const { context: i14, painter: a6 } = e10, s9 = a6.materialManager.getProgram(this._desc, ["update"]);
    i14.bindTexture(t12.colorTexture, 1), i14.useProgram(s9), s9.setUniform1i("u_sourceTexture", 1), i14.bindFramebuffer(r9), i14.setClearColor(0, 0, 0, 0), i14.clear(i14.gl.COLOR_BUFFER_BIT), this._quad.draw();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/FeatureEffect.js
var s7 = class extends t6 {
  constructor(e10) {
    super(), this.name = this.constructor.name, this.defines = [e10];
  }
  dispose() {
  }
  bind({ context: e10, painter: t12 }) {
    this._prev = e10.getBoundFramebufferObject();
    const s9 = t12.getFbos().effect0;
    e10.bindFramebuffer(s9), e10.setColorMask(true, true, true, true), e10.setClearColor(0, 0, 0, 0), e10.clear(e10.gl.COLOR_BUFFER_BIT);
  }
  unbind() {
  }
  draw(e10, s9) {
    const { context: r9, painter: o11 } = e10, n13 = o11.getPostProcessingEffects(s9), c5 = r9.getBoundFramebufferObject();
    for (const { postProcessingEffect: t12, effect: f6 } of n13)
      t12.draw(e10, c5, f6);
    r9.bindFramebuffer(this._prev), r9.setStencilTestEnabled(false), o11.blitTexture(r9, c5.colorTexture, L.NEAREST), r9.setStencilTestEnabled(true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightRenderer.js
var c3 = class {
  constructor() {
    this._width = void 0, this._height = void 0, this._resources = null;
  }
  dispose() {
    this._resources && (this._resources.quadGeometry.dispose(), this._resources.quadVAO.dispose(), this._resources.highlightProgram.dispose(), this._resources.blurProgram.dispose(), this._resources = null);
  }
  preBlur(e10, i14) {
    e10.bindTexture(i14, L2), e10.useProgram(this._resources.blurProgram), this._resources.blurProgram.setUniform4fv("u_direction", [1, 0, 1 / this._width, 0]), this._resources.blurProgram.setUniformMatrix4fv("u_channelSelector", t5), e10.bindVAO(this._resources.quadVAO), e10.drawArrays(E.TRIANGLE_STRIP, 0, 4), e10.bindVAO();
  }
  finalBlur(e10, s9) {
    e10.bindTexture(s9, L2), e10.useProgram(this._resources.blurProgram), this._resources.blurProgram.setUniform4fv("u_direction", [0, 1, 0, 1 / this._height]), this._resources.blurProgram.setUniformMatrix4fv("u_channelSelector", i7), e10.bindVAO(this._resources.quadVAO), e10.drawArrays(E.TRIANGLE_STRIP, 0, 4), e10.bindVAO();
  }
  renderHighlight(e10, s9, i14) {
    e10.bindTexture(s9, L2), e10.useProgram(this._resources.highlightProgram), i14.applyHighlightOptions(e10, this._resources.highlightProgram), e10.bindVAO(this._resources.quadVAO), e10.setBlendingEnabled(true), e10.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), e10.drawArrays(E.TRIANGLE_STRIP, 0, 4), e10.bindVAO();
  }
  _initialize(s9, i14, a6) {
    this._width = i14, this._height = a6;
    const m4 = h2.createVertex(s9, F.STATIC_DRAW, new Int8Array([-1, -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, 1, 1, 1, 1]).buffer), c5 = new f2(s9, /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]), { geometry: [new t2("a_position", 2, C2.BYTE, 0, 4), new t2("a_texcoord", 2, C2.UNSIGNED_BYTE, 2, 4)] }, { geometry: m4 }), f6 = e7(s9, t8), b = e7(s9, r7);
    s9.useProgram(f6), f6.setUniform1i("u_texture", L2), f6.setUniform1i("u_shade", M3), f6.setUniform1f("u_sigma", o3), s9.useProgram(b), b.setUniform1i("u_texture", L2), b.setUniform1f("u_sigma", o3), this._resources = { quadGeometry: m4, quadVAO: c5, highlightProgram: f6, blurProgram: b };
  }
  setup(r9, e10, s9) {
    this._resources ? (this._width = e10, this._height = s9) : this._initialize(r9, e10, s9);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightSurfaces.js
function i12(i14, h9, u7) {
  const l8 = new e5(h9, u7);
  return l8.wrapMode = D.CLAMP_TO_EDGE, new E4(i14, l8, new i3(B.STENCIL_INDEX8, h9, u7));
}
var h5 = class {
  constructor() {
    this._width = void 0, this._height = void 0, this._resources = null;
  }
  dispose() {
    this._resources && (this._resources.sharedBlur1Fbo.dispose(), this._resources.sharedBlur2Fbo.dispose(), this._resources = null);
  }
  _initialize(r9, e10, s9) {
    this._width = e10, this._height = s9;
    const t12 = i12(r9, e10, s9), o11 = i12(r9, e10, s9);
    this._resources = { sharedBlur1Fbo: t12, sharedBlur2Fbo: o11 };
  }
  setup(r9, e10, s9) {
    !this._resources || this._width === e10 && this._height === s9 || this.dispose(), this._resources || this._initialize(r9, e10, s9);
  }
  get sharedBlur1Tex() {
    return this._resources.sharedBlur1Fbo.colorTexture;
  }
  get sharedBlur1Fbo() {
    return this._resources.sharedBlur1Fbo;
  }
  get sharedBlur2Tex() {
    return this._resources.sharedBlur2Fbo.colorTexture;
  }
  get sharedBlur2Fbo() {
    return this._resources.sharedBlur2Fbo;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HighlightEffect.js
var h6 = 4;
var d4 = 4 / h6;
var l5 = class extends t6 {
  constructor() {
    super(...arguments), this.defines = ["highlight"], this._hlRenderer = new c3(), this._width = void 0, this._height = void 0, this._boundFBO = null, this._hlSurfaces = new h5(), this._adjustedWidth = void 0, this._adjustedHeight = void 0, this._blitRenderer = new _2();
  }
  dispose() {
    var _a, _b;
    (_a = this._hlSurfaces) == null ? void 0 : _a.dispose(), (_b = this._hlRenderer) == null ? void 0 : _b.dispose(), this._boundFBO = null;
  }
  bind(e10) {
    const { context: t12, painter: s9 } = e10, { width: r9, height: i14 } = t12.getViewport(), h9 = s9.getFbos().effect0;
    this.setup(e10, r9, i14), t12.bindFramebuffer(h9), t12.setColorMask(true, true, true, true), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT);
  }
  unbind() {
  }
  setup({ context: e10 }, t12, s9) {
    this._width = t12, this._height = s9;
    const r9 = t12 % h6, i14 = s9 % h6;
    t12 += r9 < h6 / 2 ? -r9 : h6 - r9, s9 += i14 < h6 / 2 ? -i14 : h6 - i14, this._adjustedWidth = t12, this._adjustedHeight = s9, this._boundFBO = e10.getBoundFramebufferObject();
    const l8 = Math.round(t12 * d4), o11 = Math.round(s9 * d4);
    this._hlRenderer.setup(e10, l8, o11), this._hlSurfaces.setup(e10, l8, o11);
  }
  draw(e10) {
    const { context: t12, highlightGradient: s9 } = e10;
    if (!s9)
      return;
    const r9 = t12.getBoundFramebufferObject();
    t12.setViewport(0, 0, this._adjustedWidth * d4, this._adjustedHeight * d4), t12.bindFramebuffer(this._hlSurfaces.sharedBlur1Fbo), t12.setStencilTestEnabled(false), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT), this._blitRenderer.render(t12, r9.colorTexture, L.NEAREST, 1), t12.setStencilTestEnabled(false), t12.setBlendingEnabled(false), t12.setColorMask(false, false, false, true), t12.bindFramebuffer(this._hlSurfaces.sharedBlur2Fbo), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT), this._hlRenderer.preBlur(t12, this._hlSurfaces.sharedBlur1Tex), t12.bindFramebuffer(this._hlSurfaces.sharedBlur1Fbo), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT), this._hlRenderer.finalBlur(t12, this._hlSurfaces.sharedBlur2Tex), t12.bindFramebuffer(this._boundFBO), t12.setBlendingEnabled(true), t12.setColorMask(true, true, true, true), t12.setViewport(0, 0, this._width, this._height), this._hlRenderer.renderHighlight(t12, this._hlSurfaces.sharedBlur1Tex, s9), this._boundFBO = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HittestEffect.js
var o8 = class extends t6 {
  constructor() {
    super(...arguments), this.name = this.constructor.name, this.defines = ["hittest"];
  }
  dispose() {
    null != this._fbo && this._fbo.dispose();
  }
  createOptions({ pixelRatio: e10 }, i14, s9 = _) {
    if (!i14.length)
      return null;
    const r9 = i14.shift(), o11 = r9.x, n13 = r9.y;
    return this._outstanding = r9, { type: "hittest", distance: s9 * e10, position: [o11, n13] };
  }
  bind(t12) {
    const { context: i14, attributeView: s9 } = t12;
    if (!s9.size)
      return;
    const r9 = s9.getBlock(R2);
    if (null == r9)
      return;
    const o11 = r9.getFBO(i14);
    i14.setViewport(0, 0, s9.size, s9.size), i14.bindFramebuffer(o11), i14.setColorMask(true, true, true, true), i14.setClearColor(0, 0, 0, 0), i14.clear(i14.gl.COLOR_BUFFER_BIT | i14.gl.DEPTH_BUFFER_BIT);
  }
  unbind(t12) {
  }
  draw(t12) {
    if (null == this._outstanding)
      return;
    const e10 = this._outstanding;
    this._outstanding = null, this._resolve(t12, e10.resolvers);
  }
  async _resolve(t12, i14) {
    const { context: o11, attributeView: n13 } = t12, c5 = n13.getBlock(R2);
    if (null == c5)
      return void i14.forEach((t13) => t13.resolve([]));
    const l8 = c5.getFBO(o11), d5 = new Uint8Array(l8.width * l8.height * 4);
    try {
      await l8.readPixelsAsync(0, 0, l8.width, l8.height, G.RGBA, U.UNSIGNED_BYTE, d5);
    } catch (u7) {
      return void i14.forEach((t13) => t13.resolve([]));
    }
    const a6 = [];
    for (let e10 = 0; e10 < d5.length; e10 += 4) {
      const t13 = d5[e10], i15 = d5[e10 + 3];
      t13 && a6.push({ id: e10 / 4, directHits: i15 });
    }
    a6.sort((t13, e10) => e10.directHits === t13.directHits ? e10.id - t13.id : e10.directHits - t13.directHits);
    const h9 = a6.map((t13) => t13.id);
    i14.forEach((t13) => t13.resolve(h9));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HittestEffectVTL.js
var r8 = class extends t6 {
  constructor() {
    super(...arguments), this.name = this.constructor.name, this.defines = ["id"], this._lastSize = 0, this._boundFBO = null;
  }
  dispose() {
    null != this._fbo && this._fbo.dispose();
  }
  bind({ context: t12, painter: e10 }) {
    this._boundFBO = t12.getBoundFramebufferObject();
    const s9 = e10.getFbos().effect0;
    t12.bindFramebuffer(s9), t12.setColorMask(true, true, true, true), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT);
  }
  unbind({ context: t12 }) {
    t12.bindFramebuffer(this._boundFBO), this._boundFBO = null;
  }
  draw(e10, s9, o11 = 2 * _) {
    this._resolve(e10, s9, o11);
  }
  async _resolve({ context: t12, state: e10, pixelRatio: r9 }, i14, n13) {
    const f6 = t12.getBoundFramebufferObject(), a6 = e10.size[1] * r9, u7 = Math.round(n13 * r9), h9 = u7 / 2, l8 = u7 / 2;
    this._ensureBuffer(u7), i14.forEach(async (t13, e11) => {
      const n14 = /* @__PURE__ */ new Map(), b = Math.floor(e11.x * r9 - u7 / 2), c5 = Math.floor(a6 - e11.y * r9 - u7 / 2);
      await f6.readPixelsAsync(b, c5, u7, u7, G.RGBA, U.UNSIGNED_BYTE, this._buf);
      for (let s9 = 0; s9 < this._buf32.length; s9++) {
        const t14 = this._buf32[s9];
        if (4294967295 !== t14 && 0 !== t14) {
          const e12 = s9 % u7, o11 = u7 - Math.floor(s9 / u7), r10 = (h9 - e12) * (h9 - e12) + (l8 - o11) * (l8 - o11), i15 = n14.has(t14) ? n14.get(t14) : 4294967295;
          n14.set(t14, Math.min(r10, i15));
        }
      }
      const _5 = Array.from(n14).sort((t14, e12) => t14[1] - e12[1]).map((t14) => t14[0]);
      t13.resolve(_5), i14.delete(e11);
    });
  }
  _ensureBuffer(t12) {
    this._lastSize !== t12 && (this._lastSize = t12, this._buf = new Uint8Array(4 * t12 * t12), this._buf32 = new Uint32Array(this._buf.buffer));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Bloom.js
var a5 = 5;
var u4 = [1, 0];
var l6 = [0, 1];
var m3 = [1, 0.8, 0.6, 0.4, 0.2];
var _3 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
var h7 = class {
  constructor() {
    this._intensityFBO = null, this._compositeFBO = null, this._mipsFBOs = new Array(a5), this._nMips = a5, this._kernelSizeArray = [3, 5, 7, 9, 11], this._size = [0, 0], this._programDesc = { luminosityHighPass: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/luminosityHighPass", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, gaussianBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, composite: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/composite", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    if (this._quad = r(this._quad), this._intensityFBO = r(this._intensityFBO), this._compositeFBO = r(this._compositeFBO), this._mipsFBOs) {
      for (let t12 = 0; t12 < this._nMips; t12++)
        this._mipsFBOs[t12] && (this._mipsFBOs[t12].horizontal.dispose(), this._mipsFBOs[t12].vertical.dispose());
      this._mipsFBOs = null;
    }
  }
  draw(t12, i14, r9) {
    const { width: o11, height: n13 } = i14, { context: h9, painter: p2 } = t12, { materialManager: c5 } = p2, d5 = h9.gl, f6 = this._programDesc, { strength: b, radius: F3, threshold: O3 } = r9;
    this._quad || (this._quad = new n5(h9, [-1, -1, 1, -1, -1, 1, 1, 1])), this._createOrResizeResources(t12, o11, n13), h9.setStencilTestEnabled(false), h9.setBlendingEnabled(true), h9.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), h9.setStencilWriteMask(0);
    const B2 = this._quad;
    B2.bind(), h9.bindFramebuffer(this._intensityFBO);
    const g2 = c5.getProgram(f6.luminosityHighPass);
    h9.useProgram(g2), h9.bindTexture(i14.colorTexture, 0), g2.setUniform1i("u_texture", 0), g2.setUniform3fv("u_defaultColor", [0, 0, 0]), g2.setUniform1f("u_defaultOpacity", 0), g2.setUniform1f("u_luminosityThreshold", O3), g2.setUniform1f("u_smoothWidth", 0.01);
    const T4 = [Math.round(o11 / 2), Math.round(n13 / 2)];
    h9.setViewport(0, 0, T4[0], T4[1]), h9.setClearColor(0, 0, 0, 0), h9.clear(d5.COLOR_BUFFER_BIT), B2.draw(), h9.setBlendingEnabled(false);
    let x2 = this._intensityFBO.colorTexture;
    for (let e10 = 0; e10 < this._nMips; e10++) {
      const t13 = c5.getProgram(f6.gaussianBlur, [{ name: "radius", value: this._kernelSizeArray[e10] }]);
      h9.useProgram(t13), h9.bindTexture(x2, e10 + 1), t13.setUniform1i("u_colorTexture", e10 + 1), t13.setUniform2fv("u_texSize", T4), t13.setUniform2fv("u_direction", u4), h9.setViewport(0, 0, T4[0], T4[1]);
      const s9 = this._mipsFBOs[e10];
      h9.bindFramebuffer(s9.horizontal), B2.draw(), x2 = s9.horizontal.colorTexture, h9.bindFramebuffer(s9.vertical), h9.bindTexture(x2, e10 + 1), t13.setUniform2fv("u_direction", l6), B2.draw(), x2 = s9.vertical.colorTexture, T4[0] = Math.round(T4[0] / 2), T4[1] = Math.round(T4[1] / 2);
    }
    h9.setViewport(0, 0, o11, n13);
    const w4 = c5.getProgram(f6.composite, [{ name: "nummips", value: a5 }]);
    h9.bindFramebuffer(this._compositeFBO), h9.useProgram(w4), w4.setUniform1f("u_bloomStrength", b), w4.setUniform1f("u_bloomRadius", F3), w4.setUniform1fv("u_bloomFactors", m3), w4.setUniform3fv("u_bloomTintColors", _3), h9.bindTexture(this._mipsFBOs[0].vertical.colorTexture, 1), w4.setUniform1i("u_blurTexture1", 1), h9.bindTexture(this._mipsFBOs[1].vertical.colorTexture, 2), w4.setUniform1i("u_blurTexture2", 2), h9.bindTexture(this._mipsFBOs[2].vertical.colorTexture, 3), w4.setUniform1i("u_blurTexture3", 3), h9.bindTexture(this._mipsFBOs[3].vertical.colorTexture, 4), w4.setUniform1i("u_blurTexture4", 4), h9.bindTexture(this._mipsFBOs[4].vertical.colorTexture, 5), w4.setUniform1i("u_blurTexture5", 5), B2.draw(), h9.bindFramebuffer(i14), h9.setBlendingEnabled(true);
    const M4 = c5.getProgram(f6.blit);
    h9.useProgram(M4), h9.bindTexture(this._compositeFBO.colorTexture, 6), M4.setUniform1i("u_texture", 6), h9.setBlendFunction(R.ONE, R.ONE), B2.draw(), B2.unbind(), h9.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), h9.setStencilTestEnabled(true);
  }
  _createOrResizeResources(t12, e10, s9) {
    const { context: a6 } = t12;
    if (this._compositeFBO && this._size[0] === e10 && this._size[1] === s9)
      return;
    this._size[0] = e10, this._size[1] = s9;
    const u7 = [Math.round(e10 / 2), Math.round(s9 / 2)];
    if (this._compositeFBO)
      this._compositeFBO.resize(e10, s9);
    else {
      const t13 = new e5(e10, s9);
      t13.internalFormat = G.RGBA, t13.wrapMode = D.CLAMP_TO_EDGE, this._compositeFBO = new E4(a6, t13);
    }
    if (this._intensityFBO)
      this._intensityFBO.resize(u7[0], u7[1]);
    else {
      const t13 = new e5(u7[0], u7[1]);
      t13.internalFormat = G.RGBA, t13.wrapMode = D.CLAMP_TO_EDGE, this._intensityFBO = new E4(a6, t13);
    }
    for (let l8 = 0; l8 < this._nMips; l8++) {
      if (this._mipsFBOs[l8])
        this._mipsFBOs[l8].horizontal.resize(u7[0], u7[1]), this._mipsFBOs[l8].vertical.resize(u7[0], u7[1]);
      else {
        const t13 = new e5(u7[0], u7[1]);
        t13.internalFormat = G.RGBA, t13.wrapMode = D.CLAMP_TO_EDGE, this._mipsFBOs[l8] = { horizontal: new E4(a6, t13), vertical: new E4(a6, t13) };
      }
      u7[0] = Math.round(u7[0] / 2), u7[1] = Math.round(u7[1] / 2);
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Blur.js
var n11 = [1, 0];
var o9 = [0, 1];
var u5 = class {
  constructor() {
    this._blurFBO = null, this._size = [0, 0], this._programDesc = { gaussianBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, radialBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/radial-blur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    this._blurFBO && (this._blurFBO.dispose(), this._blurFBO = null);
  }
  draw(t12, s9, r9) {
    const { context: i14 } = t12, { type: a6, radius: n13 } = r9;
    if (0 === n13)
      return;
    this._createOrResizeResources(t12), this._quad || (this._quad = new n5(i14, [-1, -1, 1, -1, -1, 1, 1, 1]));
    const o11 = this._quad;
    o11.bind(), "blur" === a6 ? this._gaussianBlur(t12, s9, n13) : this._radialBlur(t12, s9), o11.unbind();
  }
  _gaussianBlur(e10, s9, r9) {
    const { context: i14, state: a6, painter: u7, pixelRatio: l8 } = e10, { size: d5 } = a6, { materialManager: b } = u7, c5 = this._programDesc, _5 = this._quad, p2 = [Math.round(l8 * d5[0]), Math.round(l8 * d5[1])], h9 = this._blurFBO, m4 = b.getProgram(c5.gaussianBlur, [{ name: "radius", value: Math.ceil(r9) }]);
    i14.useProgram(m4), i14.setBlendingEnabled(false), i14.bindFramebuffer(h9), i14.bindTexture(s9.colorTexture, 4), m4.setUniform1i("u_colorTexture", 4), m4.setUniform2fv("u_texSize", p2), m4.setUniform2fv("u_direction", n11), m4.setUniform1f("u_sigma", r9), _5.draw(), i14.bindFramebuffer(s9), i14.setStencilWriteMask(0), i14.setStencilTestEnabled(false), i14.setDepthWriteEnabled(false), i14.setDepthTestEnabled(false), i14.bindTexture(h9 == null ? void 0 : h9.colorTexture, 5), m4.setUniform1i("u_colorTexture", 5), m4.setUniform2fv("u_direction", o9), _5.draw(), i14.setBlendingEnabled(true), i14.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), i14.setStencilTestEnabled(true);
  }
  _radialBlur(e10, s9) {
    const { context: r9, painter: i14 } = e10, { materialManager: a6 } = i14, n13 = this._programDesc, o11 = this._quad, u7 = this._blurFBO;
    r9.bindFramebuffer(u7);
    const l8 = a6.getProgram(n13.radialBlur);
    r9.useProgram(l8), r9.setBlendingEnabled(false), r9.bindTexture(s9.colorTexture, 4), l8.setUniform1i("u_colorTexture", 4), o11.draw(), r9.bindFramebuffer(s9), r9.setStencilWriteMask(0), r9.setStencilTestEnabled(false), r9.setDepthWriteEnabled(false), r9.setDepthTestEnabled(false), r9.setBlendingEnabled(true);
    const d5 = a6.getProgram(n13.blit);
    r9.useProgram(d5), r9.bindTexture(u7 == null ? void 0 : u7.colorTexture, 5), d5.setUniform1i("u_texture", 5), r9.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), o11.draw();
  }
  _createOrResizeResources(e10) {
    const { context: t12, state: n13, pixelRatio: o11 } = e10, { size: u7 } = n13, l8 = Math.round(o11 * u7[0]), d5 = Math.round(o11 * u7[1]);
    if (!this._blurFBO || this._size[0] !== l8 || this._size[1] !== d5)
      if (this._size[0] = l8, this._size[1] = d5, this._blurFBO)
        this._blurFBO.resize(l8, d5);
      else {
        const e11 = new e5(l8, d5);
        e11.internalFormat = G.RGBA, e11.wrapMode = D.CLAMP_TO_EDGE, this._blurFBO = new E4(t12, e11);
      }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Colorize.js
var n12 = class {
  constructor() {
    this._layerFBOTexture = null, this._size = [0, 0], this._programDesc = { vsPath: "post-processing/pp", fsPath: "post-processing/filterEffect", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
  }
  dispose() {
    this._layerFBOTexture = r(this._layerFBOTexture);
  }
  draw(e10, t12, s9) {
    const { width: i14, height: o11 } = t12;
    this._createOrResizeResources(e10, i14, o11);
    const { context: a6, painter: n13 } = e10, { materialManager: c5 } = n13, l8 = this._programDesc, u7 = this._quad, _5 = s9.colorMatrix;
    u7.bind();
    const h9 = this._layerFBOTexture;
    a6.bindFramebuffer(t12), t12.copyToTexture(0, 0, i14, o11, 0, 0, h9), a6.setBlendingEnabled(false), a6.setStencilTestEnabled(false);
    const m4 = c5.getProgram(l8);
    a6.useProgram(m4), a6.bindTexture(h9, 2), m4.setUniformMatrix4fv("u_coefficients", _5), m4.setUniform1i("u_colorTexture", 2), u7.draw(), a6.setBlendingEnabled(true), a6.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), a6.setStencilTestEnabled(true), u7.unbind();
  }
  _createOrResizeResources(e10, r9, n13) {
    const { context: c5 } = e10;
    if (!this._layerFBOTexture || this._size[0] !== r9 || this._size[1] !== n13) {
      if (this._size[0] = r9, this._size[1] = n13, this._layerFBOTexture)
        this._layerFBOTexture.resize(r9, n13);
      else {
        const e11 = new e5();
        e11.internalFormat = G.RGBA, e11.wrapMode = D.CLAMP_TO_EDGE, e11.width = r9, e11.height = n13, this._layerFBOTexture = new T2(c5, e11);
      }
      this._quad || (this._quad = new n5(c5, [-1, -1, 1, -1, -1, 1, 1, 1]));
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/DropShadow.js
var u6 = [1, 0];
var h8 = [0, 1];
var _4 = class {
  constructor() {
    this._layerFBOTexture = null, this._horizontalBlurFBO = null, this._verticalBlurFBO = null, this._size = [0, 0], this._quad = null, this._programDesc = { blur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, composite: { vsPath: "post-processing/pp", fsPath: "post-processing/drop-shadow/composite", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    this._layerFBOTexture = r(this._layerFBOTexture), this._horizontalBlurFBO = r(this._horizontalBlurFBO), this._verticalBlurFBO = r(this._verticalBlurFBO);
  }
  draw(e10, i14, o11) {
    const { context: a6, state: n13, painter: l8 } = e10, { materialManager: _5 } = l8, c5 = this._programDesc, p2 = i14.width, m4 = i14.height, f6 = [Math.round(p2), Math.round(m4)], { blurRadius: B2, offsetX: d5, offsetY: b, color: O3 } = o11, F3 = [u2(d5), u2(b)];
    this._createOrResizeResources(e10, p2, m4, f6);
    const w4 = this._horizontalBlurFBO, T4 = this._verticalBlurFBO;
    a6.setStencilWriteMask(0), a6.setStencilTestEnabled(false), a6.setDepthWriteEnabled(false), a6.setDepthTestEnabled(false);
    const x2 = this._layerFBOTexture;
    i14.copyToTexture(0, 0, p2, m4, 0, 0, x2), this._quad || (this._quad = new n5(a6, [-1, -1, 1, -1, -1, 1, 1, 1])), a6.setViewport(0, 0, f6[0], f6[1]);
    const g2 = this._quad;
    g2.bind(), a6.setBlendingEnabled(false);
    const z = _5.getProgram(c5.blur, [{ name: "radius", value: Math.ceil(B2) }]);
    a6.useProgram(z), a6.bindFramebuffer(w4), a6.bindTexture(i14.colorTexture, 4), z.setUniform1i("u_colorTexture", 4), z.setUniform2fv("u_texSize", f6), z.setUniform2fv("u_direction", u6), z.setUniform1f("u_sigma", B2), g2.draw(), a6.bindFramebuffer(T4), a6.bindTexture(w4 == null ? void 0 : w4.colorTexture, 5), z.setUniform1i("u_colorTexture", 5), z.setUniform2fv("u_direction", h8), g2.draw(), a6.bindFramebuffer(i14), a6.setViewport(0, 0, p2, m4);
    const M4 = _5.getProgram(c5.composite);
    a6.useProgram(M4), a6.bindTexture(T4 == null ? void 0 : T4.colorTexture, 2), M4.setUniform1i("u_blurTexture", 2), a6.bindTexture(x2, 3), M4.setUniform1i("u_layerFBOTexture", 3), M4.setUniform4fv("u_shadowColor", [O3[3] * (O3[0] / 255), O3[3] * (O3[1] / 255), O3[3] * (O3[2] / 255), O3[3]]), M4.setUniformMatrix3fv("u_displayViewMat3", n13.displayMat3), M4.setUniform2fv("u_shadowOffset", F3), g2.draw(), a6.setBlendingEnabled(true), a6.setStencilTestEnabled(true), a6.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), g2.unbind();
  }
  _createOrResizeResources(e10, t12, r9, s9) {
    const { context: u7 } = e10;
    if (!this._horizontalBlurFBO || this._size[0] !== t12 || this._size[1] !== r9) {
      if (this._size[0] = t12, this._size[1] = r9, this._horizontalBlurFBO)
        this._horizontalBlurFBO.resize(s9[0], s9[1]);
      else {
        const e11 = new e5(s9[0], s9[1]);
        e11.internalFormat = G.RGBA, e11.wrapMode = D.CLAMP_TO_EDGE, this._horizontalBlurFBO = new E4(u7, e11);
      }
      if (this._verticalBlurFBO)
        this._verticalBlurFBO.resize(s9[0], s9[1]);
      else {
        const e11 = new e5(s9[0], s9[1]);
        e11.internalFormat = G.RGBA, e11.wrapMode = D.CLAMP_TO_EDGE, this._verticalBlurFBO = new E4(u7, e11);
      }
      if (this._layerFBOTexture)
        this._layerFBOTexture.resize(t12, r9);
      else {
        const e11 = new e5();
        e11.internalFormat = G.RGBA, e11.wrapMode = D.CLAMP_TO_EDGE, e11.width = t12, e11.height = r9, this._layerFBOTexture = new T2(u7, e11);
      }
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Opacity.js
var l7 = class {
  constructor() {
    this._size = [0, 0], this._layerFBOTexture = null;
  }
  dispose() {
    this._layerFBOTexture = r(this._layerFBOTexture);
  }
  draw(e10, r9, s9) {
    const { width: i14, height: o11 } = r9;
    this._createOrResizeResources(e10, i14, o11);
    const { context: l8, painter: a6 } = e10, { amount: n13 } = s9, h9 = l8.gl, u7 = this._layerFBOTexture;
    l8.bindFramebuffer(r9), r9.copyToTexture(0, 0, i14, o11, 0, 0, u7), l8.setBlendingEnabled(true), l8.setStencilTestEnabled(false), l8.setDepthTestEnabled(false), l8.setClearColor(0, 0, 0, 0), l8.clear(h9.COLOR_BUFFER_BIT), a6.blitTexture(l8, u7, L.NEAREST, n13);
  }
  _createOrResizeResources(e10, l8, a6) {
    const { context: n13 } = e10;
    if (!this._layerFBOTexture || this._size[0] !== l8 || this._size[1] !== a6)
      if (this._size[0] = l8, this._size[1] = a6, this._layerFBOTexture)
        this._layerFBOTexture.resize(l8, a6);
      else {
        const e11 = new e5();
        e11.internalFormat = G.RGBA, e11.wrapMode = D.CLAMP_TO_EDGE, e11.samplingMode = L.NEAREST, e11.width = l8, e11.height = a6, this._layerFBOTexture = new T2(n13, e11);
      }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/EffectManager.js
function c4(o11) {
  switch (o11) {
    case "bloom":
    case "blur":
    case "opacity":
    case "drop-shadow":
      return o11;
    default:
      return "colorize";
  }
}
var f5 = { colorize: () => new n12(), blur: () => new u5(), bloom: () => new h7(), opacity: () => new l7(), "drop-shadow": () => new _4() };
var i13 = class {
  constructor() {
    this._effectMap = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._effectMap.forEach((o11) => o11.dispose()), this._effectMap.clear();
  }
  getPostProcessingEffects(o11) {
    if (!o11 || 0 === o11.length)
      return [];
    const e10 = [];
    for (const t12 of o11) {
      const o12 = c4(t12.type);
      let s9 = this._effectMap.get(o12);
      s9 || (s9 = f5[o12](), this._effectMap.set(o12, s9)), e10.push({ postProcessingEffect: s9, effect: t12 });
    }
    return e10;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/painter/RenderPass.js
var o10 = class {
  constructor(e10, r9) {
    this.brushes = e10, this.name = r9.name, this.drawPhase = r9.drawPhase || T.MAP, this._targetFn = r9.target, this.effects = r9.effects || [], this.enableDefaultDraw = r9.enableDefaultDraw ?? (() => true), this.forceDrawByDisplayOrder = !!r9.forceDrawByDisplayOrder;
  }
  render(e10) {
    var _a;
    const { context: t12, profiler: r9 } = e10, s9 = this._targetFn(), n13 = this.drawPhase & e10.drawPhase;
    if (r9.recordPassStart(this.name), n13) {
      this.enableDefaultDraw() && this._doRender(e10, s9), r9.recordPassEnd();
      for (const r10 of this.effects) {
        if (!r10.enable())
          continue;
        const n14 = r10.apply, o11 = (_a = r10.args) == null ? void 0 : _a.call(r10), a6 = t12.getViewport(), i14 = t12.getBoundFramebufferObject(), f6 = e10.passOptions;
        this._bindEffect(e10, n14, o11), this._doRender(e10, s9, n14.defines), this._drawAndUnbindEffect(e10, n14, a6, i14, f6, o11);
      }
    }
  }
  _doRender(e10, t12, o11) {
    if (null == t12)
      return;
    const { profiler: a6, context: i14 } = e10;
    if (this.forceDrawByDisplayOrder) {
      for (const r9 of this.brushes) {
        if (a6.recordBrushStart(r9.name), null != r9.brushEffect) {
          const s9 = i14.getViewport(), n13 = i14.getBoundFramebufferObject(), a7 = e10.passOptions;
          this._bindEffect(e10, r9.brushEffect), this._drawWithBrush(r9, e10, t12, o11), this._drawAndUnbindEffect(e10, r9.brushEffect, s9, n13, a7);
        } else
          this._drawWithBrush(r9, e10, t12, o11);
        a6.recordBrushEnd();
      }
      const f6 = t12, c5 = e10;
      c5.attributeView.bindTextures(e10.context);
      for (const e11 of f6) {
        if (!e11.visible)
          continue;
        e11.commit(c5), c5.context.setStencilFunction(O.EQUAL, e11.stencilRef, 255);
        const t13 = e11.getGeometry(E3.MARKER), a7 = e11.getGeometry(E3.TEXT);
        if ((t13 == null ? void 0 : t13.records) && (a7 == null ? void 0 : a7.records)) {
          const n13 = /* @__PURE__ */ new Map(), i15 = t13.records.getCursor();
          for (; i15.next(); )
            n13.set(i15.id, [i15.getDrawInfo(t13, E3.MARKER)]);
          const f7 = a7.records.getCursor();
          for (; f7.next(); ) {
            const e12 = n13.get(f7.id), t14 = f7.getDrawInfo(a7, E3.TEXT);
            e12 ? e12.push(t14) : n13.set(f7.id, [t14]);
          }
          const d5 = Array.from(n13.entries()).sort(([e12, t14], [r9, s9]) => r9 - e12);
          for (const [t14, r9] of d5)
            for (const n14 of r9) {
              const t15 = c5.painter.getBrush(n14.geometryType, S.DEFAULT);
              t15.prepareState(c5, o11), t15.drawGeometry(c5, e11, n14, o11);
            }
        } else if (t13) {
          const n13 = c5.painter.getBrush(E3.MARKER, S.DEFAULT);
          n13.prepareState(c5, o11), t13.forEachCommand((t14) => {
            n13.drawGeometry(c5, e11, t14, o11);
          });
        } else if (a7) {
          const t14 = c5.painter.getBrush(E3.TEXT, S.DEFAULT);
          t14.prepareState(c5, o11), a7.forEachCommand((r9) => {
            t14.drawGeometry(c5, e11, r9, o11);
          });
        }
      }
    } else
      for (const r9 of this.brushes) {
        if (a6.recordBrushStart(r9.name), null != r9.brushEffect) {
          const s9 = i14.getViewport(), n13 = i14.getBoundFramebufferObject(), a7 = e10.passOptions;
          this._bindEffect(e10, r9.brushEffect), this._drawWithBrush(r9, e10, t12, o11), this._drawAndUnbindEffect(e10, r9.brushEffect, s9, n13, a7);
        } else
          this._drawWithBrush(r9, e10, t12, o11);
        a6.recordBrushEnd();
      }
  }
  _drawWithBrush(t12, r9, s9, n13) {
    p(s9) ? (t12.prepareState(r9, n13), t12.drawMany(r9, s9, n13)) : s9.visible && (t12.prepareState(r9, n13), t12.draw(r9, s9, n13));
  }
  _bindEffect(e10, t12, r9) {
    const { profiler: s9 } = e10;
    s9.recordPassStart(this.name + "." + t12.name), t12.bind(e10, r9);
    const n13 = t12.createOptions(e10, r9);
    e10.passOptions = n13;
  }
  _drawAndUnbindEffect(e10, t12, r9, s9, n13, o11) {
    const { profiler: a6, context: i14 } = e10;
    e10.passOptions = n13, a6.recordBrushStart(t12.name), t12.draw(e10, o11), t12.unbind(e10, o11), i14.bindFramebuffer(s9);
    const { x: f6, y: c5, width: d5, height: h9 } = r9;
    i14.setViewport(f6, c5, d5, h9), a6.recordBrushEnd(), a6.recordPassEnd();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/Painter.js
function O2(e10, s9) {
  switch (e10) {
    case E3.LINE:
      return w2.line;
    case E3.TEXT:
      return w2.text;
    case E3.LABEL:
      return w2.label;
    case E3.FILL:
      return s9 === S.DOT_DENSITY ? w2.dotDensity : w2.fill;
    case E3.MARKER:
      switch (s9) {
        case S.HEATMAP:
          return w2.heatmap;
        case S.PIE_CHART:
          return w2.pieChart;
        default:
          return w2.marker;
      }
  }
}
var j2 = class {
  constructor(e10, t12, i14) {
    this.context = e10, this._blitRenderer = new _2(), this._worldExtentRenderer = new f4(), this._brushCache = /* @__PURE__ */ new Map(), this._lastWidth = null, this._lastHeight = null, this._vtlMaterialManager = new o6(), this._blendEffect = new m2(), this._stencilBuf = null, this._prevBeforeLayerFBOStack = [], this._fboPool = [], this.effects = { highlight: new l5(), hittest: new o8(), hittestVTL: new r8(), integrate: new s6(), insideEffect: new s7("inside"), outsideEffect: new s7("outside") }, this.materialManager = new i11(e10), this.textureManager = new J(t12, i14, e10.type === n3.WEBGL2), this.textureUploadManager = new n10(e10, t12), this._effectsManager = new i13();
  }
  dispose() {
    if (this.materialManager.dispose(), this.textureManager.dispose(), this.textureUploadManager.destroy(), this._blitRenderer = r(this._blitRenderer), this._worldExtentRenderer = r(this._worldExtentRenderer), this._brushCache && (this._brushCache.forEach((e10) => e10.dispose()), this._brushCache.clear(), this._brushCache = null), this._fbos) {
      let e10;
      for (e10 in this._fbos)
        this._fbos[e10] && this._fbos[e10].dispose();
    }
    for (const e10 of this._fboPool)
      e10.dispose();
    if (this._fboPool.length = 0, this.effects) {
      let e10;
      for (e10 in this.effects)
        this.effects[e10] && this.effects[e10].dispose();
    }
    this._effectsManager.dispose(), this._blendEffect.dispose(this.context), this._vtlMaterialManager = r(this._vtlMaterialManager);
  }
  get blitRenderer() {
    return this._blitRenderer;
  }
  get vectorTilesMaterialManager() {
    return this._vtlMaterialManager;
  }
  getFbos() {
    if (!this._fbos)
      throw new Error("InternalError: Painter FBOs not initialized");
    return this._fbos;
  }
  acquireFbo(e10, t12) {
    let s9;
    if (this._fboPool.length > 0)
      s9 = this._fboPool.pop();
    else {
      const r9 = new e5(e10, t12);
      r9.samplingMode = L.NEAREST, r9.wrapMode = D.CLAMP_TO_EDGE, s9 = new E4(this.context, r9, this._stencilBuf);
    }
    return s9.width === e10 && s9.height === t12 || s9.resize(e10, t12), s9;
  }
  releaseFbo(e10) {
    this._fboPool.push(e10);
  }
  getSharedStencilBuffer() {
    return this._stencilBuf;
  }
  beforeRenderPhases(e10, t12, s9) {
    const { context: r9 } = e10;
    this._worldExtentRenderer.render(e10, t12, s9);
    const { width: i14, height: n13 } = r9.getViewport();
    if (this.updateFBOs(i14, n13), this._prevFBO = r9.getBoundFramebufferObject(), r9.bindFramebuffer(this.getFbos().output), r9.setColorMask(true, true, true, true), null != t12) {
      const { r: e11, g: s10, b: i15, a: n14 } = t12;
      r9.setClearColor(n14 * e11 / 255, n14 * s10 / 255, n14 * i15 / 255, n14);
    } else
      r9.setClearColor(0, 0, 0, 0);
    r9.setDepthWriteEnabled(true), r9.setClearDepth(1), r9.clear(r9.gl.COLOR_BUFFER_BIT | r9.gl.DEPTH_BUFFER_BIT), r9.setDepthWriteEnabled(false);
  }
  afterRenderPhases(e10) {
    const { context: t12 } = e10;
    t12.bindFramebuffer(this._prevFBO), t12.setStencilFunction(O.EQUAL, 1, 255), t12.setStencilTestEnabled(true), t12.setDepthTestEnabled(false), this.blitTexture(t12, this.getFbos().output.colorTexture, L.NEAREST);
  }
  beforeRenderLayer(e10, t12, s9) {
    const { context: r9, blendMode: i14, effects: n13, drawPhase: o11, requireFBO: a6 } = e10;
    if (a6 || x(o11, i14, n13, s9)) {
      const e11 = r9.getBoundFramebufferObject();
      this._prevBeforeLayerFBOStack.push(e11);
      const { width: t13, height: s10 } = r9.getViewport(), i15 = this.acquireFbo(t13, s10);
      r9.bindFramebuffer(i15), r9.setColorMask(true, true, true, true), r9.setClearColor(0, 0, 0, 0), r9.setDepthWriteEnabled(true), r9.setClearDepth(1), r9.clear(r9.gl.COLOR_BUFFER_BIT | r9.gl.DEPTH_BUFFER_BIT), r9.setDepthWriteEnabled(false);
    }
    r9.setDepthWriteEnabled(false), r9.setDepthTestEnabled(false), r9.setStencilTestEnabled(true), r9.setClearStencil(t12), r9.setStencilWriteMask(255), r9.clear(r9.gl.STENCIL_BUFFER_BIT);
  }
  afterRenderLayer(e10, t12) {
    const { context: s9, blendMode: r9, effects: n13, requireFBO: o11, drawPhase: a6 } = e10;
    if (o11 || x(a6, r9, n13, t12)) {
      const o12 = s9.getBoundFramebufferObject();
      null != n13 && n13.length > 0 && a6 === T.MAP && this._applyEffects(e10, n13, o12), s9.bindFramebuffer(this._prevBeforeLayerFBOStack.pop()), s9.setStencilTestEnabled(false), s9.setStencilWriteMask(0), s9.setBlendingEnabled(true), s9.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), s9.setColorMask(true, true, true, true);
      const f6 = null == r9 || a6 === T.HIGHLIGHT ? "normal" : r9;
      this._blendEffect.draw(e10, o12.colorTexture, L.NEAREST, f6, t12), this.releaseFbo(o12);
    }
  }
  getBrush(e10, t12) {
    const s9 = O2(e10, t12);
    let r9 = this._brushCache.get(s9);
    return void 0 === r9 && (r9 = new s9(), this._brushCache.set(s9, r9)), r9;
  }
  renderObject(e10, s9, r9, i14) {
    const n13 = w2[r9];
    if (!n13)
      return;
    let o11 = this._brushCache.get(n13);
    void 0 === o11 && (o11 = new n13(), this._brushCache.set(n13, o11)), o11.prepareState(e10, i14), o11.draw(e10, s9, i14);
  }
  renderObjects(e10, s9, r9, i14) {
    const n13 = w2[r9];
    if (!n13)
      return;
    let o11 = this._brushCache.get(n13);
    void 0 === o11 && (o11 = new n13(), this._brushCache.set(n13, o11)), o11.drawMany(e10, s9, i14);
  }
  registerRenderPass(e10) {
    const t12 = e10.brushes.map((e11) => (this._brushCache.has(e11) || this._brushCache.set(e11, new e11()), this._brushCache.get(e11)));
    return new o10(t12, e10);
  }
  blitTexture(e10, t12, s9, r9 = 1) {
    e10.setBlendingEnabled(true), e10.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), e10.setColorMask(true, true, true, true), this._blitRenderer.render(e10, t12, s9, r9);
  }
  getPostProcessingEffects(e10) {
    return this._effectsManager.getPostProcessingEffects(e10);
  }
  updateFBOs(e10, t12) {
    if (e10 !== this._lastWidth || t12 !== this._lastHeight) {
      if (this._lastWidth = e10, this._lastHeight = t12, this._fbos) {
        let s10;
        for (s10 in this._fbos)
          this._fbos[s10].resize(e10, t12);
        return;
      }
      const s9 = new e5(e10, t12);
      s9.samplingMode = L.NEAREST, s9.wrapMode = D.CLAMP_TO_EDGE;
      const r9 = new i3(B.DEPTH_STENCIL, e10, t12);
      this._stencilBuf = new i4(this.context, r9), this._fbos = { output: new E4(this.context, s9, this._stencilBuf), effect0: new E4(this.context, s9, this._stencilBuf) };
    }
  }
  _applyEffects(e10, t12, s9) {
    const { context: r9 } = e10, i14 = this._effectsManager.getPostProcessingEffects(t12);
    for (const { postProcessingEffect: n13, effect: o11 } of i14)
      r9.bindFramebuffer(s9), n13.draw(e10, s9, o11);
  }
};
function x(e10, t12, s9, r9) {
  return e10 !== T.LABEL_ALPHA && e10 !== T.LABEL && e10 !== T.HIGHLIGHT && (1 !== r9 || null != t12 && "normal" !== t12 || null != s9 && s9.length > 0);
}

// node_modules/@arcgis/core/views/2d/engine/Stage.js
var j3 = 2e3;
var T3 = class extends h3 {
  constructor(t12, i14) {
    super(), this._trash = /* @__PURE__ */ new Set(), this._renderRemainingTime = 0, this._lastFrameRenderTime = 0, this._renderRequested = r4(false), this.stage = this, this._stationary = true, this._canvas = new l3(t12), this.context = new N(this._canvas.gl, i14.contextOptions ?? {}), this.resourceManager = new i5(), this.painter = new j2(this.context, this, this.resourceManager), has("esri-2d-profiler") && (this._debugOutput = document.createElement("div"), this._debugOutput.setAttribute("style", "margin: 24px 64px; position: absolute; color: red;"), t12.appendChild(this._debugOutput));
    const a6 = () => this._highlightGradient;
    this._renderParameters = { drawPhase: 0, state: this.state, pixelRatio: window.devicePixelRatio, stationary: false, globalOpacity: 1, blendMode: null, deltaTime: -1, time: 0, inFadeTransition: false, effects: null, context: this.context, painter: this.painter, timeline: i14.timeline || new e9(), renderingOptions: i14.renderingOptions, requestRender: () => this.requestRender(), allowDelayedRender: false, requireFBO: false, profiler: new n8(this.context, this._debugOutput), dataUploadCounter: 0, get highlightGradient() {
      return a6();
    }, backgroundColor: i14.backgroundColor }, this._taskHandle = v({ render: (e10) => this.renderFrame(e10) }), this._taskHandle.pause(), this._lostWebGLContextHandle = this._canvas.events.on("webgl-context-lost", (t13) => this.emit("webgl-error", { error: new s("webgl-context-lost", t13.statusMessage) })), this._bufferPool = new i8();
  }
  destroy() {
    var _a, _b;
    this.removeAllChildren(), this._emptyTrash(), this._taskHandle = l(this._taskHandle), this._lostWebGLContextHandle = l(this._lostWebGLContextHandle), this._canvas.destroy(), (_b = (_a = this._debugOutput) == null ? void 0 : _a.parentNode) == null ? void 0 : _b.removeChild(this._debugOutput), this._bufferPool.destroy(), this.resourceManager.destroy(), this.painter.dispose(), this.context.dispose(), this._canvas = null;
  }
  get backgroundColor() {
    return this._renderParameters.backgroundColor;
  }
  set backgroundColor(e10) {
    this._renderParameters.backgroundColor = e10, this.requestRender();
  }
  get bufferPool() {
    return this._bufferPool;
  }
  get renderingOptions() {
    return this._renderingOptions;
  }
  set renderingOptions(e10) {
    this._renderingOptions = e10, this.requestRender();
  }
  get renderRequested() {
    return this._renderRequested.value;
  }
  get state() {
    return this._state;
  }
  set state(e10) {
    this._state = e10, this.requestRender();
  }
  get stationary() {
    return this._stationary;
  }
  set stationary(e10) {
    this._stationary !== e10 && (this._stationary = e10, this.requestRender());
  }
  trashDisplayObject(e10) {
    this._trash.add(e10), this.requestRender();
  }
  untrashDisplayObject(e10) {
    return this._trash.delete(e10);
  }
  requestRender() {
    this._renderRemainingTime = j3, this.renderRequested || (this._renderRequested.value = true, this._taskHandle.resume());
  }
  renderFrame(e10) {
    const t12 = this._lastFrameRenderTime ? e10.time - this._lastFrameRenderTime : 0;
    this._renderRemainingTime -= t12, this._renderRemainingTime <= 0 && this._taskHandle.pause(), this._lastFrameRenderTime = e10.time, this._renderRequested.value = false, this._renderParameters.state = this._state, this._renderParameters.stationary = this.stationary, this._renderParameters.pixelRatio = window.devicePixelRatio, this._renderParameters.globalOpacity = 1, this._renderParameters.time = e10.time, this._renderParameters.deltaTime = e10.deltaTime, this._renderParameters.effects = null, this.processRender(this._renderParameters), this._emptyTrash();
  }
  _createTransforms() {
    return { dvs: e4() };
  }
  renderChildren(e10) {
    for (const t12 of this.children)
      t12.beforeRender(e10);
    this._canvas.render(e10, () => this._renderChildren(this.children, e10));
    for (const t12 of this.children)
      t12.afterRender(e10);
  }
  _renderChildren(e10, t12) {
    const r9 = this.context;
    this.painter.textureUploadManager.upload(), r9.resetInfo(), t12.profiler.recordStart("drawLayers"), t12.dataUploadCounter = 0, this.painter.beforeRenderPhases(t12, t12.backgroundColor, this.state.padding), t12.drawPhase = T.MAP;
    for (const s9 of e10)
      s9.processRender(t12);
    if (this.children.some((e11) => e11.hasHighlight)) {
      t12.drawPhase = T.HIGHLIGHT;
      for (const r10 of e10)
        r10.processRender(t12);
    }
    if (this.children.some((e11) => e11.hasLabels)) {
      t12.drawPhase = T.LABEL;
      for (const r10 of e10)
        r10.processRender(t12);
    }
    if (has("esri-tiles-debug")) {
      t12.drawPhase = T.DEBUG;
      for (const r10 of e10)
        r10.processRender(t12);
    }
    this.painter.afterRenderPhases(t12), t12.profiler.recordEnd("drawLayers"), r9.logInfo();
  }
  doRender(e10) {
    const t12 = this.context, { state: r9, pixelRatio: s9 } = e10;
    this._canvas.resize(e10), t12.setViewport(0, 0, s9 * r9.size[0], s9 * r9.size[1]), t12.setDepthWriteEnabled(true), t12.setStencilWriteMask(255), this.renderChildren(e10);
  }
  async takeScreenshot(e10, t12, r9, s9) {
    const i14 = Math.round(this.state.size[0] * e10.resolutionScale), n13 = Math.round(this.state.size[1] * e10.resolutionScale), a6 = e10.resolutionScale, o11 = this.context, h9 = this._state.clone();
    if (null != s9) {
      const e11 = h9.viewpoint;
      h9.viewpoint.rotation = s9, h9.viewpoint = e11;
    }
    const d5 = { ...this._renderParameters, drawPhase: null, globalOpacity: 1, stationary: true, state: h9, pixelRatio: a6, time: performance.now(), deltaTime: 0, blendMode: null, effects: null, inFadeTransition: false, backgroundColor: r9 }, l8 = n6(o11.gl), c5 = new e5(i14, n13);
    c5.wrapMode = D.CLAMP_TO_EDGE, c5.internalFormat = l8 ? P2.RGBA8 : G.RGBA, c5.isImmutable = l8;
    const m4 = new E4(o11, c5, new i3(B.DEPTH_STENCIL, i14, n13)), b = o11.getBoundFramebufferObject(), y2 = o11.getViewport();
    o11.bindFramebuffer(m4), o11.setViewport(0, 0, i14, n13), this._renderChildren(t12 ?? this.children, d5);
    const C3 = this._readbackScreenshot(m4, { ...e10.cropArea, y: n13 - (e10.cropArea.y + e10.cropArea.height) });
    o11.bindFramebuffer(b), o11.setViewport(y2.x, y2.y, y2.width, y2.height), this.requestRender();
    const j4 = await C3;
    let T4;
    return 1 === e10.outputScale ? T4 = j4 : (T4 = new ImageData(Math.round(j4.width * e10.outputScale), Math.round(j4.height * e10.outputScale)), w3(j4, T4, true)), m4.dispose(), T4;
  }
  async _readbackScreenshot(e10, t12) {
    const r9 = s3(t12.width, t12.height, document.createElement("canvas"));
    return await e10.readPixelsAsync(t12.x, t12.y, t12.width, t12.height, G.RGBA, U.UNSIGNED_BYTE, new Uint8Array(r9.data.buffer)), r9;
  }
  _emptyTrash() {
    for (; this._trash.size > 0; ) {
      const e10 = Array.from(this._trash);
      this._trash.clear();
      for (const t12 of e10)
        t12.processDetach();
    }
  }
};

// node_modules/@arcgis/core/views/magnifier/resources.js
async function s8(s9) {
  const r9 = import("./mask-svg-ZMWVIECD.js"), i14 = import("./overlay-svg-EYCWNEKM.js"), o11 = t3((await r9).default, { signal: s9 }), e10 = t3((await i14).default, { signal: s9 }), m4 = { mask: await o11, overlay: await e10 };
  return s2(s9), m4;
}

// node_modules/@arcgis/core/views/2d/magnifier/MagnifierView2D.js
var A = class extends i6 {
  constructor() {
    super(), this._handles = new e(), this._resourcePixelRatio = 1, this.visible = false;
  }
  destroy() {
    this._handles = u(this._handles), this._disposeRenderResources(), this._resourcesTask = e2(this._resourcesTask);
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(e10) {
    this._backgroundColor = e10, this.requestRender();
  }
  get magnifier() {
    return this._magnifier;
  }
  set magnifier(e10) {
    this._magnifier = e10, this._handles.removeAll(), this._handles.add([d2(() => e10.version, () => {
      this.visible = e10.visible && null != e10.position && e10.size > 0, this.requestRender();
    }, P), d2(() => [e10.maskUrl, e10.overlayUrl], () => this._reloadResources()), d2(() => e10.size, () => {
      this._disposeRenderResources(), this.requestRender();
    })]);
  }
  _createTransforms() {
    return { dvs: e4() };
  }
  doRender(e10) {
    const r9 = e10.context;
    if (!this._resourcesTask)
      return void this._reloadResources();
    if (e10.drawPhase !== T.MAP || !this._canRender())
      return;
    this._updateResources(e10);
    const s9 = this._magnifier;
    if (null == s9.position)
      return;
    const i14 = e10.pixelRatio, o11 = s9.size * i14, a6 = 1 / s9.factor, n13 = Math.ceil(a6 * o11);
    this._readbackTexture.resize(n13, n13);
    const { size: l8 } = e10.state, h9 = i14 * l8[0], u7 = i14 * l8[1], m4 = 0.5 * n13, c5 = 0.5 * n13, _5 = i(i14 * s9.position.x, m4, h9 - m4 - 1), p2 = i(u7 - i14 * s9.position.y, c5, u7 - c5 - 1);
    r9.setBlendingEnabled(true);
    const f6 = _5 - m4, g2 = p2 - c5, b = this._readbackTexture;
    r9.bindTexture(b, 0), r9.gl.copyTexImage2D(b.descriptor.target, 0, b.descriptor.pixelFormat, f6, g2, n13, n13, 0);
    const T4 = this.backgroundColor, y2 = T4 ? [T4.a * T4.r / 255, T4.a * T4.g / 255, T4.a * T4.b / 255, T4.a] : [1, 1, 1, 1], k = (_5 + s9.offset.x * i14) / h9 * 2 - 1, R3 = (p2 - s9.offset.y * i14) / u7 * 2 - 1, v3 = o11 / h9 * 2, j4 = o11 / u7 * 2, A2 = this._program;
    r9.bindVAO(this._vertexArrayObject), r9.bindTexture(this._overlayTexture, 6), r9.bindTexture(this._maskTexture, 7), r9.useProgram(A2), A2.setUniform4fv("u_background", y2), A2.setUniform1i("u_readbackTexture", 0), A2.setUniform1i("u_overlayTexture", 6), A2.setUniform1i("u_maskTexture", 7), A2.setUniform4f("u_drawPos", k, R3, v3, j4), A2.setUniform1i("u_maskEnabled", s9.maskEnabled ? 1 : 0), A2.setUniform1i("u_overlayEnabled", s9.overlayEnabled ? 1 : 0), r9.setStencilTestEnabled(false), r9.setColorMask(true, true, true, true), r9.drawArrays(E.TRIANGLE_STRIP, 0, 4), r9.bindVAO();
  }
  _canRender() {
    return this.mask && this.overlay && null != this._magnifier;
  }
  _reloadResources() {
    this._resourcesTask && this._resourcesTask.abort();
    const s9 = null != this._magnifier ? this._magnifier.maskUrl : null, t12 = null != this._magnifier ? this._magnifier.overlayUrl : null;
    this._resourcesTask = d(async (r9) => {
      const i14 = null == s9 || null == t12 ? s8(r9) : null, o11 = null != s9 ? j(s9, { responseType: "image", signal: r9 }).then((e10) => e10.data) : i14.then((e10) => e10.mask), a6 = null != t12 ? j(t12, { responseType: "image", signal: r9 }).then((e10) => e10.data) : i14.then((e10) => e10.overlay), [n13, l8] = await Promise.all([o11, a6]);
      this.mask = n13, this.overlay = l8, this._disposeRenderResources(), this.requestRender();
    });
  }
  _disposeRenderResources() {
    this._readbackTexture = r(this._readbackTexture), this._overlayTexture = r(this._overlayTexture), this._maskTexture = r(this._maskTexture), this._vertexArrayObject = r(this._vertexArrayObject), this._program = r(this._program);
  }
  _updateResources(e10) {
    if (e10.pixelRatio !== this._resourcePixelRatio && this._disposeRenderResources(), this._readbackTexture)
      return;
    const r9 = e10.context;
    this._resourcePixelRatio = e10.pixelRatio;
    const s9 = Math.ceil(this._magnifier.size * e10.pixelRatio);
    this._program = t9(r9);
    const t12 = new Uint16Array([0, 1, 0, 0, 1, 1, 1, 0]), i14 = a2.attributes;
    this._vertexArrayObject = new f2(r9, i14, m, { geometry: h2.createVertex(r9, F.STATIC_DRAW, t12) }), this.overlay.width = s9, this.overlay.height = s9;
    const o11 = new e5();
    o11.internalFormat = G.RGBA, o11.wrapMode = D.CLAMP_TO_EDGE, o11.samplingMode = L.NEAREST, o11.flipped = true, o11.preMultiplyAlpha = !Pt(this.overlay.src) || !e10.context.driverTest.svgPremultipliesAlpha.result, this._overlayTexture = new T2(r9, o11, this.overlay), this.mask.width = s9, this.mask.height = s9, o11.pixelFormat = o11.internalFormat = G.ALPHA, this._maskTexture = new T2(r9, o11, this.mask);
    const a6 = 1 / this._magnifier.factor;
    o11.pixelFormat = o11.internalFormat = G.RGBA, o11.width = o11.height = Math.ceil(a6 * s9), o11.samplingMode = L.LINEAR, o11.flipped = false, this._readbackTexture = new T2(r9, o11);
  }
};
export {
  i9 as GraphicContainer,
  re as GraphicsView2D,
  a as LabelManager,
  A as MagnifierView2D,
  y as MapViewNavigation,
  T3 as Stage
};
//# sourceMappingURL=mapViewDeps-WMQOGTTQ.js.map
