import {
  j
} from "./chunk-BRF3NTLN.js";
import {
  f
} from "./chunk-LJAHTUH5.js";
import {
  E,
  S
} from "./chunk-TREPTI6V.js";

// node_modules/@arcgis/core/symbols/cim/ExpandedCIM.js
var s = { marker: E.MARKER, fill: E.FILL, line: E.LINE, text: E.TEXT };
var l = class {
  constructor(e, l2, n, r2) {
    const c = { minScale: l2 == null ? void 0 : l2.minScale, maxScale: l2 == null ? void 0 : l2.maxScale }, m = i(c);
    this.layers = e, this.data = l2, this.hash = this._createHash() + m, this.rendererKey = n;
    const o = { isOutline: false, placement: null, symbologyType: S.DEFAULT, vvFlags: n };
    for (const t of e) {
      const e2 = s[t.type];
      o.isOutline = "line" === t.type && t.isOutline, t.materialKey = f(e2, o), t.maxVVSize = r2, t.scaleInfo = c, t.templateHash += m;
    }
  }
  get type() {
    return "expanded-cim";
  }
  _createHash() {
    let e = "";
    for (const t of this.layers)
      e += t.templateHash;
    return e;
  }
};
function i(e) {
  return e.minScale || e.maxScale ? e.minScale + "-" + e.maxScale : "";
}

// node_modules/@arcgis/core/views/2d/layers/support/cimSymbolUtils.js
var a = async (a2, i3, r2) => {
  const n = new j(r2, i3);
  return new l(await n.analyzeSymbolReference(a2.data, false), a2.data, a2.rendererKey, a2.maxVVSize);
};
async function i2(e, t, i3, r2) {
  if (!e)
    return null;
  if ("cim" === e.type)
    return a(e, t, i3);
  if ("web-style" === e.type) {
    const { fetchCIMSymbolReference: n } = await import("./webStyleUtils-G2ESWF5N.js"), l2 = { type: "cim", data: await n(e, null, r2) ?? void 0, rendererKey: e.rendererKey, maxVVSize: e.maxVVSize };
    return a(l2, t, i3);
  }
  return e;
}
function r(e) {
  if (!e)
    return null;
  const { avoidSDFRasterization: t, type: a2, cim: i3, url: r2, materialHash: n, maxVVSize: l2 } = e, m = { cim: i3, type: a2, mosaicHash: n, url: r2, size: null, dashTemplate: null, path: null, text: null, fontName: null, animatedSymbolProperties: null, avoidSDFRasterization: t };
  switch (a2) {
    case "marker":
      l2 && "size" in i3 && (i3.size = Math.max(l2, i3.size)), m.size = e.size, m.path = e.path, m.animatedSymbolProperties = e.animatedSymbolProperties;
      break;
    case "line":
      m.dashTemplate = e.dashTemplate;
      break;
    case "text":
      m.text = e.text, m.fontName = e.fontName;
  }
  return m;
}

export {
  i2 as i,
  r
};
//# sourceMappingURL=chunk-2M3E5AI7.js.map
