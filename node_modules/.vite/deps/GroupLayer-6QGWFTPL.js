import {
  m as m2
} from "./chunk-ZKKM4KJT.js";
import "./chunk-673OQ2U7.js";
import {
  a as a3
} from "./chunk-7QZ2LBIE.js";
import {
  A as A2
} from "./chunk-U4ONWLTG.js";
import {
  j
} from "./chunk-POSLR7O2.js";
import {
  a as a2
} from "./chunk-P5VIVFJT.js";
import "./chunk-SA3C7GIT.js";
import "./chunk-P3R45ANF.js";
import {
  t as t3
} from "./chunk-PIEUUBJ5.js";
import {
  u
} from "./chunk-YIAYIZOZ.js";
import {
  m
} from "./chunk-P5GW5DPX.js";
import "./chunk-VIOPOI6P.js";
import "./chunk-HU7QYAVQ.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-6B7VJB6C.js";
import {
  d as d2,
  l as l2,
  t as t4
} from "./chunk-U5E2VNHU.js";
import {
  l
} from "./chunk-2AXTYAMY.js";
import {
  b
} from "./chunk-YXRSJYLG.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-S6NERLXF.js";
import "./chunk-WOGT6UK2.js";
import {
  f
} from "./chunk-UNONG753.js";
import {
  t as t2
} from "./chunk-OFRZSMZB.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-Z6KIMOUA.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-M7R7REMB.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import {
  S
} from "./chunk-BHJVWW2P.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-APYNYYQC.js";
import {
  A,
  C,
  d,
  v
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-XXFXRXFH.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import {
  o
} from "./chunk-WURET5CW.js";
import {
  r
} from "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  e2,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c,
  t
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a,
  k
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/support/tagSymbols.js
var e3 = Symbol("WebScene");

// node_modules/@arcgis/core/layers/GroupLayer.js
var V = class extends a2(t3(u(j(l2(d2(m(b))))))) {
  constructor(e4) {
    super(e4), this.allLayers = new l({ getCollections: () => [this.layers], getChildrenFunction: (e5) => "layers" in e5 ? e5.layers : null }), this.allTables = t4(this), this.fullExtent = void 0, this.operationalLayerType = "GroupLayer", this.spatialReference = void 0, this.type = "group", this._debouncedSaveOperations = k(async (e5, r2, t5) => {
      const { save: i, saveAs: s2 } = await import("./groupLayerUtils-4N3R4CQY.js");
      switch (e5) {
        case A2.SAVE:
          return i(this, r2);
        case A2.SAVE_AS:
          return s2(this, t5, r2);
      }
    });
  }
  initialize() {
    this._enforceVisibility(this.visibilityMode, this.visible), this.addHandles([d(() => {
      let e4 = this.parent;
      for (; e4 && "parent" in e4 && e4.parent; )
        e4 = e4.parent;
      return e4 && e3 in e4;
    }, (e4) => {
      const r2 = "prevent-adding-tables";
      this.removeHandles(r2), e4 && (this.tables.removeAll(), this.addHandles(v(() => this.tables, "before-add", (e5) => {
        e5.preventDefault(), s.getLogger(this).errorOnce("tables", "tables in group layers in a webscene are not supported. Please move the tables from the group layer to the webscene if you want to persist them.");
      }), r2));
    }, A), d(() => this.visible, this._onVisibilityChange.bind(this), C)]);
  }
  destroy() {
    this.allLayers.destroy(), this.allTables.destroy();
  }
  get sourceIsPortalItem() {
    return this.portalItem && this.originIdOf("portalItem") === e2.USER;
  }
  _writeLayers(e4, r2, t5, i) {
    const s2 = [];
    if (!e4)
      return s2;
    e4.forEach((e5) => {
      const r3 = f(e5, i.webmap ? i.webmap.getLayerJSONFromResourceInfo(e5) : null, i);
      (r3 == null ? void 0 : r3.layerType) && s2.push(r3);
    }), r2.layers = s2;
  }
  set portalItem(e4) {
    this._set("portalItem", e4);
  }
  readPortalItem(e4, r2, t5) {
    const { itemId: i, layerType: s2 } = r2;
    if ("GroupLayer" === s2 && i)
      return new S({ id: i, portal: t5 == null ? void 0 : t5.portal });
  }
  writePortalItem(e4, r2) {
    (e4 == null ? void 0 : e4.id) && (r2.itemId = e4.id);
  }
  set visibilityMode(e4) {
    const r2 = this._get("visibilityMode") !== e4;
    this._set("visibilityMode", e4), r2 && this._enforceVisibility(e4, this.visible);
  }
  async beforeSave() {
    return m2(this);
  }
  load(e4) {
    const r2 = this.loadFromPortal({ supportedTypes: ["Feature Service", "Feature Collection", "Group Layer", "Scene Service"], layerModuleTypeMap: a3 }, e4).catch((e5) => {
      if (a(e5), this.sourceIsPortalItem)
        throw e5;
    });
    return this.addResolvingPromise(r2), Promise.resolve(this);
  }
  async loadAll() {
    return t2(this, (e4) => {
      e4(this.layers, this.tables);
    });
  }
  async save(e4) {
    return this._debouncedSaveOperations(A2.SAVE, e4);
  }
  async saveAs(e4, r2) {
    return this._debouncedSaveOperations(A2.SAVE_AS, r2, e4);
  }
  layerAdded(e4) {
    e4.visible && "exclusive" === this.visibilityMode ? this._turnOffOtherLayers(e4) : "inherited" === this.visibilityMode && (e4.visible = this.visible), this.hasHandles(e4.uid) ? console.error(`Layer readded to Grouplayer: uid=${e4.uid}`) : this.addHandles(d(() => e4.visible, (r2) => this._onChildVisibilityChange(e4, r2), C), e4.uid);
  }
  layerRemoved(e4) {
    this.removeHandles(e4.uid), this._enforceVisibility(this.visibilityMode, this.visible);
  }
  _turnOffOtherLayers(e4) {
    this.layers.forEach((r2) => {
      r2 !== e4 && (r2.visible = false);
    });
  }
  _enforceVisibility(e4, r2) {
    if (!t(this).initialized)
      return;
    const t5 = this.layers;
    let i = t5.find((e5) => e5.visible);
    switch (e4) {
      case "exclusive":
        t5.length && !i && (i = t5.at(0), i.visible = true), this._turnOffOtherLayers(i);
        break;
      case "inherited":
        t5.forEach((e5) => {
          e5.visible = r2;
        });
    }
  }
  _onVisibilityChange(e4) {
    "inherited" === this.visibilityMode && this.layers.forEach((r2) => {
      r2.visible = e4;
    });
  }
  _onChildVisibilityChange(e4, r2) {
    switch (this.visibilityMode) {
      case "exclusive":
        r2 ? this._turnOffOtherLayers(e4) : this._isAnyLayerVisible() || (e4.visible = true);
        break;
      case "inherited":
        e4.visible = this.visible;
    }
  }
  _isAnyLayerVisible() {
    return this.layers.some((e4) => e4.visible);
  }
};
e([y({ readOnly: true, dependsOn: [] })], V.prototype, "allLayers", void 0), e([y({ readOnly: true })], V.prototype, "allTables", void 0), e([y({ json: { read: true, write: true } })], V.prototype, "blendMode", void 0), e([y()], V.prototype, "fullExtent", void 0), e([y({ readOnly: true })], V.prototype, "sourceIsPortalItem", null), e([y({ json: { read: false, write: { ignoreOrigin: true } } })], V.prototype, "layers", void 0), e([r("layers")], V.prototype, "_writeLayers", null), e([y({ type: ["GroupLayer"] })], V.prototype, "operationalLayerType", void 0), e([y({ json: { origins: { "web-map": { read: false, write: { overridePolicy(e4, r2, t5) {
  return { enabled: "Group Layer" === (e4 == null ? void 0 : e4.type) && (t5 == null ? void 0 : t5.initiator) !== this };
} } }, "web-scene": { read: false, write: false } } } })], V.prototype, "portalItem", null), e([o("web-map", "portalItem", ["itemId"])], V.prototype, "readPortalItem", null), e([r("web-map", "portalItem", { itemId: { type: String } })], V.prototype, "writePortalItem", null), e([y()], V.prototype, "spatialReference", void 0), e([y({ json: { read: false }, readOnly: true, value: "group" })], V.prototype, "type", void 0), e([y({ type: ["independent", "inherited", "exclusive"], value: "independent", json: { write: true, origins: { "web-map": { type: ["independent", "exclusive"], write: (e4, r2, t5) => {
  "inherited" !== e4 && (r2[t5] = e4);
} } } } })], V.prototype, "visibilityMode", null), V = e([c("esri.layers.GroupLayer")], V);
var E = V;
export {
  E as default
};
//# sourceMappingURL=GroupLayer-6QGWFTPL.js.map
