import {
  u
} from "./chunk-G557TGXY.js";
import {
  h
} from "./chunk-GAWSWBHO.js";
import {
  o as o2
} from "./chunk-V2RPSCV3.js";
import {
  o
} from "./chunk-WURET5CW.js";
import {
  r
} from "./chunk-QWPLZ3QH.js";
import {
  s
} from "./chunk-EUTNDAIV.js";
import {
  f
} from "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c as c2
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a,
  c
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/symbols/Symbol.js
var p = new s({ esriSMS: "simple-marker", esriPMS: "picture-marker", esriSLS: "simple-line", esriSFS: "simple-fill", esriPFS: "picture-fill", esriTS: "text", esriSHD: "shield-label-symbol", PointSymbol3D: "point-3d", LineSymbol3D: "line-3d", PolygonSymbol3D: "polygon-3d", WebStyleSymbol: "web-style", MeshSymbol3D: "mesh-3d", LabelSymbol3D: "label-3d", CIMSymbolReference: "cim" });
var c3 = 0;
var m = class extends f {
  constructor(r2) {
    super(r2), this.id = "sym" + c3++, this.type = null, this.color = new u([0, 0, 0, 1]);
  }
  readColor(r2) {
    return null != (r2 == null ? void 0 : r2[0]) ? [r2[0], r2[1], r2[2], r2[3] / 255] : r2;
  }
  async collectRequiredFields(r2, o3) {
  }
  hash() {
    return JSON.stringify(this.toJSON());
  }
  clone() {
  }
};
e([y({ type: p.apiValues, readOnly: true, json: { read: false, write: { ignoreOrigin: true, writer: p.write } } })], m.prototype, "type", void 0), e([y({ type: u, json: { write: { allowNull: true } } })], m.prototype, "color", void 0), e([o("color")], m.prototype, "readColor", null), m = e([c2("esri.symbols.Symbol")], m);
var a2 = m;

// node_modules/@arcgis/core/symbols/CIMSymbol.js
var n;
var l = n = class extends a2 {
  constructor(r2) {
    super(r2), this.data = null, this.type = "cim";
  }
  readData(r2, o3) {
    return o3;
  }
  writeData(r2, o3) {
    Object.assign(o3, r2);
  }
  async collectRequiredFields(r2, o3) {
    var _a;
    if ("CIMSymbolReference" === ((_a = this.data) == null ? void 0 : _a.type)) {
      const t = this.data.primitiveOverrides;
      if (t) {
        const e2 = t.map((t2) => {
          const e3 = t2.valueExpressionInfo;
          return h(r2, o3, e3.expression);
        });
        await Promise.all(e2);
      }
    }
  }
  clone() {
    return new n({ data: a(this.data) });
  }
  hash() {
    return c(JSON.stringify(this.data)).toString();
  }
};
e([y({ json: { write: false } })], l.prototype, "color", void 0), e([y({ json: { write: true } })], l.prototype, "data", void 0), e([o("data", ["symbol"])], l.prototype, "readData", null), e([r("data", {})], l.prototype, "writeData", null), e([o2({ CIMSymbolReference: "cim" }, { readOnly: true })], l.prototype, "type", void 0), l = n = e([c2("esri.symbols.CIMSymbol")], l);
var d = l;

export {
  a2 as a,
  d
};
//# sourceMappingURL=chunk-MLRHWRJQ.js.map
