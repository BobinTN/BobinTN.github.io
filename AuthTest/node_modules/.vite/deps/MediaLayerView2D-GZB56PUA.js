import {
  l
} from "./chunk-3U7ON3ZU.js";
import "./chunk-CQ6GN5T7.js";
import "./chunk-NAWD2VOB.js";
import "./chunk-FK3SCHPC.js";
import "./chunk-3Y5JS6MU.js";
import "./chunk-MPQZTJY3.js";
import "./chunk-GPOJ5GQM.js";
import {
  n4 as n3,
  w
} from "./chunk-VLDVHSJX.js";
import {
  m,
  u as u2
} from "./chunk-TXY7QCH7.js";
import {
  i as i3
} from "./chunk-ULPUCHVC.js";
import "./chunk-DRBYLQY3.js";
import {
  f as f2
} from "./chunk-BV5PCIP6.js";
import "./chunk-UDTTHPQA.js";
import "./chunk-R72HXU5Y.js";
import "./chunk-BXZIEADJ.js";
import {
  i as i2,
  j
} from "./chunk-7DXPUA4N.js";
import "./chunk-L7TO2DFS.js";
import "./chunk-PTWYQEPE.js";
import "./chunk-BNTQULGG.js";
import {
  h as h2
} from "./chunk-A6KO3R3G.js";
import {
  T as T2,
  e2 as e4
} from "./chunk-T56C4ORZ.js";
import "./chunk-RN5RTM2J.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-X2WF3O7G.js";
import "./chunk-MGMW5F44.js";
import "./chunk-ST3TBFQ6.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-ODGAHKYT.js";
import "./chunk-NI23WAWZ.js";
import {
  r as r7
} from "./chunk-GBFYGM27.js";
import "./chunk-MXOY2B3L.js";
import "./chunk-NB4VIBDC.js";
import "./chunk-7PBKZJWC.js";
import "./chunk-JNWIDZDW.js";
import "./chunk-3XN3CFM5.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-MUSQVDUI.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-GSATUKJ4.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-HR42LBYN.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import {
  T
} from "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import {
  d as d2
} from "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-46VITINB.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import {
  D,
  F
} from "./chunk-RCLKRKWR.js";
import {
  e as e2
} from "./chunk-2RN2AAP7.js";
import "./chunk-OYPRFNII.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-KXF4D4TD.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-MJTRXEE4.js";
import "./chunk-2XWWTLSJ.js";
import "./chunk-LVN3FGME.js";
import "./chunk-F3LMPTMS.js";
import "./chunk-P3R45ANF.js";
import "./chunk-SHFNNIVW.js";
import "./chunk-IYYYQK4Y.js";
import "./chunk-QN7I7LNY.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-HKYMYCLL.js";
import "./chunk-ICVVQFO6.js";
import "./chunk-EA6ZJZL6.js";
import "./chunk-VKTTTBW2.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-3RBII4KE.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-7YZ4X2DS.js";
import "./chunk-UPGPT5OX.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-CKGVKMVG.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-2S2NELNV.js";
import {
  lt
} from "./chunk-3II2L7GF.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-JLSYG6MV.js";
import {
  e as e3
} from "./chunk-76KPSQLT.js";
import {
  n as n2
} from "./chunk-MVXU4PVF.js";
import "./chunk-ZBT4RUU7.js";
import {
  r as r6
} from "./chunk-DZE6ZO7Z.js";
import {
  y as y2
} from "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import "./chunk-EY7PGBJG.js";
import {
  t
} from "./chunk-6M5DUIJQ.js";
import {
  n
} from "./chunk-CMGHBCKF.js";
import {
  M as M2,
  f,
  h,
  i,
  r as r5
} from "./chunk-YVNEJWNQ.js";
import {
  r as r4
} from "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import {
  L
} from "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-J2R5B4T4.js";
import "./chunk-JIDGV6CL.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-B3RXTW72.js";
import "./chunk-DCYI44X2.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-4NU7FZD7.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-MLRHWRJQ.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import {
  c as c2
} from "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import {
  u
} from "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import {
  o
} from "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  P,
  d,
  p,
  v
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import {
  V
} from "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import {
  M,
  s as s3,
  x
} from "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import {
  G
} from "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c,
  r2 as r3
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  b,
  r as r2
} from "./chunk-RFPH3ZTZ.js";
import {
  r
} from "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/Overlay.js
var j2 = e2();
var V2 = { none: d2.None, loop: d2.Loop, oscillate: d2.Oscillate };
function b2(e5) {
  return e5 ? { ...e5, playAnimation: e5.playing, repeatType: e5.repeatType ? V2[e5.repeatType] : void 0 } : {};
}
var T3 = class extends i3 {
  constructor(s4) {
    super(), this.elementView = s4, this.isWrapAround = false, this.perspectiveTransform = n(), this._playHandle = null, this._vertices = new Float32Array(20), this._handles = [], this._handles.push(d(() => this.elementView.element.opacity, (e5) => this.opacity = e5, P), d(() => [this.elementView.coords], () => {
      this.requestRender();
    }, P), d(() => ["animationOptions" in this.elementView.element && this.elementView.element.animationOptions], () => {
      var _a;
      (_a = this._playHandle) == null ? void 0 : _a.remove(), this.texture = r(this.texture), this.requestRender();
    }, P), p(() => this.elementView.element.loaded, () => {
      const e5 = this.elementView.element;
      this.ready(), "video" === e5.type && null != e5.content && this._handles.push(r2(e5.content, "play", () => this.requestRender()));
    }, P)), s4.element.load().catch((t2) => {
      s.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s2("element-load-error", "Element cannot be displayed", { element: s4, error: t2 }));
    });
  }
  destroy() {
    var _a;
    (_a = this._playHandle) == null ? void 0 : _a.remove(), this._handles.forEach((e5) => e5.remove()), this.texture = r(this.texture);
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(e5) {
    const { context: t2 } = e5, r8 = this.elementView.element.content;
    if (null != r8) {
      const e6 = r8 instanceof HTMLImageElement, i4 = r8 instanceof HTMLVideoElement, o2 = e6 ? r8.naturalWidth : i4 ? r8.videoWidth : r8.width, n4 = e6 ? r8.naturalHeight : i4 ? r8.videoHeight : r8.height;
      if (this._updatePerspectiveTransform(o2, n4), this.texture)
        i4 && !r8.paused && (this.texture.setData(r8), this.requestRender(), (t2.type === n2.WEBGL2 || o(o2) && o(n4)) && this.texture.generateMipmap());
      else {
        const e7 = new e4();
        if (e7.wrapMode = D.CLAMP_TO_EDGE, e7.preMultiplyAlpha = true, e7.width = o2, e7.height = n4, "getFrame" in r8) {
          const s4 = (r9) => {
            this.texture ? this.texture.setData(r9) : this.texture = new T2(t2, e7, r9), this.requestRender();
          };
          "animationOptions" in this.elementView.element && (this._playHandle = l(r8, b2(this.elementView.element.animationOptions), null, s4));
        } else
          this.texture = new T2(t2, e7, r8);
        (t2.type === n2.WEBGL2 || o(o2) && o(n4)) && this.texture.generateMipmap(), i4 && !r8.paused && this.requestRender();
      }
    }
    super.beforeRender(e5);
  }
  _createTransforms() {
    return null;
  }
  updateDrawCoords(e5, t2) {
    const r8 = this.elementView.coords;
    if (null == r8)
      return;
    const [s4, i4, o2, n4] = r8.rings[0], a = this._vertices, { x: m2, y: l2 } = e5, h3 = 0 !== t2;
    h3 ? a.set([i4[0] - m2, i4[1] - l2, s4[0] - m2, s4[1] - l2, o2[0] - m2, o2[1] - l2, n4[0] - m2, n4[1] - l2, n4[0] - m2, n4[1] - l2, i4[0] + t2 - m2, i4[1] - l2, i4[0] + t2 - m2, i4[1] - l2, s4[0] + t2 - m2, s4[1] - l2, o2[0] + t2 - m2, o2[1] - l2, n4[0] + t2 - m2, n4[1] - l2]) : a.set([i4[0] - m2, i4[1] - l2, s4[0] - m2, s4[1] - l2, o2[0] - m2, o2[1] - l2, n4[0] - m2, n4[1] - l2]), this.isWrapAround = h3;
  }
  getVAO(e5, t2, r8) {
    if (null == this.elementView.coords)
      return null;
    const s4 = this._vertices;
    if (this._vao)
      this._geometryVbo.setData(s4);
    else {
      this._geometryVbo = h2.createVertex(e5, F.DYNAMIC_DRAW, s4);
      const i4 = h2.createVertex(e5, F.STATIC_DRAW, new Uint16Array([0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]));
      this._vao = new f2(e5, r8, t2, { geometry: this._geometryVbo, tex: i4 });
    }
    return this._vao;
  }
  _updatePerspectiveTransform(e5, t2) {
    const r8 = this._vertices;
    j(j2, [0, 0, e5, 0, 0, t2, e5, t2], [r8[0], r8[1], r8[4], r8[5], r8[2], r8[3], r8[6], r8[7]]), r4(this.perspectiveTransform, j2[6] / j2[8] * e5, j2[7] / j2[8] * t2);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayContainer.js
var u3 = class extends n3 {
  constructor() {
    super(...arguments), this._localOrigin = c2(0, 0), this._viewStateId = -1, this._dvsMat3 = e3();
  }
  get dvsMat3() {
    return this._dvsMat3;
  }
  beforeRender(t2) {
    this._updateMatrices(t2), this._updateOverlays(t2, this.children);
    for (const e5 of this.children)
      e5.beforeRender(t2);
  }
  prepareRenderPasses(t2) {
    const e5 = t2.registerRenderPass({ name: "overlay", brushes: [w.overlay], target: () => this.children, drawPhase: T.MAP });
    return [...super.prepareRenderPasses(t2), e5];
  }
  _updateMatrices(t2) {
    const { state: i4 } = t2, { id: l2, size: d3, pixelRatio: h3, resolution: m2, rotation: f3, viewpoint: u4, displayMat3: M3 } = i4;
    if (this._viewStateId === l2)
      return;
    const v3 = Math.PI / 180 * f3, _2 = h3 * d3[0], w3 = h3 * d3[1], { x: g, y: y3 } = u4.targetGeometry, j3 = L(g, i4.spatialReference);
    this._localOrigin.x = j3, this._localOrigin.y = y3;
    const R2 = m2 * _2, b4 = m2 * w3, P2 = r5(this._dvsMat3);
    i(P2, P2, M3), M2(P2, P2, t(_2 / 2, w3 / 2)), f(P2, P2, r7(_2 / R2, -w3 / b4, 1)), h(P2, P2, -v3), this._viewStateId = l2;
  }
  _updateOverlays(t2, e5) {
    const { state: s4 } = t2, { rotation: r8, spatialReference: o2, worldScreenWidth: a, size: i4, viewpoint: n4 } = s4, c3 = this._localOrigin;
    let p2 = 0;
    const h3 = G(o2);
    if (h3 && o2.isWrappable) {
      const t3 = i4[0], l2 = i4[1], m2 = 180 / Math.PI * r8, f3 = Math.abs(Math.cos(m2)), u4 = Math.abs(Math.sin(m2)), M3 = Math.round(t3 * f3 + l2 * u4), [v3, _2] = h3.valid, w3 = lt(o2), { x: g, y: y3 } = n4.targetGeometry, j3 = [g, y3], R2 = [0, 0];
      s4.toScreen(R2, j3);
      const b4 = [0, 0];
      let P2;
      P2 = M3 > a ? 0.5 * a : 0.5 * M3;
      const x2 = Math.floor((g + 0.5 * w3) / w3), O = v3 + x2 * w3, C = _2 + x2 * w3, I = [R2[0] + P2, 0];
      s4.toMap(b4, I), b4[0] > C && (p2 = w3), I[0] = R2[0] - P2, s4.toMap(b4, I), b4[0] < O && (p2 = -w3);
      for (const s5 of e5) {
        const t4 = s5.elementView.bounds;
        if (null == t4)
          continue;
        const [e6, , r9] = t4;
        e6 < v3 && r9 > v3 ? s5.updateDrawCoords(c3, w3) : r9 > _2 && e6 < _2 ? s5.updateDrawCoords(c3, -w3) : s5.updateDrawCoords(c3, p2);
      }
    } else
      for (const l2 of e5)
        l2.updateDrawCoords(c3, p2);
  }
};

// node_modules/@arcgis/core/views/2d/layers/MediaLayerView2D.js
var w2 = class extends m(u2) {
  constructor() {
    super(...arguments), this._overlayContainer = null, this._fetchQueue = null, this._tileStrategy = null, this._elementReferences = /* @__PURE__ */ new Map(), this._debugGraphicsView = null, this.layer = null, this.elements = new V();
  }
  attach() {
    this.addAttachHandles([v(() => this.layer.effectiveSource, "refresh", () => {
      this._tileStrategy.refresh((e5) => this._updateTile(e5)), this.requestUpdate();
    }), v(() => this.layer.effectiveSource, "change", ({ element: e5 }) => this._elementUpdateHandler(e5))]), this._overlayContainer = new u3(), this.container.addChild(this._overlayContainer), this._fetchQueue = new y2({ tileInfoView: this.view.featuresTilingScheme, concurrency: 10, process: (e5, r8) => this._queryElements(e5, r8) }), this._tileStrategy = new r6({ cachePolicy: "purge", resampling: true, acquireTile: (e5) => this._acquireTile(e5), releaseTile: (e5) => this._releaseTile(e5), tileInfoView: this.view.featuresTilingScheme }), this.requestUpdate();
  }
  detach() {
    var _a;
    this.elements.removeAll(), this._tileStrategy.destroy(), this._fetchQueue.destroy(), this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this._elementReferences.clear(), (_a = this._debugGraphicsView) == null ? void 0 : _a.destroy();
  }
  supportsSpatialReference(e5) {
    return true;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  update(e5) {
    var _a;
    this._tileStrategy.update(e5), (_a = this._debugGraphicsView) == null ? void 0 : _a.update(e5);
  }
  async hitTest(e5, r8) {
    const t2 = [], s4 = e5.normalize(), i4 = [s4.x, s4.y];
    for (const { projectedElement: { normalizedCoords: n4, element: o2 } } of this._elementReferences.values())
      null != n4 && s3(n4.rings, i4) && t2.push({ type: "media", element: o2, layer: this.layer, mapPoint: e5, sourcePoint: o2.toSource(e5) });
    return t2.reverse();
  }
  canResume() {
    return null != this.layer.source && super.canResume();
  }
  async doRefresh() {
    this._fetchQueue.reset(), this._tileStrategy.refresh((e5) => this._updateTile(e5));
  }
  _acquireTile(e5) {
    const r8 = new T4(e5.clone());
    return this._updateTile(r8), r8;
  }
  _updateTile(e5) {
    this._updatingHandles.addPromise(this._fetchQueue.push(e5.key).then((r8) => {
      const [t2, s4] = e5.setElements(r8);
      this._referenceElements(e5, t2), this._dereferenceElements(e5, s4), this.requestUpdate();
    }, (e6) => {
      b(e6) || s.getLogger(this).error(e6);
    }));
  }
  _releaseTile(e5) {
    this._fetchQueue.abort(e5.key.id), e5.elements && this._dereferenceElements(e5, e5.elements), this.requestUpdate();
  }
  async _queryElements(e5, r8) {
    const t2 = this.layer.effectiveSource;
    if (null == t2)
      return [];
    this.view.featuresTilingScheme.getTileBounds(b3, e5, true);
    const s4 = new M({ xmin: b3[0], ymin: b3[1], xmax: b3[2], ymax: b3[3], spatialReference: this.view.spatialReference });
    return t2.queryElements(s4, r8);
  }
  _referenceElements(e5, r8) {
    if (null != this.layer.source)
      for (const t2 of r8)
        this._referenceElement(e5, t2);
  }
  _referenceElement(e5, r8) {
    r3(this._elementReferences, r8.uid, () => {
      const e6 = new i2({ element: r8, spatialReference: this.view.spatialReference }), t2 = new T3(e6);
      this._overlayContainer.addChild(t2), this.elements.add(r8);
      let s4 = null;
      return { tiles: /* @__PURE__ */ new Set(), projectedElement: e6, overlay: t2, debugGraphic: s4 };
    }).tiles.add(e5);
  }
  _dereferenceElements(e5, r8) {
    for (const t2 of r8)
      this._dereferenceElement(e5, t2);
  }
  _dereferenceElement(e5, r8) {
    var _a;
    const t2 = this._elementReferences.get(r8.uid);
    t2.tiles.delete(e5), t2.tiles.size || (this._overlayContainer.removeChild(t2.overlay), t2.overlay.destroy(), t2.projectedElement.destroy(), this._elementReferences.delete(r8.uid), this.elements.remove(r8), (_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(t2.debugGraphic));
  }
  _elementUpdateHandler(e5) {
    var _a;
    let r8 = this._elementReferences.get(e5.uid);
    if (r8) {
      const t3 = r8.projectedElement.normalizedCoords;
      if (null == t3)
        return this._overlayContainer.removeChild(r8.overlay), r8.overlay.destroy(), r8.projectedElement.destroy(), this._elementReferences.delete(e5.uid), this.elements.remove(e5), void ((_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(r8.debugGraphic));
      const s4 = [], i4 = [];
      for (const e6 of this._tileStrategy.tiles) {
        const n4 = v2(this.view.featuresTilingScheme, e6, t3);
        r8.tiles.has(e6) ? n4 || i4.push(e6) : n4 && s4.push(e6);
      }
      for (const r9 of s4)
        this._referenceElement(r9, e5);
      for (const r9 of i4)
        this._dereferenceElement(r9, e5);
      return r8 = this._elementReferences.get(e5.uid), void ((r8 == null ? void 0 : r8.debugGraphic) && (r8.debugGraphic.geometry = r8.projectedElement.normalizedCoords, this._debugGraphicsView.graphicUpdateHandler({ graphic: r8.debugGraphic, property: "geometry" })));
    }
    const t2 = new i2({ element: e5, spatialReference: this.view.spatialReference }).normalizedCoords;
    if (null != t2)
      for (const s4 of this._tileStrategy.tiles) {
        v2(this.view.featuresTilingScheme, s4, t2) && this._referenceElement(s4, e5);
      }
  }
};
e([y()], w2.prototype, "layer", void 0), e([y({ readOnly: true })], w2.prototype, "elements", void 0), w2 = e([c("esri.views.2d.layers.MediaLayerView2D")], w2);
var b3 = u();
var _ = { xmin: 0, ymin: 0, xmax: 0, ymax: 0 };
function v2(e5, r8, t2) {
  return e5.getTileBounds(b3, r8.key, true), _.xmin = b3[0], _.ymin = b3[1], _.xmax = b3[2], _.ymax = b3[3], x(_, t2);
}
var T4 = class {
  constructor(e5) {
    this.key = e5, this.elements = null, this.isReady = false, this.visible = true;
  }
  setElements(e5) {
    const r8 = [], t2 = new Set(this.elements);
    this.elements = e5;
    for (const s4 of e5)
      t2.has(s4) ? t2.delete(s4) : r8.push(s4);
    return this.isReady = true, [r8, Array.from(t2)];
  }
  destroy() {
  }
};
var R = w2;
export {
  R as default
};
//# sourceMappingURL=MediaLayerView2D-GZB56PUA.js.map
