import {
  d as d2,
  f as f2,
  h as h2
} from "./chunk-WKC2TOHI.js";
import {
  a
} from "./chunk-ADJOAZCR.js";
import {
  v
} from "./chunk-KDISRI7N.js";
import {
  a as a3
} from "./chunk-6767T2MY.js";
import {
  a as a2
} from "./chunk-INVSGWP7.js";
import {
  l
} from "./chunk-6QKODWQB.js";
import "./chunk-FRDRZ2UD.js";
import {
  re
} from "./chunk-FK3SCHPC.js";
import "./chunk-BSLKLRMY.js";
import "./chunk-FBWFFZ74.js";
import "./chunk-3Y5JS6MU.js";
import "./chunk-MPQZTJY3.js";
import "./chunk-GPOJ5GQM.js";
import {
  n4 as n
} from "./chunk-VLDVHSJX.js";
import {
  m as m2,
  u
} from "./chunk-TXY7QCH7.js";
import {
  h
} from "./chunk-ULPUCHVC.js";
import "./chunk-BV5PCIP6.js";
import "./chunk-BXZIEADJ.js";
import "./chunk-L7TO2DFS.js";
import "./chunk-A6KO3R3G.js";
import "./chunk-T56C4ORZ.js";
import {
  p
} from "./chunk-L6C4TBYZ.js";
import {
  J
} from "./chunk-OQKR5TK4.js";
import {
  M as M2,
  f2 as f,
  m
} from "./chunk-ABKJC2RS.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-ST3TBFQ6.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-NI23WAWZ.js";
import "./chunk-GBFYGM27.js";
import "./chunk-7PBKZJWC.js";
import "./chunk-JNWIDZDW.js";
import "./chunk-3XN3CFM5.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-MUSQVDUI.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-GSATUKJ4.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-HR42LBYN.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import {
  T as T2
} from "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-46VITINB.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import "./chunk-RCLKRKWR.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-KXF4D4TD.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-MJTRXEE4.js";
import "./chunk-2XWWTLSJ.js";
import "./chunk-P3R45ANF.js";
import {
  j as j2
} from "./chunk-WDO2BXGR.js";
import "./chunk-QN7I7LNY.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-ICVVQFO6.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-3RBII4KE.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-UPGPT5OX.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-VA52CKTT.js";
import {
  b as b2
} from "./chunk-45OAWGCA.js";
import "./chunk-X2TA76Q5.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-XN6LAULS.js";
import "./chunk-CKGVKMVG.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-JLSYG6MV.js";
import {
  i
} from "./chunk-2EG2F4T2.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import "./chunk-ZBT4RUU7.js";
import "./chunk-DZE6ZO7Z.js";
import "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import "./chunk-EY7PGBJG.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-CQMEHG4P.js";
import "./chunk-GZTU5O23.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-24NOAXOQ.js";
import {
  c as c2
} from "./chunk-B3RXTW72.js";
import "./chunk-DCYI44X2.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-4NU7FZD7.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-MLRHWRJQ.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-2AXFVQBN.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  A,
  C,
  d
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import {
  V
} from "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import {
  x2 as x
} from "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import {
  T
} from "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import {
  j
} from "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  g,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  b,
  e as e2,
  k
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var m3 = class extends g {
  constructor() {
    super(...arguments), this.attached = false, this.container = new h(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new a3();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(t2) {
    this.strategy.update(t2).catch((t3) => {
      b(t3) || s.getLogger(this).error(t3);
    });
  }
  hitTest(t2) {
    return new c2({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const t2 = this.layer.version >= 10, e3 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, i2 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new v({ container: this._bitmapView, imageNormalizationSupported: t2, imageMaxHeight: e3, imageMaxWidth: i2, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports(async (t2) => {
      const { source: e3 } = t2;
      if (!e3 || e3 instanceof ImageBitmap)
        return;
      const i2 = await this.layer.applyRenderer({ extent: e3.extent, pixelBlock: e3.originalPixelBlock ?? e3.pixelBlock });
      e3.filter = (t3) => this.layer.pixelFilter ? this.layer.applyFilter(t3) : { ...i2, extent: e3.extent };
    }).catch((t2) => {
      b(t2) || s.getLogger(this).error(t2);
    });
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating)
      return null;
    const t2 = this.strategy.bitmaps;
    if (1 === t2.length && t2[0].source)
      return { extent: t2[0].source.extent, pixelBlock: t2[0].source.originalPixelBlock };
    if (t2.length > 1) {
      const e3 = this.view.extent, i2 = t2.map((t3) => t3.source).filter((t3) => t3.extent && t3.extent.intersects(e3)).map((t3) => ({ extent: t3.extent, pixelBlock: t3.originalPixelBlock })), r = M2(i2, e3);
      return null != r ? { extent: r.extent, pixelBlock: r.pixelBlock } : null;
    }
    return null;
  }
  async _fetchImage(t2, e3, i2, r) {
    var _a;
    (r = r || {}).timeExtent = this.timeExtent, r.requestAsImageElement = true, r.returnImageBitmap = true;
    const s3 = await this.layer.fetchImage(t2, e3, i2, r);
    if (s3.imageBitmap)
      return s3.imageBitmap;
    const a4 = await this.layer.applyRenderer(s3.pixelData, { signal: r.signal }), o = new l(a4.pixelBlock, (_a = a4.extent) == null ? void 0 : _a.clone(), s3.pixelData.pixelBlock);
    return o.filter = (t3) => this.layer.applyFilter(t3), o;
  }
};
e([y()], m3.prototype, "attached", void 0), e([y()], m3.prototype, "container", void 0), e([y()], m3.prototype, "layer", void 0), e([y()], m3.prototype, "strategy", void 0), e([y()], m3.prototype, "timeExtent", void 0), e([y()], m3.prototype, "view", void 0), e([y()], m3.prototype, "updateRequested", void 0), e([y()], m3.prototype, "updating", null), e([y()], m3.prototype, "type", void 0), m3 = e([c("esri.views.2d.layers.imagery.ImageryView2D")], m3);
var u2 = m3;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t = class extends n {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  prepareRenderPasses(s3) {
    const t2 = s3.registerRenderPass({ name: "imagery (vf)", brushes: [d2], target: () => this.children, drawPhase: T2.MAP });
    return [...super.prepareRenderPasses(s3), t2];
  }
  doRender(e3) {
    this.visible && e3.drawPhase === T2.MAP && this.symbolTypes.forEach((r) => {
      e3.renderPass = r, super.doRender(e3);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var c3 = class extends g {
  constructor(e3) {
    super(e3), this._loading = null, this.update = k((e4, t2) => this._update(e4, t2).catch((e5) => {
      b(e5) || s.getLogger(this).error(e5);
    }));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e3) {
    if (!this.container.children.length)
      return;
    const t2 = this.container.children[0];
    t2.symbolizerParameters = e3, t2.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e3.style ? ["scalar", "triangle"] : "simple_scalar" === e3.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e3, t2, r) {
    if (!e3.stationary)
      return;
    const { extent: i2, spatialReference: s3 } = e3.state, o = new M({ xmin: i2.xmin, ymin: i2.ymin, xmax: i2.xmax, ymax: i2.ymax, spatialReference: s3 }), [a4, l2] = e3.state.size;
    this._loading = this.fetchPixels(o, a4, l2, r);
    const c4 = await this._loading;
    this._addToDisplay(c4, t2, e3.state), this._loading = null;
  }
  _addToDisplay(e3, t2, r) {
    if (null == e3.pixelBlock)
      return this.container.children.forEach((e4) => e4.destroy()), void this.container.removeAllChildren();
    const { extent: i2, pixelBlock: s3 } = e3, o = new f2(s3);
    o.offset = [0, 0], o.symbolizerParameters = t2, o.rawPixelData = e3, o.invalidateVAO(), o.x = i2.xmin, o.y = i2.ymax, o.pixelRatio = r.pixelRatio, o.rotation = r.rotation, o.resolution = r.resolution, o.width = s3.width * t2.symbolTileSize, o.height = s3.height * t2.symbolTileSize, this.container.children.forEach((e4) => e4.destroy()), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t2.style ? ["scalar", "triangle"] : "simple_scalar" === t2.style ? ["scalar"] : ["triangle"], this.container.addChild(o);
  }
};
e([y()], c3.prototype, "fetchPixels", void 0), e([y()], c3.prototype, "container", void 0), e([y()], c3.prototype, "_loading", void 0), e([y()], c3.prototype, "updating", null), c3 = e([c("esri.views.2d.layers.imagery.ImageryVFStrategy")], c3);
var p2 = c3;

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var f3 = class extends g {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (t2, e3, r, i2) => {
      const s3 = await this._projectFullExtentPromise, { symbolTileSize: a4 } = this.layer.renderer, { extent: o, width: n3, height: l2 } = m(t2, e3, r, a4, s3);
      if (null != s3 && !s3.intersects(t2))
        return { extent: o, pixelBlock: null };
      const c4 = { bbox: `${o.xmin}, ${o.ymin}, ${o.xmax}, ${o.ymax}`, exportParametersVersion: this.layer.exportImageServiceParameters.version, symbolTileSize: a4, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(c4)) {
        const t3 = this.getPixelData();
        if (null != t3) {
          if (`${t3.extent.xmin}, ${t3.extent.ymin}, ${t3.extent.xmax}, ${t3.extent.ymax}` === c4.bbox)
            return t3;
        }
      }
      const { pixelData: m4 } = await this.layer.fetchImage(o, n3, l2, { timeExtent: this.timeExtent, requestAsImageElement: false, signal: i2 });
      this._dataParameters = c4;
      const p3 = m4 == null ? void 0 : m4.pixelBlock;
      if (null == p3)
        return { extent: o, pixelBlock: null };
      return { extent: o, pixelBlock: "vector-uv" === this.layer.rasterInfo.dataType ? f(p3, "vector-uv") : p3 };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new p2({ container: this.container, fetchPixels: this._fetchpixels }), this.addHandles(d(() => this.layer.renderer, (t2) => this._updateSymbolizerParams(t2), A), "attach");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach((t2) => t2.destroy()), this.container.removeAllChildren(), this.removeHandles("attach"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    var _a;
    const t2 = (_a = this.container.children[0]) == null ? void 0 : _a.rawPixelData;
    if (this.updating || !t2)
      return null;
    const { extent: e3, pixelBlock: r } = t2;
    return { extent: e3, pixelBlock: r };
  }
  hitTest(t2) {
    return new c2({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  update(t2) {
    this._strategy.update(t2, this._symbolizerParams).catch((t3) => {
      b(t3) || s.getLogger(this).error(t3);
    });
  }
  redraw() {
    const { renderer: t2 } = this.layer;
    t2 && (this._updateSymbolizerParams(t2), this._strategy.redraw(this._symbolizerParams));
  }
  _canReuseVectorFieldData(t2) {
    const e3 = this._dataParameters.exportParametersVersion === t2.exportParametersVersion, r = this._dataParameters.time === t2.time, i2 = this._dataParameters.symbolTileSize === t2.symbolTileSize, s3 = this._dataParameters.bbox === t2.bbox;
    return e3 && r && i2 && s3;
  }
  async _getProjectedFullExtent(t2) {
    try {
      return J(this.layer.fullExtent, t2);
    } catch (e3) {
      try {
        const e4 = (await j(this.layer.url, { query: { option: "footprints", outSR: T(t2), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return e4 ? M.fromJSON(e4) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(t2) {
    "vector-field" === t2.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
e([y()], f3.prototype, "attached", void 0), e([y()], f3.prototype, "container", void 0), e([y()], f3.prototype, "layer", void 0), e([y()], f3.prototype, "timeExtent", void 0), e([y()], f3.prototype, "type", void 0), e([y()], f3.prototype, "view", void 0), e([y()], f3.prototype, "updating", null), f3 = e([c("esri.views.2d.layers.imagery.VectorFieldView2D")], f3);
var g2 = f3;

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var n2 = (n3) => {
  let u3 = class extends n3 {
    constructor() {
      super(...arguments), this.view = null;
    }
    async fetchPopupFeatures(e3, t2) {
      const { layer: o } = this;
      if (!e3)
        throw new s2("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: o });
      const { popupEnabled: p3 } = o, n4 = p(o, t2);
      if (!p3 || null == n4)
        throw new s2("imagerylayerview:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: p3, popupTemplate: n4 });
      const u4 = await n4.getRequiredFields(), l2 = new b2();
      l2.timeExtent = this.timeExtent, l2.geometry = e3, l2.outFields = u4, l2.outSpatialReference = e3.spatialReference;
      const { resolution: m4, spatialReference: c4 } = this.view, y2 = "2d" === this.view.type ? new x(m4, m4, c4) : new x(0.5 * m4, 0.5 * m4, c4), { returnTopmostRaster: d3, showNoDataRecords: h3 } = n4.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, w = { returnDomainValues: true, returnTopmostRaster: d3, pixelSize: y2, showNoDataRecords: h3, signal: null != t2 ? t2.signal : null };
      return o.queryVisibleRasters(l2, w).then((e4) => e4);
    }
    canResume() {
      var _a;
      return !!super.canResume() && !((_a = this.timeExtent) == null ? void 0 : _a.isEmpty);
    }
  };
  return e([y()], u3.prototype, "layer", void 0), e([y()], u3.prototype, "suspended", void 0), e([y(j2)], u3.prototype, "timeExtent", void 0), e([y()], u3.prototype, "view", void 0), u3 = e([c("esri.views.layers.ImageryLayerView")], u3), u3;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var v2 = class extends n2(a2(m2(u))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new i(), this._highlightView = void 0, this.layer = null, this.subview = null;
  }
  get pixelData() {
    const { subview: e3 } = this;
    return this.updating || !e3 ? null : "getPixelData" in e3 ? e3.getPixelData() : null;
  }
  async hitTest(e3, t2) {
    return this.subview ? [{ type: "graphic", graphic: this.subview.hitTest(e3), layer: this.layer, mapPoint: e3 }] : null;
  }
  update(e3) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e3);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new re({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new a(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.addAttachHandles([d(() => this.layer.exportImageServiceParameters.version, (e3) => {
      e3 && this._exportImageVersion !== e3 && (this._exportImageVersion = e3, this.requestUpdate());
    }, C), d(() => this.timeExtent, (e3) => {
      const { subview: t2 } = this;
      t2 && (t2.timeExtent = e3, "redraw" in t2 ? this.requestUpdate() : t2.redrawOrRefetch());
    }, C), this.layer.on("redraw", () => {
      const { subview: e3 } = this;
      e3 && ("redraw" in e3 ? e3.redraw() : e3.redrawOrRefetch());
    }), d(() => this.layer.renderer, () => this._setSubView())]);
  }
  detach() {
    var _a, _b;
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null, (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._exportImageVersion = -1;
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e3, s3) {
    if (!((Array.isArray(e3) ? e3[0] : V.isCollection(e3) ? e3.at(0) : e3) instanceof c2))
      return e2();
    let a4 = [];
    return Array.isArray(e3) || V.isCollection(e3) ? a4 = e3.map((e4) => e4.clone()) : e3 instanceof c2 && (a4 = [e3.clone()]), this._highlightGraphics.addMany(a4), e2(() => this._highlightGraphics.removeMany(a4));
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  _setSubView() {
    var _a, _b;
    if (!this.view)
      return;
    const e3 = (_a = this.layer.renderer) == null ? void 0 : _a.type;
    let t2 = "imagery";
    if ("vector-field" === e3 ? t2 = "imageryVF" : "flow" === e3 && (t2 = "flow"), this.subview) {
      const { type: e4 } = this.subview;
      if (e4 === t2)
        return this._attachSubview(this.subview), void ("flow" === e4 ? this.subview.redrawOrRefetch() : "imagery" === e4 && "lerc" === this.layer.format ? this.subview.redraw() : this.requestUpdate());
      this._detachSubview(this.subview), (_b = this.subview) == null ? void 0 : _b.destroy();
    }
    this.subview = "imagery" === t2 ? new u2({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === t2 ? new g2({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new h2({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e3) {
    e3 && !e3.attached && (e3.attach(), e3.attached = true, this.container.addChildAt(e3.container, 0));
  }
  _detachSubview(e3) {
    (e3 == null ? void 0 : e3.attached) && (this.container.removeChild(e3.container), e3.detach(), e3.attached = false);
  }
};
e([y()], v2.prototype, "pixelData", null), e([y()], v2.prototype, "subview", void 0), v2 = e([c("esri.views.2d.layers.ImageryLayerView2D")], v2);
var b3 = v2;
export {
  b3 as default
};
//# sourceMappingURL=ImageryLayerView2D-DNXVVDNG.js.map
