import {
  u
} from "./chunk-G557TGXY.js";
import {
  o
} from "./chunk-V2RPSCV3.js";
import {
  f
} from "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  T,
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/rest/support/ColorRamp.js
var e2 = class extends f {
  constructor(r) {
    super(r), this.type = null;
  }
};
e([y({ readOnly: true, json: { read: false, write: true } })], e2.prototype, "type", void 0), e2 = e([c("esri.rest.support.ColorRamp")], e2);
var p = e2;

// node_modules/@arcgis/core/rest/support/AlgorithmicColorRamp.js
var m;
var c2 = m = class extends p {
  constructor(o2) {
    super(o2), this.algorithm = null, this.fromColor = null, this.toColor = null, this.type = "algorithmic";
  }
  clone() {
    return new m({ fromColor: a(this.fromColor), toColor: a(this.toColor), algorithm: this.algorithm });
  }
};
e([o({ esriCIELabAlgorithm: "cie-lab", esriHSVAlgorithm: "hsv", esriLabLChAlgorithm: "lab-lch" })], c2.prototype, "algorithm", void 0), e([y({ type: u, json: { type: [T], write: true } })], c2.prototype, "fromColor", void 0), e([y({ type: u, json: { type: [T], write: true } })], c2.prototype, "toColor", void 0), e([y({ type: ["algorithmic"] })], c2.prototype, "type", void 0), c2 = m = e([c("esri.rest.support.AlgorithmicColorRamp")], c2);
var a2 = c2;

// node_modules/@arcgis/core/rest/support/MultipartColorRamp.js
var c3;
var m2 = c3 = class extends p {
  constructor(o2) {
    super(o2), this.colorRamps = null, this.type = "multipart";
  }
  clone() {
    return new c3({ colorRamps: a(this.colorRamps) });
  }
};
e([y({ type: [a2], json: { write: true } })], m2.prototype, "colorRamps", void 0), e([y({ type: ["multipart"] })], m2.prototype, "type", void 0), m2 = c3 = e([c("esri.rest.support.MultipartColorRamp")], m2);
var a3 = m2;

// node_modules/@arcgis/core/rest/support/colorRamps.js
var m3 = { key: "type", base: p, typeMap: { algorithmic: a2, multipart: a3 } };
function p2(o2) {
  return (o2 == null ? void 0 : o2.type) ? "algorithmic" === o2.type ? a2.fromJSON(o2) : "multipart" === o2.type ? a3.fromJSON(o2) : null : null;
}

export {
  a3 as a,
  m3 as m,
  p2 as p
};
//# sourceMappingURL=chunk-64EQFPYJ.js.map
