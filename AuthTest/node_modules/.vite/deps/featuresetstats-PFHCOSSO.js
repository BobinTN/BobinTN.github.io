import {
  l
} from "./chunk-2SW44O36.js";
import {
  $,
  H,
  L,
  P2 as P,
  a,
  ne,
  q,
  qe,
  r as r2
} from "./chunk-24PJGGGS.js";
import "./chunk-IHXVTF6I.js";
import {
  r2 as r,
  x
} from "./chunk-GXVWD6F2.js";
import {
  m
} from "./chunk-W4QVNWBV.js";
import "./chunk-XN6LAULS.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import "./chunk-LXXF7K7W.js";
import "./chunk-SBW6NNVI.js";
import "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/arcade/functions/featuresetstats.js
async function m2(n, t, e, a2, o, u) {
  if (1 === a2.length) {
    if (q(a2[0]))
      return l(n, a2[0], L(a2[1], -1));
    if ($(a2[0]))
      return l(n, a2[0].toArray(), L(a2[1], -1));
  } else if (2 === a2.length) {
    if (q(a2[0]))
      return l(n, a2[0], L(a2[1], -1));
    if ($(a2[0]))
      return l(n, a2[0].toArray(), L(a2[1], -1));
    if (H(a2[0])) {
      const e2 = await a2[0].load(), r3 = await A(x.create(a2[1], e2.getFieldsIndex(), e2.dateFieldsTimeZoneDefaultUTC), u, o);
      return g(o, await a2[0].calculateStatistic(n, r3, L(a2[2], 1e3), t.abortSignal));
    }
  } else if (3 === a2.length && H(a2[0])) {
    const e2 = await a2[0].load(), r3 = await A(x.create(a2[1], e2.getFieldsIndex(), e2.dateFieldsTimeZoneDefaultUTC), u, o);
    return g(o, await a2[0].calculateStatistic(n, r3, L(a2[2], 1e3), t.abortSignal));
  }
  return l(n, a2, -1);
}
function g(t, e) {
  return e instanceof r ? m.fromReaderAsTimeStampOffset(e.toStorageFormat()) : e instanceof Date ? m.dateJSAndZoneToArcadeDate(e, qe(t)) : e;
}
async function A(n, t, e) {
  const a2 = n.getVariables();
  if (a2.length > 0) {
    const r3 = [];
    for (let n2 = 0; n2 < a2.length; n2++) {
      const i2 = { name: a2[n2] };
      r3.push(await t.evaluateIdentifier(e, i2));
    }
    const i = {};
    for (let n2 = 0; n2 < a2.length; n2++)
      i[a2[n2]] = r3[n2];
    return n.parameters = i, n;
  }
  return n;
}
function y(n) {
  "async" === n.mode && (n.functions.stdev = function(t, e) {
    return n.standardFunctionAsync(t, e, (e2, a2, r3) => m2("stdev", e2, a2, r3, t, n));
  }, n.functions.variance = function(t, e) {
    return n.standardFunctionAsync(t, e, (e2, a2, r3) => m2("variance", e2, a2, r3, t, n));
  }, n.functions.average = function(t, e) {
    return n.standardFunctionAsync(t, e, (e2, a2, r3) => m2("mean", e2, a2, r3, t, n));
  }, n.functions.mean = function(t, e) {
    return n.standardFunctionAsync(t, e, (e2, a2, r3) => m2("mean", e2, a2, r3, t, n));
  }, n.functions.sum = function(t, e) {
    return n.standardFunctionAsync(t, e, (e2, a2, r3) => m2("sum", e2, a2, r3, t, n));
  }, n.functions.min = function(t, e) {
    return n.standardFunctionAsync(t, e, (e2, a2, r3) => m2("min", e2, a2, r3, t, n));
  }, n.functions.max = function(t, e) {
    return n.standardFunctionAsync(t, e, (e2, a2, r3) => m2("max", e2, a2, r3, t, n));
  }, n.functions.count = function(c, u) {
    return n.standardFunctionAsync(c, u, (n2, f, d) => {
      if (ne(d, 1, 1, c, u), H(d[0]))
        return d[0].count(n2.abortSignal);
      if (q(d[0]) || P(d[0]))
        return d[0].length;
      if ($(d[0]))
        return d[0].length();
      throw new a(c, r2.InvalidParameter, u);
    });
  });
}
export {
  y as registerFunctions
};
//# sourceMappingURL=featuresetstats-PFHCOSSO.js.map
