import {
  i
} from "./chunk-MKW4ORPJ.js";

// node_modules/@arcgis/core/views/2d/support/Timeline.js
var s = (s4) => s4.includes("Brush");
var e = class {
  constructor() {
    this._names = /* @__PURE__ */ new Map();
  }
  begin(e2) {
    this._names.has(e2) || (this._names.set(e2, false), s(e2) && this.record("Esri.FirstDraw"), performance.mark(`Esri.${e2}.Start`));
  }
  end(s4) {
    this._names.has(s4) && !this._names.get(s4) && (this._names.set(s4, true), performance.mark(`Esri.${s4}.End`));
  }
  record(s4) {
    this._names.has(s4) || (this._names.set(s4, true), performance.mark(`Esri.${s4}`));
  }
};

// node_modules/@arcgis/core/views/support/screenshotUtils.js
function a(t, h, i2) {
  const { ctx: e2, canvas: o } = l(t, i2), n = e2.getImageData(0, 0, t.width, t.height), a2 = u(o, h);
  return g(o), { dataUrl: a2, data: n };
}
function r(t, h) {
  const { ctx: i2, canvas: e2 } = l(t, h), o = i2.getImageData(0, 0, t.width, t.height);
  return g(e2), o;
}
function l(t, h) {
  const i2 = f();
  h.premultipliedAlpha && q(t), i2.width = t.width, i2.height = t.height;
  const e2 = i2.getContext("2d", { willReadFrequently: true });
  return e2.putImageData(t, 0, 0), h.flipY && D(e2), { ctx: e2, canvas: i2 };
}
function g(t) {
  t.width = 0, t.height = 0;
}
function f() {
  return null == d && (d = document.createElement("canvas")), d;
}
var d = null;
function u(t, h) {
  const i2 = v[h.format], e2 = h.quality / 100;
  return t.toDataURL(i2, e2);
}
function c(h, i2) {
  const e2 = j(h), o = R[e2];
  return { format: e2, quality: i(null != i2 ? i2 : o, 0, 100) };
}
function s3(t, h) {
  return h / Math.max(t[0], t[1]);
}
function w(t, h, i2, e2 = 0, o = 0, n = t.width - e2, a2 = t.height - o, r2 = false) {
  const { data: l2 } = t, { width: g2, height: f2, data: d2 } = h, u2 = n / g2, c2 = a2 / f2, s4 = Math.ceil(u2 / 2), w2 = Math.ceil(c2 / 2), M = t.width;
  for (let m = 0; m < f2; m++)
    for (let t2 = 0; t2 < g2; t2++) {
      const h2 = 4 * (t2 + (r2 ? f2 - m - 1 : m) * g2);
      let n2 = 0, a3 = 0, p = 0, x = 0, y = 0, b = 0;
      const j2 = (m + 0.5) * c2;
      for (let r3 = Math.floor(m * c2); r3 < (m + 1) * c2; r3++) {
        const h3 = Math.abs(j2 - (r3 + 0.5)) / w2, g3 = (t2 + 0.5) * u2, f3 = h3 * h3;
        for (let d3 = Math.floor(t2 * u2); d3 < (t2 + 1) * u2; d3++) {
          const t3 = Math.abs(g3 - (d3 + 0.5)) / s4, h4 = Math.sqrt(f3 + t3 * t3);
          if (h4 >= 1)
            continue;
          let u3 = 2 * h4 * h4 * h4 - 3 * h4 * h4 + 1;
          const c3 = 4 * (e2 + d3 + (o + r3) * M);
          b += u3 * l2[c3 + 3], a3 += u3, !i2 && l2[c3 + 3] < 255 && (u3 = u3 * l2[c3 + 3] / 255), p += u3 * l2[c3], x += u3 * l2[c3 + 1], y += u3 * l2[c3 + 2], n2 += u3;
        }
      }
      d2[h2] = p / n2, d2[h2 + 1] = x / n2, d2[h2 + 2] = y / n2, d2[h2 + 3] = b / a3;
    }
  return h;
}
function j(t) {
  switch (t) {
    case "png":
    case "jpg":
    case "jpeg":
      return t;
    default:
      return P;
  }
}
function D(t) {
  t.save(), t.globalCompositeOperation = "copy", t.scale(1, -1), t.translate(0, -t.canvas.height), t.drawImage(t.canvas, 0, 0), t.restore();
}
function q(t) {
  const h = t.data, i2 = h.length;
  for (let e2 = 0; e2 < i2; e2 += 4) {
    const t2 = h[e2 + 3];
    if (255 !== t2 && t2 > 0) {
      const i3 = 255 / t2;
      h[e2] = h[e2] * i3, h[e2 + 1] = h[e2 + 1] * i3, h[e2 + 2] = h[e2 + 2] * i3;
    }
  }
}
var v = { png: "image/png", jpg: "image/jpeg", jpeg: "image/jpeg" };
var I = 98;
var P = "png";
var R = { png: 100, jpg: I, jpeg: I };

export {
  e,
  a,
  r,
  c,
  s3 as s,
  w
};
//# sourceMappingURL=chunk-YMGMMZM2.js.map
