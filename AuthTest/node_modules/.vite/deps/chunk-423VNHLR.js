import {
  g
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  e as e2,
  t
} from "./chunk-RFPH3ZTZ.js";

// node_modules/@arcgis/core/core/Evented.js
var i = class _i {
  constructor() {
    this._emitter = new _i.EventEmitter(this);
  }
  emit(e3, t2) {
    return this._emitter.emit(e3, t2);
  }
  on(e3, t2) {
    return this._emitter.on(e3, t2);
  }
  once(e3, t2) {
    return this._emitter.once(e3, t2);
  }
  hasEventListener(e3) {
    return this._emitter.hasEventListener(e3);
  }
};
!function(o2) {
  class c2 {
    constructor(e3 = null) {
      this._target = e3, this._listenersMap = null;
    }
    clear() {
      var _a;
      (_a = this._listenersMap) == null ? void 0 : _a.clear(), this._listenersMap = null;
    }
    destroy() {
      this.clear();
    }
    emit(e3, t2) {
      var _a;
      let r = (_a = this._listenersMap) == null ? void 0 : _a.get(e3);
      if (!r)
        return false;
      const s = this._target || this;
      let n = false;
      for (const i2 of r.slice()) {
        const e4 = "deref" in i2 ? i2.deref() : i2;
        e4 ? e4 == null ? void 0 : e4.call(s, t2) : n = true;
      }
      return n && (r = r.filter((e4) => !("deref" in e4) || null != e4.deref()), this._listenersMap.set(e3, r)), r.length > 0;
    }
    on(e3, t2) {
      if (Array.isArray(e3)) {
        const s = e3.map((e4) => this.on(e4, t2));
        return t(s);
      }
      if (e3.includes(","))
        throw new TypeError("Evented.on() with a comma delimited string of event types is not supported");
      this._listenersMap ?? (this._listenersMap = /* @__PURE__ */ new Map());
      const n = this._listenersMap.get(e3) || [];
      return n.push(t2), this._listenersMap.set(e3, n), e2(() => {
        var _a;
        const r = (_a = this._listenersMap) == null ? void 0 : _a.get(e3), s = (r == null ? void 0 : r.indexOf(t2)) ?? -1;
        s >= 0 && r.splice(s, 1);
      });
    }
    once(e3, t2) {
      const r = this.on(e3, (e4) => {
        r.remove();
        const s = "deref" in t2 ? t2.deref() : t2;
        s == null ? void 0 : s.call(null, e4);
      });
      return r;
    }
    hasEventListener(e3) {
      var _a;
      const t2 = (_a = this._listenersMap) == null ? void 0 : _a.get(e3);
      return null != t2 && t2.length > 0;
    }
  }
  o2.EventEmitter = c2, o2.EventedMixin = (t2) => {
    let r = class extends t2 {
      constructor() {
        super(...arguments), this._emitter = new c2();
      }
      destroy() {
        this._emitter.clear();
      }
      emit(e3, t3) {
        return this._emitter.emit(e3, t3);
      }
      on(e3, t3) {
        return this._emitter.on(e3, t3);
      }
      once(e3, t3) {
        return this._emitter.once(e3, t3);
      }
      hasEventListener(e3) {
        return this._emitter.hasEventListener(e3);
      }
    };
    return r = e([c("esri.core.Evented")], r), r;
  };
  let l = class extends g {
    constructor() {
      super(...arguments), this._emitter = new i.EventEmitter(this);
    }
    destroy() {
      this._emitter.clear();
    }
    emit(e3, t2) {
      return this._emitter.emit(e3, t2);
    }
    on(e3, t2) {
      return this._emitter.on(e3, t2);
    }
    once(e3, t2) {
      return this._emitter.once(e3, t2);
    }
    hasEventListener(e3) {
      return this._emitter.hasEventListener(e3);
    }
  };
  l = e([c("esri.core.Evented")], l), o2.EventedAccessor = l;
}(i || (i = {}));
var o = i;

export {
  o
};
//# sourceMappingURL=chunk-423VNHLR.js.map
