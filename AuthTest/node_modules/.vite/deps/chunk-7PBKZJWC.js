import {
  A,
  _,
  f
} from "./chunk-LJAHTUH5.js";
import {
  ne
} from "./chunk-HR42LBYN.js";
import {
  E,
  S
} from "./chunk-TREPTI6V.js";

// node_modules/@arcgis/core/views/2d/layers/features/createSymbolSchema.js
function s(e) {
  var _a;
  if ("line-marker" === e.type) {
    return { type: "line-marker", color: (_a = e.color) == null ? void 0 : _a.toJSON(), placement: e.placement, style: e.style };
  }
  return e.constructor.fromJSON(e.toJSON()).toJSON();
}
function o(e) {
  return A(e);
}
function i(e, t, r = false) {
  if (!e)
    return null;
  switch (e.type) {
    case "simple-fill":
    case "picture-fill":
      return c(e, t, r);
    case "simple-marker":
    case "picture-marker":
      return h(e, t, r);
    case "simple-line":
      return y(e, t, r);
    case "text":
      return u(e, t, r);
    case "label":
      return m(e, t, r);
    case "cim":
      return { type: "cim", rendererKey: t.vvFlags, data: e.data, maxVVSize: t.maxVVSize };
    case "CIMSymbolReference":
      return { type: "cim", rendererKey: t.vvFlags, data: e, maxVVSize: t.maxVVSize };
    case "web-style":
      return { ...s(e), type: "web-style", hash: e.hash(), rendererKey: t.vvFlags, maxVVSize: t.maxVVSize };
    default:
      throw new Error(`symbol not supported ${e.type}`);
  }
}
function m(e, r, l) {
  const n = e.toJSON(), s2 = f(E.LABEL, { ...r, placement: n.labelPlacement });
  return { materialKey: l ? o(s2) : s2, hash: e.hash(), ...n, labelPlacement: n.labelPlacement };
}
function c(e, r, n) {
  const i2 = f(E.FILL, r), m2 = n ? o(i2) : i2, c2 = e.clone(), y2 = c2.outline, h2 = _(r.symbologyType);
  h2 || (c2.outline = null);
  const u2 = { materialKey: m2, hash: c2.hash(), ...s(c2) };
  if (h2)
    return u2;
  const p = [];
  if (p.push(u2), y2) {
    const e2 = f(E.LINE, { ...r, isOutline: true }), l = { materialKey: n ? o(e2) : e2, hash: y2.hash(), ...s(y2) };
    p.push(l);
  }
  return { type: "composite-symbol", layers: p, hash: p.reduce((e2, t) => t.hash + e2, "") };
}
function y(e, n, i2) {
  const m2 = _(n.symbologyType) ? S.DEFAULT : n.symbologyType, c2 = f(E.LINE, { ...n, symbologyType: m2 }), y2 = i2 ? o(c2) : c2, h2 = e.clone(), u2 = h2.marker;
  h2.marker = null;
  const p = [];
  if (p.push({ materialKey: y2, hash: h2.hash(), ...s(h2) }), u2) {
    const e2 = f(E.MARKER, n), r = i2 ? o(e2) : e2;
    u2.color = u2.color ?? h2.color, p.push({ materialKey: r, hash: u2.hash(), lineWidth: h2.width, ...s(u2) });
  }
  return { type: "composite-symbol", layers: p, hash: p.reduce((e2, t) => t.hash + e2, "") };
}
function h(r, l, n) {
  if ("simple-marker" === r.type && ("path" === r.style || r.outline && "solid" !== r.outline.style && "none" !== r.outline.style)) {
    return i({ type: "CIMSymbolReference", symbol: ne.fromSimpleMarker(r) }, l, n);
  }
  const m2 = f(E.MARKER, l), c2 = n ? o(m2) : m2, y2 = s(r);
  return { materialKey: c2, hash: r.hash(), ...y2, angle: r.angle, maxVVSize: l.maxVVSize };
}
function u(e, r, l) {
  const n = f(E.TEXT, r), i2 = l ? o(n) : n, m2 = s(e);
  return { materialKey: i2, hash: e.hash(), ...m2, angle: e.angle, maxVVSize: r.maxVVSize };
}

export {
  i
};
//# sourceMappingURL=chunk-7PBKZJWC.js.map
