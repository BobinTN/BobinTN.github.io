import {
  R as R2,
  i
} from "./chunk-LOFJKPMO.js";
import {
  M as M2,
  T,
  ee
} from "./chunk-OQKR5TK4.js";
import {
  L2 as L,
  h2 as h,
  j,
  m3 as m
} from "./chunk-OEIWJN32.js";
import {
  I,
  R,
  U,
  W,
  f2 as f,
  s3 as s2,
  u2 as u,
  u4 as u2
} from "./chunk-ABKJC2RS.js";
import "./chunk-XZLDDXLF.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-G557TGXY.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-V2RPSCV3.js";
import {
  s
} from "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-FN47E7YK.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import {
  x2 as x
} from "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import "./chunk-LXXF7K7W.js";
import "./chunk-SBW6NNVI.js";
import "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/support/RasterWorker.js
var N = class {
  convertVectorFieldData(r) {
    const t = u.fromJSON(r.pixelBlock), s3 = f(t, r.type);
    return Promise.resolve(null != s3 ? s3.toJSON() : null);
  }
  computeStatisticsHistograms(r) {
    const t = u.fromJSON(r.pixelBlock), s3 = m(t);
    return Promise.resolve(s3);
  }
  async decode(r) {
    const e = await j(r.data, r.options);
    return e && e.toJSON();
  }
  symbolize(r) {
    r.pixelBlock = u.fromJSON(r.pixelBlock), r.extent = r.extent ? M.fromJSON(r.extent) : null;
    const t = this.symbolizer.symbolize(r);
    return Promise.resolve(null != t ? t.toJSON() : null);
  }
  async updateSymbolizer(r) {
    var _a;
    this.symbolizer = L.fromJSON(r.symbolizerJSON), r.histograms && "rasterStretch" === ((_a = this.symbolizer) == null ? void 0 : _a.rendererJSON.type) && (this.symbolizer.rendererJSON.histograms = r.histograms);
  }
  async updateRasterFunction(r) {
    this.rasterFunction = R2(r.rasterFunctionJSON);
  }
  async process(r) {
    var _a;
    const t = this.rasterFunction.process({ extent: M.fromJSON(r.extent), primaryPixelBlocks: r.primaryPixelBlocks.map((r2) => null != r2 ? u.fromJSON(r2) : null), primaryPixelSizes: (_a = r.primaryPixelSizes) == null ? void 0 : _a.map((r2) => null != r2 ? x.fromJSON(r2) : null), primaryRasterIds: r.primaryRasterIds });
    return null != t ? t.toJSON() : null;
  }
  stretch(r) {
    const t = this.symbolizer.simpleStretch(u.fromJSON(r.srcPixelBlock), r.stretchParams);
    return Promise.resolve(t == null ? void 0 : t.toJSON());
  }
  estimateStatisticsHistograms(r) {
    const t = h(u.fromJSON(r.srcPixelBlock));
    return Promise.resolve(t);
  }
  split(r) {
    const t = W(u.fromJSON(r.srcPixelBlock), r.tileSize, r.maximumPyramidLevel);
    return t && t.forEach((r2, e) => {
      t.set(e, r2 == null ? void 0 : r2.toJSON());
    }), Promise.resolve(t);
  }
  async mosaicAndTransform(r) {
    const t = r.srcPixelBlocks.map((r2) => r2 ? new u(r2) : null), s3 = U(t, r.srcMosaicSize, { blockWidths: r.blockWidths, alignmentInfo: r.alignmentInfo, clipOffset: r.clipOffset, clipSize: r.clipSize });
    let a, l = s3;
    return r.coefs && (l = R(s3, r.destDimension, r.coefs, r.sampleSpacing, r.interpolation)), r.projectDirections && r.gcsGrid && (a = I(r.destDimension, r.gcsGrid), l = u2(l, r.isUV ? "vector-uv" : "vector-magdir", a)), { pixelBlock: l == null ? void 0 : l.toJSON(), localNorthDirections: a };
  }
  async createFlowMesh(r, e) {
    const t = { data: new Float32Array(r.flowData.buffer), mask: new Uint8Array(r.flowData.maskBuffer), width: r.flowData.width, height: r.flowData.height }, { vertexData: s3, indexData: o } = await s2(r.meshType, r.simulationSettings, t, e.signal);
    return { result: { vertexBuffer: s3.buffer, indexBuffer: o.buffer }, transferList: [s3.buffer, o.buffer] };
  }
  async getProjectionOffsetGrid(e) {
    const t = M.fromJSON(e.projectedExtent), s3 = M.fromJSON(e.srcBufferExtent);
    let o = null;
    e.datumTransformationSteps && (o = new s({ steps: e.datumTransformationSteps })), (e.includeGCSGrid || M2(t.spatialReference, s3.spatialReference, o)) && await T();
    const i2 = e.rasterTransform ? i(e.rasterTransform) : null;
    return ee({ ...e, projectedExtent: t, srcBufferExtent: s3, datumTransformation: o, rasterTransform: i2 });
  }
};
export {
  N as default
};
//# sourceMappingURL=RasterWorker-UM2M6CZD.js.map
