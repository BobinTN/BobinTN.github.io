import {
  c as c2,
  p
} from "./chunk-HBL2432S.js";
import {
  R
} from "./chunk-LOGPPZUD.js";
import {
  i,
  u
} from "./chunk-OJ65P3EQ.js";
import {
  c
} from "./chunk-B3RXTW72.js";
import {
  Te
} from "./chunk-GAWSWBHO.js";
import {
  O,
  x
} from "./chunk-A43TI6AT.js";
import {
  r
} from "./chunk-APYNYYQC.js";
import {
  V
} from "./chunk-JUZJCTW2.js";
import {
  ot
} from "./chunk-R5DM4YAB.js";
import {
  C
} from "./chunk-RFPH3ZTZ.js";
import {
  a,
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/layers/graphics/editingSupport.js
function y(e) {
  return null != (e == null ? void 0 : e.applyEdits);
}
function g(e) {
  return "object" == typeof e && null != e && "objectId" in e && !!e.objectId;
}
function b(e) {
  return e.every(g);
}
function w(e) {
  return "object" == typeof e && null != e && "globalId" in e && !!e.globalId;
}
function F(e) {
  return e.every(w);
}
async function v(e, t, a2, s3 = {}) {
  var _a;
  let o;
  const n = "gdbVersion" in e ? e.gdbVersion : null, d = s3.gdbVersion ?? n;
  if (p(e) && e.url)
    o = c2(e.url, e.layerId, d, "original-and-current-features" === s3.returnServiceEditsOption);
  else {
    o = C(), o.promise.then((t3) => {
      (t3.addedFeatures.length || t3.updatedFeatures.length || t3.deletedFeatures.length || t3.addedAttachments.length || t3.updatedAttachments.length || t3.deletedAttachments.length) && e.emit("edits", t3);
    });
    const t2 = { result: o.promise };
    e.emit("apply-edits", t2);
  }
  try {
    const { results: i2, edits: n2 } = await A(e, t, a2, s3), d2 = (e2) => e2.filter((e3) => !e3.error).map(a), l = { edits: n2, addedFeatures: d2(i2.addFeatureResults), updatedFeatures: d2(i2.updateFeatureResults), deletedFeatures: d2(i2.deleteFeatureResults), addedAttachments: d2(i2.addAttachmentResults), updatedAttachments: d2(i2.updateAttachmentResults), deletedAttachments: d2(i2.deleteAttachmentResults), exceededTransferLimit: false, historicMoment: i2.editMoment ? new Date(i2.editMoment) : null, globalIdToObjectId: s3.globalIdToObjectId };
    return ((_a = i2.editedFeatureResults) == null ? void 0 : _a.length) && (l.editedFeatures = i2.editedFeatureResults), o.resolve(l), i2;
  } catch (p2) {
    throw o.reject(p2), p2;
  }
}
async function A(e, t, r2, s3) {
  var _a, _b, _c, _d, _e, _f;
  if (await e.load(), !y(t))
    throw new s2(`${e.type}-layer:no-editing-support`, "Layer source does not support applyEdits capability", { layer: e });
  if (!O(e))
    throw new s2(`${e.type}-layer:editing-disabled`, "Editing is disabled for layer", { layer: e });
  const { edits: i2, options: o } = await I(e, r2, s3);
  return ((_a = i2.addFeatures) == null ? void 0 : _a.length) || ((_b = i2.updateFeatures) == null ? void 0 : _b.length) || ((_c = i2.deleteFeatures) == null ? void 0 : _c.length) || ((_d = i2.addAttachments) == null ? void 0 : _d.length) || ((_e = i2.updateAttachments) == null ? void 0 : _e.length) || ((_f = i2.deleteAttachments) == null ? void 0 : _f.length) ? { edits: i2, results: await t.applyEdits(i2, o) } : { edits: i2, results: { addFeatureResults: [], updateFeatureResults: [], deleteFeatureResults: [], addAttachmentResults: [], updateAttachmentResults: [], deleteAttachmentResults: [] } };
}
async function I(e, t, r2) {
  const i2 = x(e), o = t && (t.addFeatures || t.updateFeatures || t.deleteFeatures), n = t && (t.addAttachments || t.updateAttachments || t.deleteAttachments), d = null != e.infoFor3D;
  if (T(t, i2, r2, !!o, !!n, `${e.type}-layer`), !i2.data.isVersioned && (r2 == null ? void 0 : r2.gdbVersion))
    throw new s2(`${e.type}-layer:invalid-parameter`, "'gdbVersion' is applicable only if the layer supports versioned data. See: 'capabilities.data.isVersioned'");
  if (!i2.editing.supportsRollbackOnFailure && (r2 == null ? void 0 : r2.rollbackOnFailureEnabled))
    throw new s2(`${e.type}-layer:invalid-parameter`, "This layer does not support 'rollbackOnFailureEnabled' parameter. See: 'capabilities.editing.supportsRollbackOnFailure'");
  const l = { ...r2 };
  if (null != l.rollbackOnFailureEnabled || i2.editing.supportsRollbackOnFailure || (l.rollbackOnFailureEnabled = true), l.rollbackOnFailureEnabled || "original-and-current-features" !== l.returnServiceEditsOption || (false === l.rollbackOnFailureEnabled && s.getLogger("esri.layers.graphics.editingSupport").warn(`${e.type}-layer:invalid-parameter`, "'original-and-current-features' is valid for 'returnServiceEditsOption' only when 'rollBackOnFailure' is true, but 'rollBackOnFailure' was set to false. 'rollBackOnFailure' has been overwrritten and set to true."), l.rollbackOnFailureEnabled = true), !i2.editing.supportsReturnServiceEditsInSourceSpatialReference && l.returnServiceEditsInSourceSR)
    throw new s2(`${e.type}-layer:invalid-parameter`, "This layer does not support 'returnServiceEditsInSourceSR' parameter. See: 'capabilities.editing.supportsReturnServiceEditsInSourceSpatialReference'");
  if (l.returnServiceEditsInSourceSR && "original-and-current-features" !== l.returnServiceEditsOption)
    throw new s2(`${e.type}-layer:invalid-parameter`, "'returnServiceEditsInSourceSR' is valid only when 'returnServiceEditsOption' is set to 'original-and-current-features'");
  const u2 = B(t, i2, `${e.type}-layer`), p2 = (r2 == null ? void 0 : r2.globalIdUsed) || d, c3 = e.fields.filter((e2) => "big-integer" === e2.type || "oid" === e2.type && (e2.length || 0) >= 8);
  if (p2) {
    const { globalIdField: t2 } = e;
    if (null == t2)
      throw new s2(`${e.type}-layer:invalid-parameter`, "Layer does not specify a global id field.");
    u2.addFeatures.forEach((e2) => U(e2, t2));
  }
  u2.addFeatures.forEach((t2) => S(t2, e, p2, c3)), u2.updateFeatures.forEach((t2) => j(t2, e, p2, c3)), u2.deleteFeatures.forEach((t2) => R2(t2, e, p2, c3)), u2.addAttachments.forEach((t2) => O2(t2, e)), u2.updateAttachments.forEach((t2) => O2(t2, e)), d && await G(u2, e);
  return { edits: await L(u2), options: l };
}
function $(e, t, r2, s3) {
  var _a, _b;
  function i2(e2) {
    return /[a-z]/.test(e2);
  }
  if (r2) {
    if ("attributes" in e) {
      if (!e.attributes[t.globalIdField])
        throw new s2(`${t.type}-layer:invalid-parameter`, `Feature should have '${t.globalIdField}' when 'globalIdUsed' is true`);
      if (i2(e.attributes[t.globalIdField]))
        throw new s2(`${t.type}-layer:invalid-parameter`, "provided globalId is required to only have uppercase characters");
    }
    if (!("attributes" in e)) {
      if (!e.globalId)
        throw new s2(`${t.type}-layer:invalid-parameter`, "`'globalId' of the feature should be passed when 'globalIdUsed' is true");
      if (i2(e.globalId))
        throw new s2(`${t.type}-layer:invalid-parameter`, "provided globalId is required to only have uppercase characters");
    }
  }
  if (s3.length && "attributes" in e)
    for (const o of s3) {
      const r3 = e.attributes[o.name];
      if (void 0 !== r3 && !Te(o, r3))
        throw new s2(`${t.type}-layer:invalid-parameter`, `Big-integer field '${o.name}' of the feature must be less than ${Number.MAX_SAFE_INTEGER}`, { feature: e });
    }
  if ("geometry" in e && null != e.geometry) {
    if (e.geometry.hasZ && false === ((_a = t.capabilities) == null ? void 0 : _a.data.supportsZ))
      throw new s2(`${t.type}-layer:z-unsupported`, "Layer does not support z values while feature has z values.");
    if (e.geometry.hasM && false === ((_b = t.capabilities) == null ? void 0 : _b.data.supportsM))
      throw new s2(`${t.type}-layer:m-unsupported`, "Layer does not support m values while feature has m values.");
  }
}
function E(e, t) {
  var _a;
  if ("geometry" in e && "mesh" === ((_a = e.geometry) == null ? void 0 : _a.type) && null != t.infoFor3D) {
    const { geometry: r2 } = e;
    if (r2.vertexSpace.isGeoreferenced)
      throw new s2(`${t.type}-layer:georeferenced-mesh-unsupported`, "Uploading georeferenced meshes to a layer is not supported.");
  }
}
function S(e, t, a2, r2) {
  $(e, t, a2, r2), E(e, t);
}
function R2(e, t, a2, r2) {
  $(e, t, a2, r2);
}
function j(e, t, r2, s3) {
  $(e, t, r2, s3), E(e, t);
  const i2 = x(t);
  if ("geometry" in e && null != e.geometry && !(i2 == null ? void 0 : i2.editing.supportsGeometryUpdate))
    throw new s2(`${t.type}-layer:unsupported-operation`, "Layer does not support geometry updates.");
}
function O2(e, t) {
  var _a;
  const { feature: r2, attachment: s3 } = e;
  if (!r2 || "attributes" in r2 && !r2.attributes[t.globalIdField])
    throw new s2(`${t.type}-layer:invalid-parameter`, "Attachment should have reference to a feature with 'globalId'");
  if (!("attributes" in r2) && !r2.globalId)
    throw new s2(`${t.type}-layer:invalid-parameter`, "Attachment should have reference to 'globalId' of the parent feature");
  if (!s3.globalId)
    throw new s2(`${t.type}-layer:invalid-parameter`, "Attachment should have 'globalId'");
  if (!s3.data && !s3.uploadId)
    throw new s2(`${t.type}-layer:invalid-parameter`, "Attachment should have 'data' or 'uploadId'");
  if (!(s3.data instanceof File && !!s3.data.name) && !s3.name)
    throw new s2(`${t.type}-layer:invalid-parameter`, "'name' is required when attachment is specified as Base64 encoded string using 'data'");
  if (!((_a = t.capabilities) == null ? void 0 : _a.editing.supportsUploadWithItemId) && s3.uploadId)
    throw new s2(`${t.type}-layer:invalid-parameter`, "This layer does not support 'uploadId' parameter. See: 'capabilities.editing.supportsUploadWithItemId'");
  if ("string" == typeof s3.data) {
    const e2 = ot(s3.data);
    if (e2 && !e2.isBase64)
      throw new s2(`${t.type}-layer:invalid-parameter`, "Attachment 'data' should be a Blob, File or Base64 encoded string");
  }
}
function U(e, t) {
  const { attributes: a2 } = e;
  null == a2[t] && (a2[t] = r());
}
async function L(e) {
  const t = e.addFeatures ?? [], a2 = e.updateFeatures ?? [], r2 = t.concat(a2).map((e2) => e2.geometry), s3 = await R(r2), i2 = t.length, o = a2.length;
  return s3.slice(0, i2).forEach((e2, a3) => t[a3].geometry = e2), s3.slice(i2, i2 + o).forEach((e2, t2) => a2[t2].geometry = e2), e;
}
function k(e) {
  return { addFeatures: Array.from((e == null ? void 0 : e.addFeatures) ?? []), updateFeatures: Array.from((e == null ? void 0 : e.updateFeatures) ?? []), deleteFeatures: e && V.isCollection(e.deleteFeatures) ? e.deleteFeatures.toArray() : e.deleteFeatures || [], addAttachments: e.addAttachments || [], updateAttachments: e.updateAttachments || [], deleteAttachments: e.deleteAttachments || [] };
}
function B(e, t, r2) {
  var _a, _b, _c;
  const s3 = k(e);
  if (((_a = s3.addFeatures) == null ? void 0 : _a.length) && !t.operations.supportsAdd)
    throw new s2(`${r2}:unsupported-operation`, "Layer does not support adding features.");
  if (((_b = s3.updateFeatures) == null ? void 0 : _b.length) && !t.operations.supportsUpdate)
    throw new s2(`${r2}:unsupported-operation`, "Layer does not support updating features.");
  if (((_c = s3.deleteFeatures) == null ? void 0 : _c.length) && !t.operations.supportsDelete)
    throw new s2(`${r2}:unsupported-operation`, "Layer does not support deleting features.");
  return s3.addFeatures = s3.addFeatures.map(D), s3.updateFeatures = s3.updateFeatures.map(D), s3.addAssetFeatures = [], s3;
}
function T(e, t, r2, s3, i2, o) {
  if (!e || !s3 && !i2)
    throw new s2(`${o}:missing-parameters`, "'addFeatures', 'updateFeatures', 'deleteFeatures', 'addAttachments', 'updateAttachments' or 'deleteAttachments' parameter is required");
  if (!t.editing.supportsGlobalId && (r2 == null ? void 0 : r2.globalIdUsed))
    throw new s2(`${o}:invalid-parameter`, "This layer does not support 'globalIdUsed' parameter. See: 'capabilities.editing.supportsGlobalId'");
  if (!t.editing.supportsGlobalId && i2)
    throw new s2(`${o}:invalid-parameter`, "'addAttachments', 'updateAttachments' and 'deleteAttachments' are applicable only if the layer supports global ids. See: 'capabilities.editing.supportsGlobalId'");
  if (!(r2 == null ? void 0 : r2.globalIdUsed) && i2)
    throw new s2(`${o}:invalid-parameter`, "When 'addAttachments', 'updateAttachments' or 'deleteAttachments' is specified, globalIdUsed should be set to true");
}
function D(t) {
  const a2 = new c();
  return t.attributes || (t.attributes = {}), a2.geometry = t.geometry, a2.attributes = t.attributes, a2;
}
async function G(e, t) {
  if (null == t.infoFor3D)
    return;
  const { infoFor3D: r2 } = t, s3 = u("model/gltf-binary", r2.supportedFormats) ?? i("glb", r2.supportedFormats);
  if (!(!!s3 && r2.editFormats.includes(s3)))
    throw new s2(`${t.type}-layer:binary-gltf-asset-not-supported`, "3DObjectFeatureLayer requires binary glTF (.glb) support for updating mesh geometry.");
  e.addAssetFeatures ?? (e.addAssetFeatures = []);
  const { addAssetFeatures: i2 } = e;
  for (const a2 of e.addFeatures ?? [])
    V2(a2) && i2.push(a2);
  for (const a2 of e.updateFeatures ?? [])
    V2(a2) && i2.push(a2);
}
function V2(e) {
  var _a;
  return "mesh" === ((_a = e == null ? void 0 : e.geometry) == null ? void 0 : _a.type);
}
function M(e, t, r2, s3) {
  if (!y(t))
    throw new s2(`${e.type}-layer:no-editing-support`, "Layer source does not support applyEdits capability", { layer: e });
  if (!t.uploadAssets)
    throw new s2(`${e.type}-layer:no-asset-upload-support`, "Layer source does not support uploadAssets capability", { layer: e });
  return t.uploadAssets(r2, s3);
}

export {
  g,
  b,
  w,
  F,
  v,
  L,
  k,
  B,
  T,
  D,
  M
};
//# sourceMappingURL=chunk-YUYHSBOQ.js.map
