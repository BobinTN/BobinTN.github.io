import {
  E,
  I,
  N as N2
} from "./chunk-O5L3AGFQ.js";
import {
  I as I2,
  d as d3,
  f,
  p,
  w
} from "./chunk-4WCNO4FQ.js";
import "./chunk-7SYCRLSC.js";
import {
  a,
  i as i3,
  o
} from "./chunk-UIBKJIZ5.js";
import {
  m
} from "./chunk-A427XTHR.js";
import "./chunk-QAQNFI3S.js";
import {
  W
} from "./chunk-EBN2STNO.js";
import "./chunk-3ON6HO7Q.js";
import "./chunk-KMTPMPRR.js";
import "./chunk-K4NVR6KM.js";
import {
  j as j2,
  x
} from "./chunk-57KRYRCY.js";
import {
  et,
  nt,
  rt,
  st,
  tt
} from "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-MMRDHWTI.js";
import "./chunk-XA2SWBL3.js";
import "./chunk-NYTJIWNN.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-PUYNEESA.js";
import "./chunk-GXVWD6F2.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-S6MJEC4A.js";
import {
  Z
} from "./chunk-CKGVKMVG.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import {
  i as i2
} from "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-KVSZM7R6.js";
import "./chunk-KX2F2CD3.js";
import "./chunk-UNONG753.js";
import "./chunk-OFRZSMZB.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import {
  H,
  K
} from "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import {
  v
} from "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-A43TI6AT.js";
import "./chunk-2D3PORS4.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-TBSVVR6M.js";
import {
  d
} from "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import {
  i
} from "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import {
  N,
  d2
} from "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import {
  j
} from "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import "./chunk-LXXF7K7W.js";
import "./chunk-SBW6NNVI.js";
import "./chunk-62CXLI6S.js";
import {
  b
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/graphics/sources/geojson/GeoJSONSourceWorker.js
var D = { hasAttachments: false, capabilities: "query, editing, create, delete, update", useStandardizedQueries: true, supportsCoordinatesQuantization: true, supportsReturningQueryGeometry: true, advancedQueryCapabilities: { supportsQueryAttachments: false, supportsStatistics: true, supportsPercentileStatistics: true, supportsReturningGeometryCentroid: true, supportsQueryWithDistance: true, supportsDistinct: true, supportsReturningQueryExtent: true, supportsReturningGeometryProperties: false, supportsHavingClause: true, supportsOrderBy: true, supportsPagination: true, supportsQueryWithResultType: false, supportsSqlExpression: true, supportsDisjointSpatialRel: true } };
var Q = class {
  constructor() {
    this._queryEngine = null, this._snapshotFeatures = async (e) => {
      const t = await this._fetch(e);
      return this._createFeatures(t);
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = this._createDefaultAttributes = null;
  }
  async load(e, t = {}) {
    this._loadOptions = { url: e.url, customParameters: e.customParameters };
    const i4 = [], [r] = await Promise.all([e.url ? this._fetch(t == null ? void 0 : t.signal) : null, this._checkProjection(e.spatialReference)]), n = I(r, { geometryType: e.geometryType }), o2 = e.fields || n.fields || [], l = null != e.hasZ ? e.hasZ : n.hasZ, u = n.geometryType;
    let d4 = e.objectIdField || n.objectIdFieldName || "__OBJECTID";
    const p2 = e.spatialReference || N;
    let c = e.timeInfo;
    o2 === n.fields && n.unknownFields.length > 0 && i4.push({ name: "geojson-layer:unknown-field-types", message: "Some fields types couldn't be inferred from the features and were dropped", details: { unknownFields: n.unknownFields } });
    const y = new Z(o2);
    let h = y.get(d4);
    h ? ("esriFieldTypeString" !== h.type && (h.type = "esriFieldTypeOID"), h.editable = false, h.nullable = false, d4 = h.name) : (h = { alias: d4, name: d4, type: "string" === n.objectIdFieldType ? "esriFieldTypeString" : "esriFieldTypeOID", editable: false, nullable: false }, o2.unshift(h));
    const _ = {};
    for (const a2 of o2) {
      if (null == a2.name && (a2.name = a2.alias), null == a2.alias && (a2.alias = a2.name), !a2.name)
        throw new s2("geojson-layer:invalid-field-name", "field name is missing", { field: a2 });
      if (!i2.jsonValues.includes(a2.type))
        throw new s2("geojson-layer:invalid-field-type", `invalid type for field "${a2.name}"`, { field: a2 });
      if (a2.name !== h.name) {
        const e2 = H(a2);
        void 0 !== e2 && (_[a2.name] = e2);
      }
      null == a2.length && (a2.length = K(a2));
    }
    if (c) {
      if (c.startTimeField) {
        const e2 = y.get(c.startTimeField);
        e2 ? (c.startTimeField = e2.name, e2.type = "esriFieldTypeDate") : c.startTimeField = null;
      }
      if (c.endTimeField) {
        const e2 = y.get(c.endTimeField);
        e2 ? (c.endTimeField = e2.name, e2.type = "esriFieldTypeDate") : c.endTimeField = null;
      }
      if (c.trackIdField) {
        const e2 = y.get(c.trackIdField);
        e2 ? c.trackIdField = e2.name : (c.trackIdField = null, i4.push({ name: "geojson-layer:invalid-timeInfo-trackIdField", message: "trackIdField is missing", details: { timeInfo: c } }));
      }
      c.startTimeField || c.endTimeField || (i4.push({ name: "geojson-layer:invalid-timeInfo", message: "startTimeField and endTimeField are missing", details: { timeInfo: c } }), c = null);
    }
    const F = u ? o(u) : void 0, b2 = y.dateFields.length ? { timeZoneIANA: i } : null, T = { warnings: i4, featureErrors: [], layerDefinition: { ...D, drawingInfo: F ?? void 0, templates: a(_), extent: void 0, geometryType: u, objectIdField: d4, fields: o2, hasZ: !!l, timeInfo: c, dateFieldsTimeReference: b2 } };
    this._queryEngine = new W({ fieldsIndex: Z.fromLayerJSON({ fields: o2, timeInfo: c, dateFieldsTimeReference: b2 }), geometryType: u, hasM: false, hasZ: l, objectIdField: d4, spatialReference: p2, timeInfo: c, featureStore: new m({ geometryType: u, hasM: false, hasZ: l }), cacheSpatialQueries: true });
    const w2 = this._queryEngine.fieldsIndex.requiredFields.indexOf(h);
    w2 > -1 && this._queryEngine.fieldsIndex.requiredFields.splice(w2, 1), this._createDefaultAttributes = i3(_, d4);
    const q = await this._createFeatures(r);
    this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, q);
    const x2 = this._normalizeFeatures(q, T.featureErrors);
    this._queryEngine.featureStore.addMany(x2);
    const { fullExtent: Q2, timeExtent: v2 } = await this._queryEngine.fetchRecomputedExtents();
    if (T.layerDefinition.extent = Q2, v2) {
      const { start: e2, end: t2 } = v2;
      T.layerDefinition.timeInfo.timeExtent = [e2, t2];
    }
    return T;
  }
  async applyEdits(e) {
    const { spatialReference: t, geometryType: s3 } = this._queryEngine;
    return await Promise.all([I2(t, s3), x(e.adds, t), x(e.updates, t)]), await this._waitSnapshotComplete(), this._applyEdits(e);
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e, t.signal);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e, t.signal);
  }
  async refresh(e) {
    var _a;
    this._loadOptions.customParameters = e, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = d(this._snapshotFeatures), this._snapshotTask.promise.then((e2) => {
      this._queryEngine.featureStore.clear(), this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, e2);
      const t = this._normalizeFeatures(e2);
      t && this._queryEngine.featureStore.addMany(t);
    }, (e2) => {
      this._queryEngine.featureStore.clear(), b(e2) || s.getLogger("esri.layers.GeoJSONLayer").error(new s2("geojson-layer:refresh", "An error occurred during refresh", { error: e2 }));
    }), await this._waitSnapshotComplete();
    const { fullExtent: n, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n, timeExtent: a2 };
  }
  async _createFeatures(e) {
    if (null == e)
      return [];
    const { geometryType: t, hasZ: s3, objectIdField: i4 } = this._queryEngine, r = N2(e, { geometryType: t, hasZ: s3, objectIdField: i4 });
    if (!d2(this._queryEngine.spatialReference, N))
      for (const n of r)
        null != n.geometry && (n.geometry = rt(j2(st(n.geometry, this._queryEngine.geometryType, this._queryEngine.hasZ, false), N, this._queryEngine.spatialReference)));
    return r;
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _fetch(t) {
    const { url: s3, customParameters: i4 } = this._loadOptions, r = (await j(s3, { responseType: "json", query: { ...i4 }, signal: t })).data;
    return E(r), r;
  }
  _normalizeFeatures(e, t) {
    const { objectIdField: s3, fieldsIndex: i4 } = this._queryEngine, r = [];
    for (const n of e) {
      const e2 = this._createDefaultAttributes(), a2 = p(i4, e2, n.attributes, true);
      a2 ? t == null ? void 0 : t.push(a2) : (this._assignObjectId(e2, n.attributes, true), n.attributes = e2, n.objectId = e2[s3], r.push(n));
    }
    return r;
  }
  async _applyEdits(e) {
    const { adds: t, updates: s3, deletes: i4 } = e, r = { addResults: [], deleteResults: [], updateResults: [], uidToObjectId: {} };
    if ((t == null ? void 0 : t.length) && this._applyAddEdits(r, t), (s3 == null ? void 0 : s3.length) && this._applyUpdateEdits(r, s3), i4 == null ? void 0 : i4.length) {
      for (const e2 of i4)
        r.deleteResults.push(d3(e2));
      this._queryEngine.featureStore.removeManyById(i4);
    }
    const { fullExtent: n, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n, timeExtent: a2, featureEditResults: r };
  }
  _applyAddEdits(e, t) {
    const { addResults: s3 } = e, { geometryType: i4, hasM: r, hasZ: a2, objectIdField: o2, spatialReference: l, featureStore: u, fieldsIndex: p2 } = this._queryEngine, c = [];
    for (const d4 of t) {
      if (d4.geometry && i4 !== v(d4.geometry)) {
        s3.push(f("Incorrect geometry type."));
        continue;
      }
      const t2 = this._createDefaultAttributes(), r2 = p(p2, t2, d4.attributes);
      if (r2)
        s3.push(r2);
      else {
        if (this._assignObjectId(t2, d4.attributes), d4.attributes = t2, null != d4.uid) {
          const t3 = d4.attributes[o2];
          e.uidToObjectId[d4.uid] = t3;
        }
        if (null != d4.geometry) {
          const e2 = d4.geometry.spatialReference ?? l;
          d4.geometry = j2(w(d4.geometry, e2), e2, l);
        }
        c.push(d4), s3.push(d3(d4.attributes[o2]));
      }
    }
    u.addMany(et([], c, i4, a2, r, o2));
  }
  _applyUpdateEdits({ updateResults: e }, t) {
    const { geometryType: s3, hasM: i4, hasZ: r, objectIdField: a2, spatialReference: o2, featureStore: l, fieldsIndex: u } = this._queryEngine;
    for (const d4 of t) {
      const { attributes: t2, geometry: m2 } = d4, y = t2 == null ? void 0 : t2[a2];
      if (null == y) {
        e.push(f(`Identifier field ${a2} missing`));
        continue;
      }
      if (!l.has(y)) {
        e.push(f(`Feature with object id ${y} missing`));
        continue;
      }
      const f2 = nt(l.getFeature(y), s3, r, i4);
      if (null != m2) {
        if (s3 !== v(m2)) {
          e.push(f("Incorrect geometry type."));
          continue;
        }
        const t3 = m2.spatialReference ?? o2;
        f2.geometry = j2(w(m2, t3), t3, o2);
      }
      if (t2) {
        const s4 = p(u, f2.attributes, t2);
        if (s4) {
          e.push(s4);
          continue;
        }
      }
      l.add(tt(f2, s3, r, i4, a2)), e.push(d3(y));
    }
  }
  _createObjectIdGenerator(e, t) {
    const s3 = e.fieldsIndex.get(e.objectIdField);
    if ("esriFieldTypeString" === s3.type)
      return () => s3.name + "-" + Date.now().toString(16);
    let i4 = Number.NEGATIVE_INFINITY;
    for (const r of t)
      r.objectId && (i4 = Math.max(i4, r.objectId));
    return i4 = Math.max(0, i4) + 1, () => i4++;
  }
  _assignObjectId(e, t, s3 = false) {
    const i4 = this._queryEngine.objectIdField;
    e[i4] = s3 && i4 in t ? t[i4] : this._objectIdGenerator();
  }
  async _checkProjection(e) {
    try {
      await x(N, e);
    } catch {
      throw new s2("geojson-layer", "Projection not supported");
    }
  }
};
export {
  Q as default
};
//# sourceMappingURL=GeoJSONSourceWorker-ILIMR5JK.js.map
