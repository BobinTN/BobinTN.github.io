import {
  Ht,
  V,
  j
} from "./chunk-R5DM4YAB.js";
import {
  s3 as s
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/portal/support/resourceUtils.js
async function o(e, t = {}, a) {
  await e.load(a);
  const o2 = V(e.itemUrl, "resources"), { start: s3 = 1, num: n2 = 10, sortOrder: l2 = "asc", sortField: u2 = "created" } = t, c2 = { query: { start: s3, num: n2, sortOrder: l2, sortField: u2, token: e.apiKey }, signal: a == null ? void 0 : a.signal }, i2 = await e.portal.request(o2, c2);
  return { total: i2.total, nextStart: i2.nextStart, resources: i2.resources.map(({ created: t2, size: r, resource: a2 }) => ({ created: new Date(t2), size: r, resource: e.resourceFromPath(a2) })) };
}
async function s2(e, a, o2, s3) {
  if (!e.hasPath())
    throw new s(`portal-item-resource-${a}:invalid-path`, "Resource does not have a valid path");
  const n2 = e.portalItem;
  await n2.load(s3);
  const l2 = V(n2.userItemUrl, "add" === a ? "addResources" : "updateResources"), [c2, i2] = u(e.path), p2 = new FormData();
  return c2 && "." !== c2 && p2.append("resourcesPrefix", c2), null != s3 && s3.compress && p2.append("compress", "true"), p2.append("fileName", i2), p2.append("file", o2, i2), p2.append("f", "json"), (s3 == null ? void 0 : s3.access) && p2.append("access", s3.access), await n2.portal.request(l2, { method: "post", body: p2, signal: s3 == null ? void 0 : s3.signal }), e;
}
async function n(e, a, o2) {
  if (!a.hasPath())
    throw new s("portal-item-resources-remove:invalid-path", "Resource does not have a valid path");
  await e.load(o2);
  const s3 = V(e.userItemUrl, "removeResources");
  await e.portal.request(s3, { method: "post", query: { resource: a.path }, signal: o2 == null ? void 0 : o2.signal }), a.portalItem = null;
}
async function l(e, t) {
  await e.load(t);
  const a = V(e.userItemUrl, "removeResources");
  return e.portal.request(a, { method: "post", query: { deleteAll: true }, signal: t == null ? void 0 : t.signal });
}
function u(e) {
  const t = e.lastIndexOf("/");
  return -1 === t ? [".", e] : [e.slice(0, t), e.slice(t + 1)];
}
function c(e) {
  const [t, r] = i(e), [a, o2] = u(t);
  return [a, o2, r];
}
function i(e) {
  const t = Ht(e);
  return null == t ? [e, ""] : [e.slice(0, e.length - t.length - 1), `.${t}`];
}
async function p(t) {
  if ("blob" === t.type)
    return t.blob;
  if ("json" === t.type)
    return new Blob([t.jsonString], { type: "application/json" });
  return (await j(t.url, { responseType: "blob" })).data;
}
function d(e, t) {
  if (!e.hasPath())
    return null;
  const [a, , o2] = c(e.path);
  return e.portalItem.resourceFromPath(V(a, t + o2));
}
function m(e, t) {
  if (!e.hasPath())
    return null;
  const [a, , o2] = c(e.path);
  return e.portalItem.resourceFromPath(V(a, t + o2));
}

export {
  o,
  s2 as s,
  n,
  l,
  c,
  p,
  d,
  m
};
//# sourceMappingURL=chunk-673OQ2U7.js.map
