import {
  v
} from "./chunk-KDISRI7N.js";
import {
  a as a2
} from "./chunk-6767T2MY.js";
import {
  a
} from "./chunk-INVSGWP7.js";
import "./chunk-6QKODWQB.js";
import "./chunk-VLDVHSJX.js";
import {
  m,
  u as u2
} from "./chunk-TXY7QCH7.js";
import "./chunk-ULPUCHVC.js";
import "./chunk-BV5PCIP6.js";
import {
  o
} from "./chunk-552CETTQ.js";
import "./chunk-BXZIEADJ.js";
import "./chunk-A6KO3R3G.js";
import "./chunk-T56C4ORZ.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import "./chunk-RCLKRKWR.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-P3R45ANF.js";
import {
  j
} from "./chunk-WDO2BXGR.js";
import "./chunk-VA52CKTT.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-CQMEHG4P.js";
import "./chunk-GZTU5O23.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-S6NERLXF.js";
import "./chunk-G557TGXY.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-LMT5JII2.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  d
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  b
} from "./chunk-RFPH3ZTZ.js";
import {
  u
} from "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var i = (i2) => {
  let m2 = class extends i2 {
    initialize() {
      this.exportImageParameters = new o({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = u(this.exportImageParameters);
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    fetchPopupFeatures(e2) {
      const { layer: t } = this;
      if (!e2)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: t }));
      const { popupEnabled: o2 } = t;
      if (!o2)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: o2 }));
      const s3 = this.createFetchPopupFeaturesQuery(e2);
      if (!s3)
        return Promise.resolve([]);
      const { extent: p, width: a3, height: i3, x: m3, y: n } = s3;
      if (!(p && a3 && i3))
        throw new s2("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: p, width: a3, height: i3 });
      return t.fetchFeatureInfo(p, a3, i3, m3, n);
    }
  };
  return e([y()], m2.prototype, "exportImageParameters", void 0), e([y({ readOnly: true })], m2.prototype, "exportImageVersion", null), e([y()], m2.prototype, "layer", void 0), e([y(j)], m2.prototype, "timeExtent", void 0), m2 = e([c("esri.layers.mixins.WMSLayerView")], m2), m2;
};

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var y2 = class extends i(a(m(u2))) {
  constructor() {
    super(...arguments), this.bitmapContainer = new a2();
  }
  supportsSpatialReference(e2) {
    return this.layer.serviceSupportsSpatialReference(e2);
  }
  update(e2) {
    this.strategy.update(e2).catch((e3) => {
      b(e3) || s.getLogger(this).error(e3);
    });
  }
  attach() {
    const { layer: e2 } = this, { imageMaxHeight: t, imageMaxWidth: r } = e2;
    this.bitmapContainer = new a2(), this.container.addChild(this.bitmapContainer), this.strategy = new v({ container: this.bitmapContainer, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: t, imageMaxWidth: r, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.addAttachHandles(d(() => this.exportImageVersion, () => this.requestUpdate()));
  }
  detach() {
    this.strategy = u(this.strategy), this.container.removeAllChildren();
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e2) {
    const { view: t, bitmapContainer: r } = this, { x: i2, y: s3 } = e2, { spatialReference: a3 } = t;
    let o2, n = 0, m2 = 0;
    if (r.children.some((e3) => {
      const { width: t2, height: r2, resolution: h2, x: c3, y: d3 } = e3, u3 = c3 + h2 * t2, y3 = d3 - h2 * r2;
      return i2 >= c3 && i2 <= u3 && s3 <= d3 && s3 >= y3 && (o2 = new M({ xmin: c3, ymin: y3, xmax: u3, ymax: d3, spatialReference: a3 }), n = t2, m2 = r2, true);
    }), !o2)
      return null;
    const h = o2.width / n, c2 = Math.round((i2 - o2.xmin) / h), d2 = Math.round((o2.ymax - s3) / h);
    return { extent: o2, width: n, height: m2, x: c2, y: d2 };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e2, t, r, i2) {
    return this.layer.fetchImageBitmap(e2, t, r, { timeExtent: this.timeExtent, ...i2 });
  }
};
e([y()], y2.prototype, "strategy", void 0), e([y()], y2.prototype, "updating", void 0), y2 = e([c("esri.views.2d.layers.WMSLayerView2D")], y2);
var g = y2;
export {
  g as default
};
//# sourceMappingURL=WMSLayerView2D-PWKNA7JF.js.map
