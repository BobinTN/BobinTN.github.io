import {
  n,
  r as r2
} from "./chunk-6AWJSEPC.js";
import "./chunk-PH5FKUBS.js";
import {
  a
} from "./chunk-INVSGWP7.js";
import "./chunk-6QKODWQB.js";
import "./chunk-FBWFFZ74.js";
import "./chunk-GPOJ5GQM.js";
import "./chunk-VLDVHSJX.js";
import {
  m,
  u
} from "./chunk-TXY7QCH7.js";
import "./chunk-ULPUCHVC.js";
import "./chunk-BV5PCIP6.js";
import "./chunk-BXZIEADJ.js";
import "./chunk-A6KO3R3G.js";
import "./chunk-T56C4ORZ.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import "./chunk-RCLKRKWR.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-P3R45ANF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import {
  r
} from "./chunk-DZE6ZO7Z.js";
import {
  y as y2
} from "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import {
  h
} from "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import {
  e as e2
} from "./chunk-GJ4KNHRS.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-EC5POYCL.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-G557TGXY.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import {
  d2 as d
} from "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  b
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var d2 = /* @__PURE__ */ new Set([102113, 102100, 3857, 3785, 900913]);
var y3 = [0, 0];
var _ = class extends a(r2(m(u))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this.layer = null;
  }
  get tileMatrixSet() {
    const e3 = this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);
    return e3 ? (e3.id !== this.layer.activeLayer.tileMatrixSetId && (this.layer.activeLayer.tileMatrixSetId = e3.id), e3) : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume();
  }
  attach() {
    var _a;
    const e3 = (_a = this.tileMatrixSet) == null ? void 0 : _a.tileInfo;
    e3 && (this._tileInfoView = new h(e3), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e4, t) => this.fetchTile(e4, t) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: true, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), this.addAttachHandles(this._updatingHandles.add(() => {
      var _a2, _b;
      return [(_b = (_a2 = this.layer) == null ? void 0 : _a2.activeLayer) == null ? void 0 : _b.styleId, this.tileMatrixSet];
    }, () => this.doRefresh())), super.attach());
  }
  detach() {
    var _a, _b;
    super.detach(), (_a = this._tileStrategy) == null ? void 0 : _a.destroy(), (_b = this._fetchQueue) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return ((_a = this.layer.activeLayer.tileMatrixSets) == null ? void 0 : _a.some((t) => {
      var _a2;
      return d((_a2 = t.tileInfo) == null ? void 0 : _a2.spatialReference, e3);
    })) ?? false;
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended)
        return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => this._updatingHandles.addPromise(this._enqueueTileFetch(e3)));
    }
  }
  acquireTile(e3) {
    const t = this._bitmapView.createTile(e3), i = t.bitmap;
    return [i.x, i.y] = this._tileInfoView.getTileCoords(y3, t.key), i.resolution = this._tileInfoView.getTileResolution(t.key), [i.width, i.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, t = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r3, resamplingLevel: a2 = 0 } = t;
    if (!s2)
      return this._fetchImage(e3, r3);
    const l = new e2(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l, { signal: r3 }), o = await this._fetchImage(l, r3);
    } catch (n2) {
      if (b(n2))
        throw n2;
      if (a2 < 3) {
        const i = this._tileInfoView.getTileParentId(e3.id);
        if (i) {
          const s3 = new e2(i), r4 = await this.fetchTile(s3, { ...t, resamplingLevel: a2 + 1 });
          return n(this._tileInfoView, r4, s3, e3);
        }
      }
      throw n2;
    }
    return n(this._tileInfoView, o, l, e3);
  }
  canResume() {
    const e3 = super.canResume();
    return e3 ? null !== this.tileMatrixSet : e3;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (s2) {
        b(s2) || s.getLogger(this).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t });
  }
  _getTileMatrixSetBySpatialReference(e3) {
    const t = this.view.spatialReference;
    if (!e3.tileMatrixSets)
      return null;
    let i = e3.tileMatrixSets.find((e4) => {
      var _a;
      return d((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference, t);
    });
    return !i && t.isWebMercator && (i = e3.tileMatrixSets.find((e4) => {
      var _a;
      return d2.has(((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference.wkid) ?? -1);
    })), i;
  }
};
e([y({ readOnly: true })], _.prototype, "tileMatrixSet", null), _ = e([c("esri.views.2d.layers.WMTSLayerView2D")], _);
var w = _;
export {
  w as default
};
//# sourceMappingURL=WMTSLayerView2D-BMZE3Y7Q.js.map
