import {
  n,
  o,
  r
} from "./chunk-MVXU4PVF.js";

// node_modules/@arcgis/core/views/webgl/capabilities.js
var s;
var o2;
function n2(e) {
  const r2 = o(e);
  for (; r2.length > 1; ) {
    const t = l(r2.shift());
    if (t.available)
      return t;
  }
  return l(r2.shift());
}
function l(t) {
  switch (t) {
    case n.WEBGL1:
      return a();
    case n.WEBGL2:
      return u();
  }
}
function a() {
  return s || (s = E()), s;
}
function u() {
  return o2 || (o2 = _()), o2;
}
var i = class {
  constructor() {
    this.available = false, this.majorPerformanceCaveat = false, this.maxTextureSize = 0, this.supportsVertexShaderSamplers = false, this.supportsHighPrecisionFragment = false, this.supportsElementIndexUint = false, this.supportsStandardDerivatives = false, this.supportsInstancedArrays = false, this.supportsTextureFloat = false, this.supportsTextureHalfFloat = false, this.supportsColorBufferFloat = false, this.supportsColorBufferFloatBlend = false, this.supportsColorBufferHalfFloat = false;
  }
};
var f = class extends i {
  constructor() {
    super(...arguments), this.type = n.WEBGL1;
  }
};
var p = class extends i {
  constructor() {
    super(...arguments), this.type = n.WEBGL2, this.supportsElementIndexUint = true, this.supportsStandardDerivatives = true, this.supportsInstancedArrays = true, this.supportsTextureFloat = true, this.supportsTextureHalfFloat = true;
  }
};
function c(t, s2) {
  if (t === n.WEBGL1 && "undefined" == typeof WebGLRenderingContext || t === n.WEBGL2 && "undefined" == typeof WebGL2RenderingContext)
    return null;
  const o3 = document.createElement("canvas");
  if (!o3)
    return null;
  let n3 = r(o3, t, { failIfMajorPerformanceCaveat: true });
  if (null == n3 && (n3 = r(o3, t), null != n3 && (s2.majorPerformanceCaveat = true)), null == n3)
    return n3;
  if (t === n.WEBGL1) {
    const t2 = n3.getParameter(n3.VERSION), e = t2 == null ? void 0 : t2.match(/^WebGL\s+([\d.]*)/);
    if (e) {
      const t3 = parseFloat(e[1]);
      s2.available = t3 >= 0.94;
    }
  } else
    s2.available = true;
  s2.maxTextureSize = n3.getParameter(n3.MAX_TEXTURE_SIZE), s2.supportsVertexShaderSamplers = n3.getParameter(n3.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0;
  const l2 = n3.getShaderPrecisionFormat(n3.FRAGMENT_SHADER, n3.HIGH_FLOAT);
  return l2 && (s2.supportsHighPrecisionFragment = l2.precision > 0), n3;
}
function E() {
  const t = new f(), r2 = c(n.WEBGL1, t);
  return null == r2 || (t.supportsElementIndexUint = null !== r2.getExtension("OES_element_index_uint"), t.supportsStandardDerivatives = null !== r2.getExtension("OES_standard_derivatives"), t.supportsInstancedArrays = null !== r2.getExtension("ANGLE_instanced_arrays"), t.supportsTextureFloat = null !== r2.getExtension("OES_texture_float"), t.supportsTextureHalfFloat = null !== r2.getExtension("OES_texture_half_float"), t.supportsColorBufferFloat = null !== r2.getExtension("WEBGL_color_buffer_float"), t.supportsColorBufferFloatBlend = null !== r2.getExtension("EXT_float_blend"), t.supportsColorBufferHalfFloat = null !== r2.getExtension("EXT_color_buffer_half_float")), t;
}
function _() {
  const t = new p(), r2 = c(n.WEBGL2, t);
  return null == r2 || (t.supportsColorBufferFloat = null !== r2.getExtension("EXT_color_buffer_float"), t.supportsColorBufferFloatBlend = null !== r2.getExtension("EXT_float_blend"), t.supportsColorBufferHalfFloat = t.supportsColorBufferFloat || null !== r2.getExtension("EXT_color_buffer_half_float")), t;
}

export {
  n2 as n
};
//# sourceMappingURL=chunk-JLSYG6MV.js.map
