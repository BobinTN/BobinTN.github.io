import {
  E,
  X,
  f as f3
} from "./chunk-75G2UWDH.js";
import "./chunk-PCTEA6NC.js";
import {
  p as p2
} from "./chunk-IF5GYWGE.js";
import "./chunk-JDPYDQ7A.js";
import "./chunk-C3MX2XVI.js";
import {
  o as o3
} from "./chunk-EX6UN27G.js";
import "./chunk-JM34CBG5.js";
import "./chunk-XYM2KKQ4.js";
import "./chunk-FULBQ2BU.js";
import "./chunk-QJ3HQI3B.js";
import "./chunk-WROAERAR.js";
import "./chunk-ED5W63C6.js";
import "./chunk-S6CVQWN7.js";
import "./chunk-JWPJ4Y6I.js";
import "./chunk-OYPRFNII.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-ZRKSP45X.js";
import "./chunk-6C2TVJRX.js";
import "./chunk-Z6LZMG5A.js";
import {
  i
} from "./chunk-TKJNJ6KH.js";
import {
  l
} from "./chunk-36R5EC6A.js";
import "./chunk-3HOLDCR2.js";
import "./chunk-MJTRXEE4.js";
import "./chunk-2XWWTLSJ.js";
import {
  o as o2
} from "./chunk-5DLICG33.js";
import "./chunk-AYCE4MD7.js";
import "./chunk-LVN3FGME.js";
import "./chunk-F3LMPTMS.js";
import {
  j as j2
} from "./chunk-KQ7MCWUF.js";
import {
  f as f2
} from "./chunk-NHWXARIK.js";
import {
  a as a2
} from "./chunk-P5VIVFJT.js";
import "./chunk-SA3C7GIT.js";
import "./chunk-P3R45ANF.js";
import {
  t as t2
} from "./chunk-PIEUUBJ5.js";
import {
  u
} from "./chunk-OTTMOIDW.js";
import {
  m
} from "./chunk-P5GW5DPX.js";
import {
  d
} from "./chunk-WDO2BXGR.js";
import "./chunk-E3I4MGUC.js";
import "./chunk-SHFNNIVW.js";
import "./chunk-IYYYQK4Y.js";
import "./chunk-QN7I7LNY.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-HKYMYCLL.js";
import "./chunk-ICVVQFO6.js";
import "./chunk-O3E2OZKN.js";
import "./chunk-EA6ZJZL6.js";
import "./chunk-VKTTTBW2.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-3RBII4KE.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-7YZ4X2DS.js";
import "./chunk-UPGPT5OX.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-VA52CKTT.js";
import "./chunk-45OAWGCA.js";
import "./chunk-R4LYFMZX.js";
import "./chunk-X2TA76Q5.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-XN6LAULS.js";
import "./chunk-CKGVKMVG.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-6B7VJB6C.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-CQMEHG4P.js";
import "./chunk-GZTU5O23.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-2AXTYAMY.js";
import {
  b
} from "./chunk-WETX22HQ.js";
import "./chunk-OJ65P3EQ.js";
import "./chunk-B3RXTW72.js";
import "./chunk-DCYI44X2.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-4NU7FZD7.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-MLRHWRJQ.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-2AXFVQBN.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import {
  t
} from "./chunk-OFRZSMZB.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import {
  p,
  v as v2,
  w
} from "./chunk-AOJ6OCPK.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-2D3PORS4.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import {
  o
} from "./chunk-WURET5CW.js";
import {
  f,
  r
} from "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import {
  s as s2
} from "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import {
  I,
  _,
  j,
  v
} from "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s3 as s
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var W;
var I2 = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var B = W = class extends a2(t2(E(p2(f3(u(j2(l(m(f2(i(o2(b)))))))))))) {
  constructor(...e2) {
    super(...e2), this.listMode = "show", this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e2, r2) {
    return "string" == typeof e2 ? { url: e2, ...r2 } : e2;
  }
  load(e2) {
    const r2 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e2).catch(a).then(() => this._fetchService(r2))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    var _a;
    const e2 = (_a = this.parsedUrl) == null ? void 0 : _a.path.toLowerCase();
    return e2 ? this._getDefaultAttribution(this._getMapName(e2)) : null;
  }
  readSpatialReference(e2, r2) {
    var _a;
    return (e2 = e2 || ((_a = r2.tileInfo) == null ? void 0 : _a.spatialReference)) && f.fromJSON(e2);
  }
  writeSublayers(e2, r2, t3, s3) {
    if (!this.loaded || !e2)
      return;
    const i2 = e2.slice().reverse().flatten(({ sublayers: e3 }) => e3 && e3.toArray().reverse()).toArray(), o4 = [], a3 = { writeSublayerStructure: false, ...s3 };
    i2.forEach((e3) => {
      const r3 = e3.write({}, a3);
      o4.push(r3);
    });
    o4.some((e3) => Object.keys(e3).length > 1) && (r2.layers = o4);
  }
  get tileServers() {
    var _a;
    return this._getDefaultTileServers((_a = this.parsedUrl) == null ? void 0 : _a.path);
  }
  castTileServers(e2) {
    return Array.isArray(e2) ? e2.map((e3) => I(e3).path) : null;
  }
  fetchTile(e2, t3, s3, i2 = {}) {
    const { signal: o4 } = i2, a3 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "image", signal: o4, query: { ...this.refreshParameters } };
    return j(a3, l2).then((e3) => e3.data);
  }
  async fetchImageBitmapTile(e2, t3, s3, i2 = {}) {
    const { signal: o4 } = i2;
    if (this.fetchTile !== W.prototype.fetchTile) {
      const r2 = await this.fetchTile(e2, t3, s3, i2);
      return o3(r2, e2, t3, s3, o4);
    }
    const a3 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "blob", signal: o4, query: { ...this.refreshParameters } }, { data: n } = await j(a3, l2);
    return o3(n, e2, t3, s3, o4);
  }
  getTileUrl(e2, r2, t3) {
    var _a, _b;
    const s3 = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, i2 = v({ ...(_a = this.parsedUrl) == null ? void 0 : _a.query, blankTile: !s3 && null, ...this.customParameters, token: this.apiKey }), o4 = this.tileServers;
    return `${o4 && o4.length ? o4[r2 % o4.length] : (_b = this.parsedUrl) == null ? void 0 : _b.path}/tile/${e2}/${r2}/${t3}${i2 ? "?" + i2 : ""}`;
  }
  loadAll() {
    return t(this, (e2) => {
      e2(this.allSublayers);
    });
  }
  _fetchService(e2) {
    return new Promise((s3, i2) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX)
          throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s3({ data: this.sourceJSON });
      }
      if (!this.parsedUrl)
        throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const o4 = p(this.parsedUrl.path);
      if (null != o4 && "ImageServer" === o4.serverType)
        throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      j(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e2 }).then(s3, i2);
    }).then((r2) => {
      let t3 = this.url;
      if (r2.ssl && (t3 = this.url = t3.replace(/^http:/i, "https:")), this.sourceJSON = r2.data, this.read(r2.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !w(t3))
        return this._fetchServerVersion(t3, e2).then((e3) => {
          this.read({ currentVersion: e3 });
        }).catch(() => {
        });
    });
  }
  _fetchServerVersion(e2, s3) {
    if (!v2(e2))
      return Promise.reject();
    const i2 = e2.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return j(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s3 }).then((e3) => {
      if (e3.data && e3.data.currentVersion)
        return e3.data.currentVersion;
      throw new s("tile-layer:version-not-available");
    });
  }
  _getMapName(e2) {
    const r2 = e2.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);
    return r2 ? r2[2] : void 0;
  }
  _getDefaultAttribution(e2) {
    if (null == e2)
      return null;
    let r2;
    e2 = e2.toLowerCase();
    for (let t3 = 0, s3 = I2.length; t3 < s3; t3++)
      if (r2 = I2[t3], r2.toLowerCase().includes(e2))
        return _("//static.arcgis.com/attribution/" + r2);
    return null;
  }
  _getDefaultTileServers(e2) {
    if (null == e2)
      return [];
    const r2 = -1 !== e2.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t3 = -1 !== e2.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r2 || t3 ? [e2, e2.replace(r2 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r2 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[C];
  }
};
e([y({ readOnly: true })], B.prototype, "attributionDataUrl", null), e([y({ type: ["show", "hide", "hide-children"] })], B.prototype, "listMode", void 0), e([y({ json: { read: true, write: true } })], B.prototype, "blendMode", void 0), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], B.prototype, "isReference", void 0), e([y({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], B.prototype, "operationalLayerType", void 0), e([y({ type: Boolean })], B.prototype, "resampling", void 0), e([y()], B.prototype, "sourceJSON", void 0), e([y({ type: f })], B.prototype, "spatialReference", void 0), e([o("spatialReference", ["spatialReference", "tileInfo"])], B.prototype, "readSpatialReference", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], B.prototype, "path", void 0), e([y({ readOnly: true })], B.prototype, "sublayers", void 0), e([r("sublayers", { layers: { type: [X] } })], B.prototype, "writeSublayers", null), e([y({ json: { read: false, write: false } })], B.prototype, "popupEnabled", void 0), e([y()], B.prototype, "tileServers", null), e([s2("tileServers")], B.prototype, "castTileServers", null), e([y({ readOnly: true, json: { read: false } })], B.prototype, "type", void 0), e([y(d)], B.prototype, "url", void 0), B = W = e([c("esri.layers.TileLayer")], B);
var C = Symbol("default-fetch-tile");
B.prototype.fetchTile[C] = true;
var N = B;
export {
  N as default
};
//# sourceMappingURL=TileLayer-TPAPWL3U.js.map
