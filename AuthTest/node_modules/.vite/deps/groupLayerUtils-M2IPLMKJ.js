import {
  u
} from "./chunk-ZKKM4KJT.js";
import {
  I,
  b
} from "./chunk-AW4H2VAC.js";
import "./chunk-LXYMQMWX.js";
import "./chunk-XJLKESB7.js";
import "./chunk-QLCCKKQG.js";
import {
  a
} from "./chunk-IUQHF7KZ.js";
import "./chunk-673OQ2U7.js";
import {
  f,
  i,
  s
} from "./chunk-6B7VJB6C.js";
import "./chunk-2D3PORS4.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-APYNYYQC.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-FN47E7YK.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import "./chunk-LXXF7K7W.js";
import "./chunk-SBW6NNVI.js";
import "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/save/groupLayerUtils.js
var i2 = "Group Layer";
var u2 = "group-layer-save";
var c = "group-layer-save-as";
var l = f.GROUP_LAYER_MAP;
function p(e) {
  return { isValid: "group" === e.type, errorMessage: "Layer.type should be 'group'" };
}
function m(e) {
  return { isValid: s(e, l), errorMessage: `Layer.portalItem.typeKeywords should have '${l}'` };
}
function y(e) {
  const r = e.layerJSON;
  return Promise.resolve(r && Object.keys(r).length ? r : null);
}
async function f2(e, r) {
  r.title || (r.title = e.title), i(r, l);
}
async function v(r, s2) {
  return I({ layer: r, itemType: i2, validateLayer: p, validateItem: m, createJSONContext: (e) => a(e, r), createItemData: y, errorNamePrefix: u2, saveResources: async (e, t) => (r.sourceIsPortalItem || await e.removeAllResources().catch(() => {
  }), u(r.resourceReferences, t)) }, s2);
}
async function d(e, s2, a2) {
  return b({ layer: e, itemType: i2, validateLayer: p, createJSONContext: (r) => a(r, e), createItemData: y, errorNamePrefix: c, newItem: s2, setItemProperties: f2, saveResources: (r, t) => u(e.resourceReferences, t) }, a2);
}
export {
  v as save,
  d as saveAs
};
//# sourceMappingURL=groupLayerUtils-M2IPLMKJ.js.map
