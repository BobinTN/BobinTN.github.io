import {
  W
} from "./chunk-ZTXEO5F5.js";
import "./chunk-PH5FKUBS.js";
import "./chunk-NAWD2VOB.js";
import "./chunk-INVSGWP7.js";
import "./chunk-6QKODWQB.js";
import "./chunk-BSLKLRMY.js";
import "./chunk-FBWFFZ74.js";
import "./chunk-3Y5JS6MU.js";
import {
  e as e3
} from "./chunk-MPQZTJY3.js";
import "./chunk-GPOJ5GQM.js";
import "./chunk-VLDVHSJX.js";
import "./chunk-TXY7QCH7.js";
import "./chunk-ULPUCHVC.js";
import "./chunk-BV5PCIP6.js";
import "./chunk-63MRXB4A.js";
import "./chunk-BXZIEADJ.js";
import "./chunk-A6KO3R3G.js";
import "./chunk-T56C4ORZ.js";
import "./chunk-L6C4TBYZ.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-ODGAHKYT.js";
import "./chunk-7PBKZJWC.js";
import "./chunk-3XN3CFM5.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-MUSQVDUI.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-HR42LBYN.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import "./chunk-RCLKRKWR.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import {
  d as d3
} from "./chunk-BVTDQR4O.js";
import "./chunk-KXF4D4TD.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-MJTRXEE4.js";
import "./chunk-2XWWTLSJ.js";
import "./chunk-SA3C7GIT.js";
import "./chunk-P3R45ANF.js";
import "./chunk-WDO2BXGR.js";
import "./chunk-QN7I7LNY.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-ICVVQFO6.js";
import {
  d as d2
} from "./chunk-O3E2OZKN.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-3RBII4KE.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-UPGPT5OX.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-VA52CKTT.js";
import "./chunk-45OAWGCA.js";
import "./chunk-X2TA76Q5.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-XN6LAULS.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-JLSYG6MV.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import "./chunk-2FFBPEOX.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import "./chunk-EY7PGBJG.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-EC5POYCL.js";
import "./chunk-IYXYJAVC.js";
import "./chunk-NCLD32JB.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-B3RXTW72.js";
import "./chunk-DCYI44X2.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-4NU7FZD7.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-MLRHWRJQ.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-2AXFVQBN.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  d
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  e as e2,
  t
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s3 as s
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/layers/StreamLayerView.js
var o = (o2) => {
  let i = class extends o2 {
    resume() {
      this._isUserPaused = false, this.suspended || this._doResume();
    }
    pause() {
      this._isUserPaused = true, this.suspended || this._doPause();
    }
    constructor(...s2) {
      super(...s2), this._isUserPaused = false, this.filter = null;
    }
    get connectionStatus() {
      return this._isUserPaused ? "paused" : this._streamConnectionStatus;
    }
    _onSuspendedChange(s2) {
      s2 ? this._doPause() : this._isUserPaused || this._doResume();
    }
  };
  return e([y()], i.prototype, "_isUserPaused", void 0), e([y({ readOnly: true })], i.prototype, "connectionStatus", null), e([y({ type: d3 })], i.prototype, "filter", void 0), i = e([c("esri.layers.mixins.StreamLayerView")], i), i;
};

// node_modules/@arcgis/core/views/2d/layers/StreamLayerView2D.js
function u(e4, t2) {
  if (null == e4 && null == t2)
    return null;
  const r = {};
  return null != t2 && (r.geometry = t2.toJSON()), null != e4 && (r.where = e4), r;
}
var d4 = class extends o(W) {
  constructor() {
    super(...arguments), this.pipelineConnectionStatus = "disconnected", this.pipelineErrorString = null, this._enabledEventTypes = /* @__PURE__ */ new Set();
  }
  initialize() {
    this.addHandles([d(() => this.layer.customParameters, (e4) => this._proxy.updateCustomParameters(e4)), this.layer.on("send-message-to-socket", (e4) => this._proxy.sendMessageToSocket(e4)), this.layer.on("send-message-to-client", (e4) => this._proxy.sendMessageToClient(e4)), d(() => this.layer.purgeOptions, () => this._update()), d(() => this.suspended, this._onSuspendedChange.bind(this))], "constructor");
  }
  get connectionError() {
    return this.pipelineErrorString ? new s("stream-controller", this.pipelineErrorString) : null;
  }
  on(e4, t2) {
    if (Array.isArray(e4))
      return t(e4.map((e5) => this.on(e5, t2)));
    const i = ["data-received", "message-received"].includes(e4);
    i && (this._enabledEventTypes.add(e4), this._proxy.enableEvent(e4, true));
    const n = super.on(e4, t2), o2 = this;
    return e2(() => {
      n.remove(), i && (o2._proxy.closed || o2.hasEventListener(e4) || o2._proxy.enableEvent(e4, false));
    });
  }
  queryLatestObservations(e4, r) {
    var _a, _b, _c;
    if (!(((_a = this.layer.timeInfo) == null ? void 0 : _a.endField) || ((_b = this.layer.timeInfo) == null ? void 0 : _b.startField) || ((_c = this.layer.timeInfo) == null ? void 0 : _c.trackIdField)))
      throw new s("streamlayer-no-timeField", "queryLatestObservation can only be used with services that define a TrackIdField");
    return this._proxy.queryLatestObservations(this._cleanUpQuery(e4), r).then((e5) => {
      const t2 = d2.fromJSON(e5);
      return t2.features.forEach((e6) => {
        e6.layer = this.layer, e6.sourceLayer = this.layer;
      }), t2;
    });
  }
  detach() {
    super.detach(), this.pipelineConnectionStatus = "disconnected";
  }
  get _streamConnectionStatus() {
    return this.pipelineConnectionStatus;
  }
  _doPause() {
    var _a;
    (_a = this._proxy) == null ? void 0 : _a.pauseStream();
  }
  _doResume() {
    var _a;
    (_a = this._proxy) == null ? void 0 : _a.resumeStream();
  }
  _createClientOptions() {
    return { ...super._createClientOptions(), setProperty: (e4) => {
      this.set(e4.propertyName, e4.value);
    } };
  }
  _createTileRendererHash(e4) {
    const t2 = `${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(u(this.layer.definitionExpression, this.layer.geometryDefinition))})`;
    return super._createTileRendererHash(e4) + t2;
  }
  async _createServiceOptions() {
    var _a;
    const e4 = this.layer, { objectIdField: t2 } = e4, r = e4.fields.map((e5) => e5.toJSON()), s2 = e3(e4.geometryType), i = ((_a = e4.timeInfo) == null ? void 0 : _a.toJSON()) || null, n = e4.spatialReference ? e4.spatialReference.toJSON() : null;
    return { type: "stream", isPaused: this._isUserPaused, fields: r, fieldsIndex: this.layer.fieldsIndex.toJSON(), geometryType: s2, objectIdField: t2, timeInfo: i, source: this.layer.parsedUrl, serviceFilter: u(this.layer.definitionExpression, this.layer.geometryDefinition), purgeOptions: this.layer.purgeOptions.toJSON(), enabledEventTypes: Array.from(this._enabledEventTypes.values()), spatialReference: n, maxReconnectionAttempts: this.layer.maxReconnectionAttempts, maxReconnectionInterval: this.layer.maxReconnectionInterval, updateInterval: this.layer.updateInterval, customParameters: e4.customParameters };
  }
};
e([y()], d4.prototype, "pipelineConnectionStatus", void 0), e([y()], d4.prototype, "pipelineErrorString", void 0), e([y({ readOnly: true })], d4.prototype, "connectionError", null), e([y({ readOnly: true })], d4.prototype, "_streamConnectionStatus", null), d4 = e([c("esri.views.2d.layers.StreamLayerView2D")], d4);
var y2 = d4;
export {
  y2 as default
};
//# sourceMappingURL=StreamLayerView2D-JBOLPZKK.js.map
