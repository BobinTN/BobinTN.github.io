import {
  y as y2
} from "./chunk-XN6LAULS.js";
import {
  o as o3
} from "./chunk-VTWXDFFD.js";
import {
  o as o4
} from "./chunk-V2RPSCV3.js";
import {
  o as o2
} from "./chunk-WURET5CW.js";
import {
  f as f2
} from "./chunk-QWPLZ3QH.js";
import {
  s
} from "./chunk-OMPEZIP5.js";
import {
  o
} from "./chunk-EUTNDAIV.js";
import {
  f
} from "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  S,
  T,
  c,
  d,
  u3 as u
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";

// node_modules/@arcgis/core/layers/support/source/MapLayerSource.js
var a;
var c2 = a = class extends f {
  constructor(r) {
    super(r), this.type = "map-layer";
  }
  clone() {
    const { mapLayerId: r, gdbVersion: o5 } = this;
    return new a({ mapLayerId: r, gdbVersion: o5 });
  }
};
e([o4({ mapLayer: "map-layer" })], c2.prototype, "type", void 0), e([y({ type: T, json: { write: true } })], c2.prototype, "mapLayerId", void 0), e([y({ type: String, json: { write: true } })], c2.prototype, "gdbVersion", void 0), c2 = a = e([c("esri.layers.support.source.MapLayerSource")], c2);

// node_modules/@arcgis/core/layers/support/source/QueryTableDataSource.js
var c3;
var a2 = c3 = class extends f {
  constructor(e2) {
    super(e2), this.type = "query-table";
  }
  clone() {
    const { workspaceId: e2, query: r, oidFields: o5, spatialReference: t, geometryType: p3 } = this, s2 = { workspaceId: e2, query: r, oidFields: o5, spatialReference: (t == null ? void 0 : t.clone()) ?? void 0, geometryType: p3 };
    return new c3(s2);
  }
};
e([o4({ queryTable: "query-table" })], a2.prototype, "type", void 0), e([y({ type: String, json: { write: true } })], a2.prototype, "workspaceId", void 0), e([y({ type: String, json: { write: true } })], a2.prototype, "query", void 0), e([y({ type: String, json: { write: true } })], a2.prototype, "oidFields", void 0), e([y({ type: f2, json: { write: true } })], a2.prototype, "spatialReference", void 0), e([o4(o3)], a2.prototype, "geometryType", void 0), a2 = c3 = e([c("esri.layers.support.source.QueryTableDataSource")], a2);

// node_modules/@arcgis/core/layers/support/source/RasterDataSource.js
var p;
var a3 = p = class extends f {
  constructor(r) {
    super(r), this.type = "raster";
  }
  clone() {
    const { workspaceId: r, dataSourceName: o5 } = this;
    return new p({ workspaceId: r, dataSourceName: o5 });
  }
};
e([o4({ raster: "raster" })], a3.prototype, "type", void 0), e([y({ type: String, json: { write: true } })], a3.prototype, "dataSourceName", void 0), e([y({ type: String, json: { write: true } })], a3.prototype, "workspaceId", void 0), a3 = p = e([c("esri.layers.support.source.RasterDataSource")], a3);

// node_modules/@arcgis/core/layers/support/source/TableDataSource.js
var p2;
var a4 = p2 = class extends f {
  constructor(r) {
    super(r), this.type = "table";
  }
  clone() {
    const { workspaceId: r, gdbVersion: o5, dataSourceName: e2 } = this;
    return new p2({ workspaceId: r, gdbVersion: o5, dataSourceName: e2 });
  }
};
e([o4({ table: "table" })], a4.prototype, "type", void 0), e([y({ type: String, json: { write: true } })], a4.prototype, "workspaceId", void 0), e([y({ type: String, json: { write: true } })], a4.prototype, "gdbVersion", void 0), e([y({ type: String, json: { write: true } })], a4.prototype, "dataSourceName", void 0), a4 = p2 = e([c("esri.layers.support.source.TableDataSource")], a4);

// node_modules/@arcgis/core/layers/support/source/DataLayerSource.js
var d2;
var m;
var T2 = o()({ esriLeftInnerJoin: "left-inner-join", esriLeftOuterJoin: "left-outer-join" });
var j = d2 = class extends f {
  constructor(e2) {
    super(e2), this.type = "join-table";
  }
  readLeftTableSource(e2, r, o5) {
    return g()(e2, r, o5);
  }
  castLeftTableSource(e2) {
    return S(L(), e2);
  }
  readRightTableSource(e2, r, o5) {
    return g()(e2, r, o5);
  }
  castRightTableSource(e2) {
    return S(L(), e2);
  }
  clone() {
    const { leftTableKey: e2, rightTableKey: r, leftTableSource: o5, rightTableSource: t, joinType: a5 } = this, s2 = { leftTableKey: e2, rightTableKey: r, leftTableSource: (o5 == null ? void 0 : o5.clone()) ?? void 0, rightTableSource: (t == null ? void 0 : t.clone()) ?? void 0, joinType: a5 };
    return new d2(s2);
  }
};
e([o4({ joinTable: "join-table" })], j.prototype, "type", void 0), e([y({ type: String, json: { write: true } })], j.prototype, "leftTableKey", void 0), e([y({ type: String, json: { write: true } })], j.prototype, "rightTableKey", void 0), e([y({ json: { write: true } })], j.prototype, "leftTableSource", void 0), e([o2("leftTableSource")], j.prototype, "readLeftTableSource", null), e([s("leftTableSource")], j.prototype, "castLeftTableSource", null), e([y({ json: { write: true } })], j.prototype, "rightTableSource", void 0), e([o2("rightTableSource")], j.prototype, "readRightTableSource", null), e([s("rightTableSource")], j.prototype, "castRightTableSource", null), e([o4(T2)], j.prototype, "joinType", void 0), j = d2 = e([c("esri.layers.support.source.JoinTableDataSource")], j);
var h = null;
function g() {
  return h || (h = u({ types: L() })), h;
}
var v = null;
function L() {
  return v || (v = { key: "type", base: null, typeMap: { "data-layer": K, "map-layer": c2 } }), v;
}
var w = { key: "type", base: null, typeMap: { "join-table": j, "query-table": a2, raster: a3, table: a4 } };
var K = m = class extends f {
  constructor(e2) {
    super(e2), this.type = "data-layer";
  }
  clone() {
    const { fields: e2, dataSource: r } = this;
    return new m({ fields: e2, dataSource: r });
  }
};
e([o4({ dataLayer: "data-layer" })], K.prototype, "type", void 0), e([y({ type: [y2], json: { write: true } })], K.prototype, "fields", void 0), e([y({ types: w, json: { write: true } })], K.prototype, "dataSource", void 0), K = m = e([c("esri.layers.support.source.DataLayerSource")], K), K.from = d(K);

export {
  c2 as c,
  K
};
//# sourceMappingURL=chunk-X2TA76Q5.js.map
