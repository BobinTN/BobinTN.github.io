import {
  a as a2,
  c as c7,
  e as e11,
  r as r11,
  s as s8
} from "./chunk-YMGMMZM2.js";
import {
  _ as _3,
  d as d7,
  i as i10,
  o as o8
} from "./chunk-2S2NELNV.js";
import {
  $,
  At,
  W,
  X,
  Y,
  _ as _4,
  bt,
  dt,
  e as e10,
  ft,
  gt,
  jt,
  mt,
  pt,
  rt,
  st,
  ut,
  xt,
  yt
} from "./chunk-3II2L7GF.js";
import {
  c as c8
} from "./chunk-HIMMLBO7.js";
import {
  e as e9,
  t as t7,
  t2 as t8
} from "./chunk-MDZDX7MD.js";
import {
  n as n12
} from "./chunk-JLSYG6MV.js";
import {
  i as i9,
  l as l4,
  n as n11
} from "./chunk-2EG2F4T2.js";
import {
  e as e8
} from "./chunk-76KPSQLT.js";
import {
  n as n10
} from "./chunk-MVXU4PVF.js";
import {
  l as l3
} from "./chunk-DXAIPMHS.js";
import {
  r as r10,
  t as t6
} from "./chunk-5L3L57TJ.js";
import {
  d as d6
} from "./chunk-ZEQ5M7ZZ.js";
import "./chunk-ZBT4RUU7.js";
import "./chunk-SBUFDP7O.js";
import "./chunk-DZE6ZO7Z.js";
import "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import {
  h as h3
} from "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import {
  n as n8
} from "./chunk-B7TIRUHV.js";
import {
  e as e7,
  f as f6,
  i as i8,
  r as r9
} from "./chunk-EY7PGBJG.js";
import {
  t as t5
} from "./chunk-6M5DUIJQ.js";
import {
  n as n7
} from "./chunk-CMGHBCKF.js";
import {
  M as M2,
  h,
  i as i6,
  r as r8,
  s as s7
} from "./chunk-YVNEJWNQ.js";
import {
  a,
  m as m5,
  o as o7,
  r as r7,
  z
} from "./chunk-NDKHIQMD.js";
import {
  h as h2
} from "./chunk-XUD6H4VO.js";
import {
  j as j3,
  p as p3
} from "./chunk-CQMEHG4P.js";
import "./chunk-GZTU5O23.js";
import {
  P as P2
} from "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import {
  O,
  e as e5,
  e2 as e6,
  i,
  i2 as i3,
  n as n3,
  n2 as n6,
  o as o6,
  r as r4,
  t as t3
} from "./chunk-5LA3TYXZ.js";
import {
  i as i2,
  n2 as n5,
  v as v4
} from "./chunk-L7F73IMH.js";
import "./chunk-SF4VUK6B.js";
import "./chunk-DN2NYMXJ.js";
import "./chunk-UUFM7UDX.js";
import {
  g as g4,
  m as m7
} from "./chunk-5GMFNXRE.js";
import {
  l as l5
} from "./chunk-J2R5B4T4.js";
import {
  n as n9
} from "./chunk-HH7O7HZ5.js";
import {
  l as l2
} from "./chunk-2AXTYAMY.js";
import "./chunk-JIDGV6CL.js";
import {
  v as v5
} from "./chunk-BADPOP5P.js";
import "./chunk-WETX22HQ.js";
import {
  m as m6
} from "./chunk-IYXYJAVC.js";
import "./chunk-NCLD32JB.js";
import "./chunk-OJ65P3EQ.js";
import "./chunk-24NOAXOQ.js";
import {
  c as c6
} from "./chunk-B3RXTW72.js";
import "./chunk-DCYI44X2.js";
import {
  i as i5
} from "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-4NU7FZD7.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-MLRHWRJQ.js";
import "./chunk-H4ZZ5S37.js";
import {
  u as u3
} from "./chunk-G557TGXY.js";
import "./chunk-2AXFVQBN.js";
import {
  c as c5
} from "./chunk-WOGT6UK2.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-KVSZM7R6.js";
import "./chunk-KX2F2CD3.js";
import "./chunk-UNONG753.js";
import "./chunk-OFRZSMZB.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import {
  c as c4
} from "./chunk-EIY2DYTV.js";
import {
  i as i7
} from "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import {
  p as p2
} from "./chunk-AOJ6OCPK.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-2D3PORS4.js";
import {
  D,
  E as E2,
  T,
  _ as _2,
  b as b2
} from "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import {
  j as j2,
  s as s6
} from "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import {
  i as i4,
  m as m4
} from "./chunk-MKW4ORPJ.js";
import {
  g as g3
} from "./chunk-YTH6VA7N.js";
import {
  r as r6
} from "./chunk-GINTRQSD.js";
import "./chunk-APYNYYQC.js";
import {
  A as A2,
  C as C2,
  P,
  d as d3,
  p,
  v as v3,
  w
} from "./chunk-TBSVVR6M.js";
import {
  _,
  d as d2
} from "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import {
  f as f3
} from "./chunk-K6C6RVSV.js";
import {
  o as o5,
  r as r3
} from "./chunk-KBJ5Z4R2.js";
import {
  V
} from "./chunk-JUZJCTW2.js";
import {
  o as o4
} from "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import {
  m as m3
} from "./chunk-CCXEAKIM.js";
import {
  M,
  f as f5,
  t as t4
} from "./chunk-Y5D433JZ.js";
import {
  d as d5,
  g as g2,
  x2 as x
} from "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import {
  f as f4
} from "./chunk-QWPLZ3QH.js";
import {
  d2 as d4,
  r as r5
} from "./chunk-HLGIRLYQ.js";
import {
  m as m2,
  n as n4
} from "./chunk-N2K4VRZH.js";
import {
  c as c3,
  f as f2
} from "./chunk-WL4VPODY.js";
import {
  s as s5
} from "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import {
  f
} from "./chunk-NSRXJNTS.js";
import {
  e as e2,
  g,
  k as k2,
  o2 as o,
  o3 as o2,
  r,
  t2 as t,
  t4 as t2,
  v,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c as c2,
  n2,
  s3 as s4,
  v as v2
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  A,
  C,
  E,
  b,
  c2 as c,
  d,
  e as e4,
  j,
  m,
  o as o3,
  r as r2,
  s as s3,
  u as u2
} from "./chunk-RFPH3ZTZ.js";
import {
  e as e3,
  l,
  u
} from "./chunk-WGO3VFQP.js";
import {
  n
} from "./chunk-CQS47VN5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import {
  has,
  k
} from "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/BreakpointsOwner.js
var l6 = { widthBreakpoint: { getValue(e22) {
  const i23 = e22.viewSize[0], s19 = e22.breakpoints, a23 = this.values;
  return i23 <= s19.xsmall ? a23.xsmall : i23 <= s19.small ? a23.small : i23 <= s19.medium ? a23.medium : i23 <= s19.large ? a23.large : a23.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-width-xsmall esri-view-width-less-than-small esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", small: "esri-view-width-small esri-view-width-greater-than-xsmall esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", medium: "esri-view-width-medium esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-less-than-large esri-view-width-less-than-xlarge", large: "esri-view-width-large esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-less-than-xlarge", xlarge: "esri-view-width-xlarge esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-greater-than-large" } }, heightBreakpoint: { getValue(e22) {
  const i23 = e22.viewSize[1], s19 = e22.breakpoints, a23 = this.values;
  return i23 <= s19.xsmall ? a23.xsmall : i23 <= s19.small ? a23.small : i23 <= s19.medium ? a23.medium : i23 <= s19.large ? a23.large : a23.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-height-xsmall esri-view-height-less-than-small esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", small: "esri-view-height-small esri-view-height-greater-than-xsmall esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", medium: "esri-view-height-medium esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-less-than-large esri-view-height-less-than-xlarge", large: "esri-view-height-large esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-less-than-xlarge", xlarge: "esri-view-height-xlarge esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-greater-than-large" } }, orientation: { getValue(e22) {
  const i23 = e22.viewSize, s19 = i23[0], a23 = i23[1], t22 = this.values;
  return a23 >= s19 ? t22.portrait : t22.landscape;
}, values: { portrait: "portrait", landscape: "landscape" }, valueToClassName: { portrait: "esri-view-orientation-portrait", landscape: "esri-view-orientation-landscape" } } };
var h4 = { xsmall: 544, small: 768, medium: 992, large: 1200 };
function n13(e22) {
  const i23 = e22;
  return i23 && i23.xsmall < i23.small && i23.small < i23.medium && i23.medium < i23.large;
}
function m8(e22, i23) {
  return i23 ? l6[e22].valueToClassName[i23].split(" ") : [];
}
var o9 = (o25) => {
  let g10 = class extends o25 {
    constructor(...e22) {
      super(...e22), this.orientation = null, this.widthBreakpoint = null, this.heightBreakpoint = null, this.breakpoints = h4;
    }
    initialize() {
      this.addHandles(d3(() => [this.breakpoints, this.size], () => this._updateClassNames(), P));
    }
    destroy() {
      this.destroyed || this._removeActiveClassNames();
    }
    set breakpoints(e22) {
      if (e22 === this._get("breakpoints"))
        return;
      const i23 = n13(e22);
      if (!i23) {
        const e23 = JSON.stringify(h4, null, 2);
        console.warn("provided breakpoints are not valid, using defaults:" + e23);
      }
      e22 = i23 ? e22 : h4, this._set("breakpoints", { ...e22 });
    }
    _updateClassNames() {
      if (!this.container)
        return;
      const e22 = t2.acquire(), s19 = t2.acquire();
      let a23, t22 = false;
      for (a23 in l6) {
        const i23 = this[a23], r24 = l6[a23].getValue({ viewSize: this.size, breakpoints: this.breakpoints });
        i23 !== r24 && (t22 = true, this[a23] = r24, m8(a23, i23).forEach((e23) => s19.push(e23)), m8(a23, r24).forEach((i24) => e22.push(i24)));
      }
      t22 && (this._applyClassNameChanges(e22, s19), t2.release(e22), t2.release(s19));
    }
    _applyClassNameChanges(e22, i23) {
      const s19 = this.container;
      s19 && (i23.forEach((e23) => s19.classList.remove(e23)), e22.forEach((e23) => s19.classList.add(e23)));
    }
    _removeActiveClassNames() {
      const e22 = this.container;
      if (!e22)
        return;
      let i23;
      for (i23 in l6)
        m8(i23, this[i23]).forEach((i24) => e22.classList.remove(i24));
    }
  };
  return e([y()], g10.prototype, "breakpoints", null), e([y()], g10.prototype, "orientation", void 0), e([y()], g10.prototype, "widthBreakpoint", void 0), e([y()], g10.prototype, "heightBreakpoint", void 0), g10 = e([c2("esri.views.BreakpointsOwner")], g10), g10;
};

// node_modules/@arcgis/core/views/overlay/ViewOverlay.js
var a3 = class extends g {
  constructor() {
    super(...arguments), this.items = new V(), this._watchUpdatingTracking = new h2(), this._callbacks = /* @__PURE__ */ new Map(), this._projector = i2(), this._hiddenProjector = i2();
  }
  get needsRender() {
    return this.items.length > 0;
  }
  get updating() {
    var _a;
    return ((_a = this._watchUpdatingTracking) == null ? void 0 : _a.updating) ?? false;
  }
  initialize() {
    const t22 = document.createElement("div");
    t22.className = "esri-overlay-surface", this._set("surface", t22), this._hiddenSurface = document.createElement("div"), this._hiddenSurface.setAttribute("style", "visibility: hidden;"), t22.appendChild(this._hiddenSurface), this._watchUpdatingTracking.addOnCollectionChange(() => this.items, (t23) => {
      for (const e22 of t23.added) {
        const t24 = () => e22.render();
        this._callbacks.set(e22, t24), this._projector.append(this.surface, t24);
      }
      for (const e22 of t23.removed) {
        const t24 = this._projector.detach(this._callbacks.get(e22));
        this.surface.removeChild(t24.domNode), this._callbacks.delete(e22);
      }
    });
  }
  addItem(t22) {
    this.items.add(t22);
  }
  removeItem(t22) {
    this.items.remove(t22);
  }
  destroy() {
    this.items.removeAll(), this._callbacks.forEach((t22) => this._projector.detach(t22)), this._callbacks = null, this._projector = null, this._watchUpdatingTracking.destroy();
  }
  render() {
    this._projector.renderNow();
  }
  computeBoundingRect(t22) {
    const e22 = this._hiddenSurface, o25 = this._hiddenProjector;
    let r24;
    const s19 = () => (r24 = t22.render(), r24);
    o25.append(e22, s19), o25.renderNow();
    const i23 = { left: 0, top: 0, right: 0, bottom: 0 };
    if (r24 == null ? void 0 : r24.domNode) {
      const t23 = r24.domNode.getBoundingClientRect();
      i23.left = t23.left, i23.top = t23.top, i23.right = t23.right, i23.bottom = t23.bottom;
    }
    for (o25.detach(s19); e22.firstChild; )
      e22.removeChild(e22.firstChild);
    return i23;
  }
  overlaps(t22, e22) {
    const o25 = this.computeBoundingRect(t22), r24 = this.computeBoundingRect(e22);
    return Math.max(o25.left, r24.left) <= Math.min(o25.right, r24.right) && Math.max(o25.top, r24.top) <= Math.min(o25.bottom, r24.bottom);
  }
  get hasVisibleItems() {
    return this.items.some((t22) => t22.visible);
  }
  async prepare() {
    await document.fonts.load(this._fontString()).catch(() => {
    });
  }
  renderCanvas(t22, e22) {
    const o25 = !!(e22 == null ? void 0 : e22.disableDecorations);
    if (!this.items.some((t23) => t23.visible && !(o25 && t23.isDecoration)))
      return;
    const r24 = t22.getContext("2d");
    r24.save(), r24.font = this._fontString(), this.items.forEach((t23) => {
      o25 && t23.isDecoration || (r24.save(), t23.renderCanvas(r24), r24.restore());
    }), r24.restore();
  }
  _fontString() {
    return `10px ${getComputedStyle(this.surface).fontFamily}`;
  }
};
e([y({ readOnly: true })], a3.prototype, "surface", void 0), e([y({ readOnly: true })], a3.prototype, "items", void 0), e([y({ readOnly: true })], a3.prototype, "needsRender", null), e([y({ readOnly: true })], a3.prototype, "_watchUpdatingTracking", void 0), e([y({ readOnly: true })], a3.prototype, "updating", null), a3 = e([c2("esri.views.overlay.ViewOverlay")], a3);
var c9 = a3;

// node_modules/@arcgis/core/views/DOMContainer.js
var g5 = [0, 0];
function _5(e22) {
  const t22 = (e22.ownerDocument || window.document).defaultView, s19 = e22.getBoundingClientRect();
  return g5[0] = s19.left + ((t22 == null ? void 0 : t22.pageXOffset) ?? 0), g5[1] = s19.top + ((t22 == null ? void 0 : t22.pageYOffset) ?? 0), g5;
}
function v6(e22) {
  e22 && (n3(e22), e22.parentNode && e22.parentNode.removeChild(e22));
}
function w2(e22) {
  const t22 = document.createElement("div");
  return e22.appendChild(t22), t22;
}
var C3 = 16;
var H = 750;
var j4 = 512;
var O2 = 2;
var z2 = (i23) => {
  let g10 = class extends i23 {
    constructor(...e22) {
      super(...e22), this._freqInfo = { freq: C3, time: H }, this._overlayRenderTaskHandle = null, this.height = 0, this.messagesCommon = null, this.overlay = null, this.position = null, this.resizing = false, this.root = null, this.surface = null, this.suspended = true, this.ui = null, this.userContent = null, this.width = 0, this.widthBreakpoint = null, this.addHandles([d3(() => this.cursor, (e23) => {
        const { surface: t22 } = this;
        t22 && t22.setAttribute("data-cursor", e23);
      }), d3(() => this.navigating, (e23) => {
        const { surface: t22 } = this;
        t22 && t22.setAttribute("data-navigating", e23.toString());
      })]);
    }
    initialize() {
      const e22 = has("mac"), t22 = async () => {
        e22 && (await w(() => this.ready), this.messagesCommon = await f3("esri/t9n/common").catch(() => {
        }));
      };
      t22(), this.addHandles([d3(() => this.ui, (e23, t23) => this._handleUIChange(e23, t23), P), this.on("focus", () => this.notifyChange("focused")), this.on("blur", () => this.notifyChange("focused")), f2(t22)]);
    }
    destroy() {
      this.destroyed || (this.ui = u(this.ui), this.container = null);
    }
    get container() {
      return this._get("container") ?? null;
    }
    set container(e22) {
      const i24 = this._get("container"), r24 = e5(e22);
      if (r24 || "string" != typeof e22 || s.getLogger(this).error("#container", `element with id '${e22}' not found`), i24 === r24)
        return;
      if (this._stopMeasuring(), i24 && (i24.classList.remove("esri-view"), this._overlayRenderTaskHandle && (this._overlayRenderTaskHandle.remove(), this._overlayRenderTaskHandle = null), this.overlay && (this.overlay.destroy(), this._set("overlay", null)), this.root && (v6(this.root), this._set("root", null)), this.userContent && (i(this.userContent, i24), v6(this.userContent), this._set("userContent", null))), !r24)
        return this._set("width", 0), this._set("height", 0), this._set("position", null), this._set("suspended", true), this._set("surface", null), void this._set("container", null);
      r24.classList.add("esri-view");
      const n30 = document.createElement("div");
      n30.className = "esri-view-user-storage", i(r24, n30), r24.appendChild(n30), this._set("userContent", n30);
      const d18 = document.createElement("div");
      d18.className = "esri-view-root", r24.insertBefore(d18, r24.firstChild), this._set("root", d18);
      const l20 = document.createElement("div");
      l20.className = "esri-view-surface", l20.setAttribute("role", "application"), l20.tabIndex = 0, d18.appendChild(l20), this._set("surface", l20);
      const c24 = new c9();
      d18.appendChild(c24.surface), this._set("overlay", c24), this.addHandles(d3(() => c24.needsRender, (e23) => {
        e23 && !this._overlayRenderTaskHandle ? this._overlayRenderTaskHandle = v({ render: () => {
          var _a;
          return (_a = this.overlay) == null ? void 0 : _a.render();
        } }) : this._overlayRenderTaskHandle = l(this._overlayRenderTaskHandle);
      })), this.forceDOMReadyCycle(), this._set("container", r24), this._startMeasuring();
    }
    get focused() {
      const e22 = document.activeElement === this.surface;
      return document.hasFocus() && e22;
    }
    get size() {
      return [this.width, this.height];
    }
    blur() {
      var _a;
      (_a = this.surface) == null ? void 0 : _a.blur();
    }
    focus() {
      var _a;
      (_a = this.surface) == null ? void 0 : _a.focus();
    }
    pageToContainer(e22, t22, s19) {
      const i24 = this.position;
      return e22 -= i24 ? i24[0] : 0, t22 -= i24 ? i24[1] : 0, s19 ? (s19[0] = e22, s19[1] = t22) : s19 = [e22, t22], s19;
    }
    containerToPage(e22, t22, s19) {
      const i24 = this.position;
      return e22 += i24 ? i24[0] : 0, t22 += i24 ? i24[1] : 0, s19 ? (s19[0] = e22, s19[1] = t22) : s19 = [e22, t22], s19;
    }
    _handleUIChange(e22, t22) {
      this.removeHandles("ui"), t22 && t22 !== e22 && t22.destroy(), e22 && (e22.view = this, this.addHandles(d3(() => this.root, (t23) => {
        e22.container = t23 ? w2(t23) : null;
      }, P), "ui")), this._set("ui", e22);
    }
    _stopMeasuring() {
      this.removeHandles("measuring"), this._get("resizing") && this._set("resizing", false);
    }
    _startMeasuring() {
      const e22 = this._freqInfo;
      e22.freq = C3, e22.time = H, this.addHandles([r2(window, "resize", () => {
        e22.freq = C3, e22.time = H;
      }), v({ prepare: (e23) => {
        const t22 = this._measure(), s19 = this._freqInfo;
        if (s19.time += e23.deltaTime, t22 && (s19.freq = C3, this._get("resizing") || this._set("resizing", true)), s19.time < s19.freq)
          return;
        s19.time = 0;
        const i24 = this._position();
        s19.freq = i24 || t22 ? C3 : Math.min(H, s19.freq * O2), !t22 && s19.freq >= j4 && this._get("resizing") && this._set("resizing", false);
      } })], "measuring"), this._measure(), this._position();
    }
    _measure() {
      const e22 = this.container, t22 = e22 ? e22.clientWidth : 0, s19 = e22 ? e22.clientHeight : 0;
      if (0 === t22 || 0 === s19)
        return this.suspended || this._set("suspended", true), false;
      const i24 = this.width, r24 = this.height;
      return t22 === i24 && s19 === r24 ? (this.suspended && this._set("suspended", false), false) : (this._set("width", t22), this._set("height", s19), this.suspended && this._set("suspended", false), this.emit("resize", { oldWidth: i24, oldHeight: r24, width: t22, height: s19 }), true);
    }
    _position() {
      const e22 = this.container, t22 = this.position, s19 = e22 && _5(e22);
      return !!s19 && ((!t22 || s19[0] !== t22[0] || s19[1] !== t22[1]) && (this._set("position", [s19[0], s19[1]]), true));
    }
    forceDOMReadyCycle() {
    }
  };
  return e([y()], g10.prototype, "container", null), e([y({ readOnly: true })], g10.prototype, "focused", null), e([y({ readOnly: true })], g10.prototype, "height", void 0), e([y()], g10.prototype, "messagesCommon", void 0), e([y({ type: c9 })], g10.prototype, "overlay", void 0), e([y({ readOnly: true })], g10.prototype, "position", void 0), e([y({ readOnly: true })], g10.prototype, "resizing", void 0), e([y({ readOnly: true })], g10.prototype, "root", void 0), e([y({ value: null, readOnly: true })], g10.prototype, "size", null), e([y({ readOnly: true })], g10.prototype, "surface", void 0), e([y({ readOnly: true })], g10.prototype, "suspended", void 0), e([y()], g10.prototype, "ui", void 0), e([y({ readOnly: true })], g10.prototype, "userContent", void 0), e([y({ readOnly: true })], g10.prototype, "width", void 0), e([y()], g10.prototype, "widthBreakpoint", void 0), g10 = e([c2("esri.views.DOMContainer")], g10), g10;
};

// node_modules/@arcgis/core/views/PopupView.js
function d8(e22) {
  return null != e22 && "open" in e22 && "declaredClass" in e22;
}
function y2(e22) {
  return null != e22 && "declaredClass" in e22 && "dockOptions" in e22;
}
var w3 = (w6) => {
  let m15 = class extends w6 {
    constructor() {
      super(...arguments), this._popupSetupTask = null, this.popup = {}, this.popupEnabled = true;
    }
    initialize() {
      this.addHandles([d3(() => [this.ui, this.popup], ([e22, p22], t22) => {
        const i23 = "popup", s19 = "manual";
        if (t22) {
          const [e23, p23] = t22;
          e23 && d8(p23) && (p23.view = null, y2(p23) && e23.remove(p23, i23));
        }
        e22 && d8(p22) && (p22.view = this, y2(p22) && e22.add(p22, { key: i23, position: s19, internal: true }));
      }, P), this.on("click", (e22) => {
        this.popup && this.popupEnabled && ("mouse" !== e22.pointerType || 0 === e22.button) && (!d8(this.popup) && "autoOpenEnabled" in this.popup && false === this.popup.autoOpenEnabled || (d8(this.popup) ? this.popup.viewModel.handleViewClick(e22) : e22.async(async () => {
          await this.setupPopup(), d8(this.popup) && !this.destroyed && this.ready && this.popupEnabled && this.popup.viewModel.handleViewClick(e22);
        })));
      }, _3.WIDGET)]), w(() => this.ready && this.popupEnabled && !this.updating).then(() => {
        import("./Popup-3GV6DMGN.js");
      });
    }
    destroy() {
      this.destroyed || this.closePopup();
    }
    async openPopup(e22) {
      if (d8(this.popup))
        return this.popup.open(e22);
      try {
        if (await this.setupPopup(), !this.popup)
          return void s.getLogger(this).error(new s2("view:null-popup", "Popup is null and can't be opened"));
        this.popup.open(e22);
      } catch {
      }
    }
    closePopup() {
      var _a;
      (_a = this._popupSetupTask) == null ? void 0 : _a.abort(), d8(this.popup) && this.popup.close();
    }
    async fetchPopupFeatures(e22, p22) {
      await this.when();
      const { location: t22, queryArea: i23, layerViewsAndGraphics: s19, clientOnlyGraphics: r24 } = await this._prepareFetchPopupFeatures(e22, p22), a23 = Promise.resolve(r24), n30 = this._queryLayerPopupFeatures(i23, s19, p22), u14 = n30.map((e23) => e23.promise);
      return { location: t22, clientOnlyGraphics: r24, allGraphicsPromise: j([a23, ...u14]).then((e23) => Array.from(new Set(e23.flat()))), promisesPerLayerView: n30 };
    }
    async setupPopup() {
      var _a;
      if ((_a = this._popupSetupTask) == null ? void 0 : _a.abort(), this.popup && !d8(this.popup))
        return this._popupSetupTask = d2(async (e22) => {
          const { default: p22 } = await import("./Popup-3GV6DMGN.js");
          if (s3(e22), !this.popup || d8(this.popup))
            return;
          const t22 = this.popup;
          delete t22.open, delete t22.close, this.popup = new p22(t22);
        }), this._popupSetupTask.promise;
    }
    _queryLayerPopupFeatures(e22, p22, t22) {
      return p22.map(({ layerView: p23, graphics: i23 }) => {
        const s19 = { clientGraphics: i23, event: null != t22 ? t22.event : void 0, signal: null != t22 ? t22.signal : void 0, defaultPopupTemplateEnabled: null != t22 && !!t22.defaultPopupTemplateEnabled }, o25 = p23.fetchPopupFeatures(e22, s19);
        return { layerView: p23, promise: o25 };
      });
    }
    _isValidPopupGraphic(e22, p22) {
      return e22 && !!e22.getEffectivePopupTemplate(null != p22 && p22.defaultPopupTemplateEnabled);
    }
    async _prepareFetchPopupFeatures(e22, p22) {
      const { clientGraphics: t22, queryArea: i23, location: s19 } = await this._popupHitTestGraphics(e22, p22), o25 = this._getFetchPopupLayerViews(), { layerViewsAndGraphics: r24, clientOnlyGraphics: a23 } = this._graphicsPerFetchPopupLayerView(t22, o25);
      return { clientOnlyGraphics: a23, layerViewsAndGraphics: r24, queryArea: i23, location: s19 };
    }
    async _popupHitTestGraphics(e22, p22) {
      const t22 = await this.popupHitTest(e22), i23 = t22.results, s19 = t22.mapPoint, o25 = i23.filter((e23) => "graphic" === e23.type && this._isValidPopupGraphic(e23.graphic, p22)), r24 = o25.length ? o25[0].mapPoint : null;
      return { clientGraphics: o25.map((e23) => e23.graphic), queryArea: s19, location: s19 || r24 };
    }
    _getFetchPopupLayerViews() {
      const e22 = [];
      return this.allLayerViews.forEach((p22) => {
        this._isValidPopupLayerView(p22) && e22.push(p22);
      }), null != this.graphicsView && this._isValidPopupLayerView(this.graphicsView) && e22.push(this.graphicsView), e22.reverse();
    }
    _isValidPopupLayerView(e22) {
      return null != e22 && (!("layer" in e22) || !e22.suspended) && "fetchPopupFeatures" in e22;
    }
    _graphicsPerFetchPopupLayerView(e22, p22) {
      const t22 = [], i23 = /* @__PURE__ */ new Map(), s19 = p22.map((e23) => {
        const p23 = [];
        return "layer" in e23 ? i23.set(e23.layer, p23) : i23.set(e23.graphics, p23), { layerView: e23, graphics: p23 };
      });
      for (const o25 of e22) {
        const e23 = i23.get(o25.layer) || i23.get(o25.sourceLayer) || null;
        e23 ? e23.push(o25) : t22.push(o25);
      }
      return { layerViewsAndGraphics: s19, clientOnlyGraphics: t22 };
    }
  };
  return e([y({ cast(e22) {
    return !e22 || d8(e22) || "object" == typeof e22 && (e22.open = (e23) => (r(s.getLogger(this), "view.popup is no longer created by default. view.popup.open() will stop working when the popup isn't created", { replacement: "Use view.openPopup() instead.", version: "4.27" }), this.openPopup(e23)), e22.close = () => (r(s.getLogger(this), "view.popup is no longer created by default. view.popup.close() will stop working when the popup isn't created", { replacement: "Use view.closePopup() instead.", version: "4.27" }), this.closePopup())), e22;
  } })], m15.prototype, "popup", void 0), e([y()], m15.prototype, "popupEnabled", void 0), m15 = e([c2("esri.views.PopupView")], m15), m15;
};

// node_modules/@arcgis/core/support/AnalysesCollection.js
var t9 = class extends n11 {
  constructor(e22) {
    super(e22), this.addHandles(this.on("before-add", (e23) => {
      null != e23.item && e23.item.parent === this.owner && (s.getLogger(this).warn("Analysis inside the collection must be unique. Not adding this element again."), e23.preventDefault());
    }));
  }
  _own(e22) {
    e22.parent = this.owner;
  }
  _release(e22) {
    e22.parent = null;
  }
};
t9 = e([c2("esri.support.AnalysesCollection")], t9);

// node_modules/@arcgis/core/views/BasemapView.js
var n14 = class extends g {
  constructor(e22) {
    super(e22), this.view = null, this.baseLayerViews = new V(), this.referenceLayerViews = new V(), this._loadingHandle = d3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap;
    }, (e23) => {
      e23 && e23.load().catch(() => {
      });
    }, P);
  }
  destroy() {
    this._set("view", null), this._loadingHandle && (this._loadingHandle.remove(), this._loadingHandle = null);
    for (const e22 of this.baseLayerViews)
      e22.destroy();
    this.baseLayerViews.length = 0;
    for (const e22 of this.referenceLayerViews)
      e22.destroy();
    this.referenceLayerViews.length = 0;
  }
  get suspended() {
    return !this.view || this.view.suspended;
  }
  get updating() {
    var _a, _b;
    if (this.view && this.view.suspended)
      return false;
    const e22 = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap;
    return !!e22 && (!!e22.loaded && (this.baseLayerViews.some((e23) => e23.updating) || this.referenceLayerViews.some((e23) => e23.updating)));
  }
};
e([y({ constructOnly: true })], n14.prototype, "view", void 0), e([y({ readOnly: true })], n14.prototype, "baseLayerViews", void 0), e([y({ readOnly: true })], n14.prototype, "referenceLayerViews", void 0), e([y({ readOnly: true })], n14.prototype, "suspended", null), e([y({ type: Boolean, readOnly: true })], n14.prototype, "updating", null), n14 = e([c2("esri.views.BasemapView")], n14);

// node_modules/@arcgis/core/views/LayerViewManager.js
function v7(e22) {
  return "tryRecycleWith" in e22;
}
var V2 = class {
  constructor(e22, r24, t22) {
    this.layer = e22, this.view = r24, this.layerViewImporter = t22, this._controller = new AbortController(), this._deferred = C(), this._started = false, this.done = false, this.promise = this._deferred.promise, m(this._controller.signal, () => {
      const r25 = new s2("cancelled:layerview-create", "layerview creation cancelled", { layer: e22 });
      this._deferred.reject(r25);
    });
  }
  tryRecycle(e22) {
    if (!this.done || !this.layerView || !v7(this.layerView))
      return null;
    const r24 = this.layer.type, i23 = this._controller.signal;
    for (let t22 = 0; t22 < e22.length; t22++) {
      const s19 = e22[t22];
      if (s19.type !== r24)
        continue;
      const a23 = this.layerView.tryRecycleWith(s19, { signal: i23 });
      if (a23) {
        e22.splice(t22, 1), this.layer = s19;
        const r25 = this.layerView, i24 = r25.view;
        return this.promise = Promise.race([a23.then(() => (s3(this._controller.signal), s19.emit("layerview-destroy", { view: i24, layerView: r25 }), i24.emit("layerview-destroy", { view: i24, layerView: r25 }), s19.emit("layerview-create", { view: i24, layerView: r25 }), i24.emit("layerview-create", { view: i24, layerView: r25 }), r25)), new Promise((e23, r26) => m(this._controller.signal, () => r26(u2())))]), this.promise;
      }
    }
    return null;
  }
  destroy() {
    this._controller.abort();
    const { layerView: e22 } = this;
    if (e22) {
      const { layer: r24, view: i23 } = this;
      r24.emit("layerview-destroy", { view: i23, layerView: e22 }), i23.emit("layerview-destroy", { layer: r24, layerView: e22 });
    }
    this.done = true, this.layer = null, this.layerView = null, this.view = null, this.layerViewImporter = null, this._map = null;
  }
  async start() {
    var _a, _b;
    if (this._started)
      return;
    this._started = true;
    const { _controller: { signal: e22 }, layer: r24, view: t22 } = this;
    this._map = t22.map;
    try {
      let o25, l20;
      if (await r24.load({ signal: e22 }), r24.prefetchResources && await r24.prefetchResources({ signal: e22 }), I(r24))
        o25 = await r24.createLayerView(t22, { signal: e22 });
      else {
        if (!this.layerViewImporter.hasLayerViewModule(r24))
          throw new s2("layer:view-not-supported", "No layerview implementation was found");
        const s19 = await this.layerViewImporter.importLayerView(r24);
        s3(e22), o25 = "default" in s19 ? new s19.default({ layer: r24, view: t22 }) : new s19({ layer: r24, view: t22 });
      }
      const n30 = () => {
        l20 = l(l20), o25.destroyed || o25.destroy(), o25.layer = null, o25.parent = null, o25.view = null, this.done = true;
      };
      l20 = m(e22, n30), s3(e22);
      try {
        await o25.when();
      } catch (s19) {
        throw n30(), s19;
      }
      const c24 = (_b = (_a = this._map) == null ? void 0 : _a.allLayers) == null ? void 0 : _b.includes(r24);
      if (!c24)
        return n30(), void this._deferred.reject(new s2("view:no-layerview-for-layer", "The layer has been removed from the map", { layer: r24 }));
      this.layerView = o25, r24.emit("layerview-create", { view: t22, layerView: o25 }), t22.emit("layerview-create", { layer: r24, layerView: o25 }), this.done = true, this._deferred.resolve(o25);
    } catch (s19) {
      r24.emit("layerview-create-error", { view: t22, error: s19 }), t22.emit("layerview-create-error", { layer: r24, error: s19 }), this.done = true, this._deferred.reject(new s2("layerview:create-error", "layerview creation failed", { layer: r24, error: s19 }));
    }
  }
};
var L = class extends g {
  constructor(e22) {
    super(e22), this._layerLayerViewInfoMap = /* @__PURE__ */ new Map(), this._recyclingInfoMap = /* @__PURE__ */ new Map(), this._watchUpdatingTracking = new h2(), this.supportsGround = true, this._preloadLayerViewModules = () => {
      var _a;
      const e23 = (_a = this.view.map) == null ? void 0 : _a.allLayers;
      if (e23)
        for (const r24 of e23)
          this.layerViewImporter.hasLayerViewModule(r24) && this.layerViewImporter.importLayerView(r24);
    }, this._reschedule = () => this.destroyed ? Promise.reject() : (null == this._workPromise && (this._workPromise = C(), this._workPromise.promise.catch(() => {
    })), this.removeHandles("reschedule"), this.addHandles(k2(this._doWork), "reschedule"), this._workPromise.promise), this._doWork = () => {
      var _a, _b, _c;
      if (this.destroyed)
        return;
      const e23 = this.view.map;
      if (this._map !== e23 && (this.clear(), this._map = e23), null == this._workPromise)
        return void this.notifyChange("updating");
      this.removeHandles("reschedule"), this.removeHandles("collection-change");
      const r24 = /* @__PURE__ */ new Set(), i23 = [], t22 = this.view.ready, s19 = (e24) => {
        if (null != e24) {
          for (const a24 of e24)
            if (a24) {
              r24.add(a24);
              const e25 = this._layerLayerViewInfoMap.get(a24);
              e25 && t22 ? e25.start() : e25 || this._recyclingInfoMap.has(a24) || i23.push(a24), "layers" in a24 && a24.layers && s19(a24.layers);
            }
        }
      };
      for (const o25 of this._rootCollectionNames)
        s19(o2(this, o25));
      for (const [o25, l20] of this._layerLayerViewInfoMap)
        if (!r24.has(o25)) {
          this._layerLayerViewInfoMap.delete(l20.layer);
          const e24 = l20.tryRecycle(i23);
          e24 ? (this.notifyChange("updating"), this._recyclingInfoMap.set(l20.layer, l20), e24.then(() => {
            this.notifyChange("updating"), this._recyclingInfoMap.delete(l20.layer), this._layerLayerViewInfoMap.set(l20.layer, l20), this._reschedule();
          }).catch(() => {
            this.notifyChange("updating"), this._recyclingInfoMap.delete(l20.layer), l20.destroy(), this._reschedule();
          })) : l20.destroy();
        }
      for (const [o25, l20] of this._recyclingInfoMap)
        r24.has(o25) || (this.notifyChange("updating"), this._recyclingInfoMap.delete(l20.layer), l20.destroy());
      for (const o25 of i23)
        this._createLayerView(o25);
      this._refreshCollections();
      const a23 = [(_a = e23 == null ? void 0 : e23.ground) == null ? void 0 : _a.layers, (_b = e23 == null ? void 0 : e23.basemap) == null ? void 0 : _b.baseLayers, (_c = e23 == null ? void 0 : e23.basemap) == null ? void 0 : _c.referenceLayers, e23 == null ? void 0 : e23.layers].filter((e24) => !!e24);
      r24.forEach((e24) => "layers" in e24 && a23.push(e24.layers)), this.addHandles(a23.map((e24) => this._watchUpdatingTracking.addOnCollectionChange(() => e24, this._reschedule)), "collection-change"), this._workPromise.resolve(), this._workPromise = null;
    };
  }
  initialize() {
    this.addHandles([v3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.allLayers;
    }, "change", this._preloadLayerViewModules, { onListenerAdd: this._preloadLayerViewModules }), d3(() => {
      const e22 = this.view, r24 = e22 == null ? void 0 : e22.map;
      return [r24 == null ? void 0 : r24.basemap, r24 == null ? void 0 : r24.ground, r24 == null ? void 0 : r24.layers, e22 == null ? void 0 : e22.ready];
    }, () => this._reschedule(), A2)]), this._preloadLayerViewModules(), this._reschedule();
  }
  destroy() {
    this.clear(), n9(this._recyclingInfoMap), n9(this._layerLayerViewInfoMap), this._watchUpdatingTracking.destroy(), this._map = null, null != this._workPromise && (this._workPromise.reject(u2()), this._workPromise = null);
  }
  get _layersToLayerViews() {
    const e22 = [["view.map.basemap.baseLayers", "view.basemapView.baseLayerViews"], ["view.map.layers", "view.layerViews"], ["view.map.basemap.referenceLayers", "view.basemapView.referenceLayerViews"]];
    return this.supportsGround && e22.push(["view.map.ground.layers", "view.groundView.layerViews"]), new Map(e22);
  }
  get _rootCollectionNames() {
    return Array.from(this._layersToLayerViews.keys());
  }
  get updating() {
    return null != this._workPromise || this._watchUpdatingTracking.updating || n2(this._layerLayerViewInfoMap, (e22) => !e22.done) || this._recyclingInfoMap.size > 0;
  }
  get updatingRemaining() {
    let e22 = 0;
    for (const r24 of this._layerLayerViewInfoMap.values())
      r24.done || ++e22;
    return e22;
  }
  clear() {
    this.destroyed || (n9(this._layerLayerViewInfoMap), this._refreshCollections());
  }
  async whenLayerView(e22) {
    if (await this._reschedule(), !this._layerLayerViewInfoMap.has(e22)) {
      if (this._recyclingInfoMap.has(e22))
        return this._recyclingInfoMap.get(e22).promise;
      throw new s2("view:no-layerview-for-layer", "No layerview has been found for the layer", { layer: e22 });
    }
    return this._layerLayerViewInfoMap.get(e22).promise;
  }
  _refreshCollections() {
    for (const [e22, r24] of this._layersToLayerViews)
      this._populateLayerViewsOwners(o2(this, e22), o2(this, r24), this.view);
    this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
  _populateLayerViewsOwners(e22, r24, i23) {
    if (!e22 || !r24)
      return void (r24 && r24.removeAll());
    let t22 = 0;
    for (const s19 of e22) {
      const e23 = this._layerLayerViewInfoMap.get(s19);
      if (!(e23 == null ? void 0 : e23.layerView))
        continue;
      const a23 = e23.layerView;
      a23.layer = s19, a23.parent = i23, r24.at(t22) !== a23 && r24.splice(t22, 0, a23), s19.layers && this._populateLayerViewsOwners(s19.layers, a23.layerViews, a23), t22 += 1;
    }
    t22 < r24.length && r24.splice(t22, r24.length);
  }
  _createLayerView(e22) {
    e22.load().catch(() => {
    }), this.layerViewImporter.hasLayerViewModule(e22) && this.layerViewImporter.importLayerView(e22);
    const r24 = new V2(e22, this.view, this.layerViewImporter);
    r24.promise.then(() => this._refreshCollections(), (r25) => {
      r25 && (b(r25) || "cancelled:layerview-create" === r25.name) || s.getLogger(this).error(`Failed to create layerview for layer title:'${e22.title ?? "no title"}', id:'${e22.id ?? "no id"}' of type '${e22.type}'.`, { layer: e22, error: r25 }), this._refreshCollections();
    }), this._layerLayerViewInfoMap.set(e22, r24), this.view.ready && r24.start(), this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
};
e([y()], L.prototype, "_workPromise", void 0), e([y({ readOnly: true })], L.prototype, "_watchUpdatingTracking", void 0), e([y({ readOnly: true })], L.prototype, "_layersToLayerViews", null), e([y({ readOnly: true })], L.prototype, "_rootCollectionNames", null), e([y()], L.prototype, "layerViewImporter", void 0), e([y()], L.prototype, "supportsGround", void 0), e([y({ readOnly: true })], L.prototype, "updating", null), e([y({ readOnly: true })], L.prototype, "updatingRemaining", null), e([y({ constructOnly: true })], L.prototype, "view", void 0), L = e([c2("esri.views.LayerViewManager")], L);
var M3 = L;
function I(e22) {
  return "createLayerView" in e22 && null != e22.createLayerView;
}

// node_modules/@arcgis/core/views/Magnifier.js
var i11 = class extends g {
  constructor(o25) {
    super(o25), this.factor = 1.5, this.offset = c4(0, 0), this.position = null, this.size = 120, this.maskUrl = null, this.maskEnabled = true, this.overlayUrl = null, this.overlayEnabled = true, this.visible = true;
  }
  get version() {
    return this.commitProperty("factor"), this.commitProperty("offset"), this.commitProperty("position"), this.commitProperty("visible"), this.commitProperty("size"), this.commitProperty("maskUrl"), this.commitProperty("maskEnabled"), this.commitProperty("overlayUrl"), this.commitProperty("overlayEnabled"), (this._get("version") || 0) + 1;
  }
};
e([y({ type: Number })], i11.prototype, "factor", void 0), e([y({ nonNullable: true })], i11.prototype, "offset", void 0), e([y()], i11.prototype, "position", void 0), e([y({ type: Number, range: { min: 0 } })], i11.prototype, "size", void 0), e([y()], i11.prototype, "maskUrl", void 0), e([y()], i11.prototype, "maskEnabled", void 0), e([y()], i11.prototype, "overlayUrl", void 0), e([y()], i11.prototype, "overlayEnabled", void 0), e([y({ readOnly: true })], i11.prototype, "version", null), e([y({ type: Boolean })], i11.prototype, "visible", void 0), i11 = e([c2("esri.views.Magnifier")], i11);
var p4 = i11;

// node_modules/@arcgis/core/views/Theme.js
var p5 = class extends i7(g) {
  constructor(o25) {
    super(o25), this.accentColor = new u3([255, 127, 0]), this.textColor = new u3([255, 255, 255]);
  }
};
e([y({ type: u3, nonNullable: true })], p5.prototype, "accentColor", void 0), e([y({ type: u3, nonNullable: true })], p5.prototype, "textColor", void 0), p5 = e([c2("esri.views.Theme")], p5);
var l7 = p5;

// node_modules/@arcgis/core/views/input/IViewEvents.js
var t10;
!function(t22) {
  t22[t22.Left = 0] = "Left", t22[t22.Middle = 1] = "Middle", t22[t22.Right = 2] = "Right";
}(t10 || (t10 = {}));

// node_modules/@arcgis/core/views/input/ViewEvents.js
var i12 = ["click", "double-click", "immediate-click", "immediate-double-click", "hold", "drag", "key-down", "key-up", "pointer-down", "pointer-move", "pointer-up", "pointer-drag", "mouse-wheel", "pointer-enter", "pointer-leave", "gamepad", "focus", "blur"];
var o10 = {};
function s9(t22) {
  return !!o10[t22];
}
function p6(t22) {
  for (const e22 of t22)
    if (!s9(e22))
      return false;
  return true;
}
i12.forEach((t22) => {
  o10[t22] = true;
});
var c10 = class {
  constructor(t22) {
    this._handlers = /* @__PURE__ */ new Map(), this._counter = 0, this._handlerCounts = /* @__PURE__ */ new Map(), this.view = t22, this.inputManager = null;
  }
  connect(t22) {
    t22 && this.disconnect(), this.inputManager = t22, this._handlers.forEach(({ handler: t23, priority: e22 }, a23) => {
      var _a;
      return (_a = this.inputManager) == null ? void 0 : _a.installHandlers(a23, [t23], e22);
    });
  }
  disconnect() {
    this.inputManager && this._handlers.forEach((t22, e22) => {
      var _a;
      return (_a = this.inputManager) == null ? void 0 : _a.uninstallHandlers(e22);
    }), this.inputManager = null;
  }
  destroy() {
    this.disconnect(), this._handlers.clear(), this.view = null;
  }
  on(e22, a23, n30, i23) {
    const o25 = Array.isArray(e22) ? e22 : e22.split(",");
    if (!p6(o25))
      return o25.some(s9) && console.error("Error: registering input events and other events on the view at the same time is not supported."), null;
    let c24, u14;
    Array.isArray(a23) ? u14 = a23 : (c24 = a23, u14 = []), "function" == typeof n30 ? c24 = n30 : i23 = n30, i23 = null != i23 ? i23 : _3.DEFAULT;
    const m15 = this._createUniqueGroupName(), d18 = new l8(this.view, o25, u14, c24);
    this._handlers.set(m15, { handler: d18, priority: i23 });
    for (const t22 of o25) {
      const e23 = this._handlerCounts.get(t22) || 0;
      this._handlerCounts.set(t22, e23 + 1);
    }
    return this.inputManager && this.inputManager.installHandlers(m15, [d18], i23), e4(() => this._removeHandler(m15, o25));
  }
  hasHandler(t22) {
    return !!this._handlerCounts.get(t22);
  }
  _removeHandler(t22, e22) {
    if (this._handlers.has(t22)) {
      this._handlers.delete(t22);
      for (const t23 of e22) {
        const e23 = this._handlerCounts.get(t23);
        void 0 === e23 ? console.error("Trying to remove handler for event that has no handlers registered: ", t23) : 1 === e23 ? this._handlerCounts.delete(t23) : this._handlerCounts.set(t23, e23 - 1);
      }
    }
    this.inputManager && this.inputManager.uninstallHandlers(t22);
  }
  _createUniqueGroupName() {
    return this._counter += 1, `viewEvents_${this._counter}`;
  }
};
var l8 = class extends i10 {
  constructor(t22, e22, a23, n30) {
    super(true), this._latestDragStart = void 0, this.view = t22;
    for (const r24 of e22)
      switch (r24) {
        case "click":
          this.registerIncoming("click", a23, (t23) => n30(this._wrapClick(t23)));
          break;
        case "double-click":
          this.registerIncoming("double-click", a23, (t23) => n30(this._wrapDoubleClick(t23)));
          break;
        case "immediate-click":
          this.registerIncoming("immediate-click", a23, (t23) => n30(this._wrapImmediateClick(t23)));
          break;
        case "immediate-double-click":
          this.registerIncoming("immediate-double-click", a23, (t23) => n30(this._wrapImmediateDoubleClick(t23)));
          break;
        case "hold":
          this.registerIncoming("hold", a23, (t23) => n30(this._wrapHold(t23)));
          break;
        case "drag":
          this.registerIncoming("drag", a23, (t23) => {
            const e23 = this._wrapDrag(t23);
            e23 && n30(e23);
          });
          break;
        case "key-down":
          this.registerIncoming("key-down", a23, (t23) => n30(this._wrapKeyDown(t23)));
          break;
        case "key-up":
          this.registerIncoming("key-up", a23, (t23) => n30(this._wrapKeyUp(t23)));
          break;
        case "pointer-down":
          this.registerIncoming("pointer-down", a23, (t23) => n30(this._wrapPointer(t23, "pointer-down")));
          break;
        case "pointer-move":
          this.registerIncoming("pointer-move", a23, (t23) => n30(this._wrapPointer(t23, "pointer-move")));
          break;
        case "pointer-up":
          this.registerIncoming("pointer-up", a23, (t23) => n30(this._wrapPointer(t23, "pointer-up")));
          break;
        case "pointer-drag":
          this.registerIncoming("pointer-drag", a23, (t23) => n30(this._wrapPointerDrag(t23)));
          break;
        case "mouse-wheel":
          this.registerIncoming("mouse-wheel", a23, (t23) => n30(this._wrapMouseWheel(t23)));
          break;
        case "pointer-enter":
          this.registerIncoming("pointer-enter", a23, (t23) => n30(this._wrapPointer(t23, "pointer-enter")));
          break;
        case "pointer-leave":
          this.registerIncoming("pointer-leave", a23, (t23) => n30(this._wrapPointer(t23, "pointer-leave")));
          break;
        case "gamepad":
          this.registerIncoming("gamepad", a23, (t23) => {
            n30(this._wrapGamepad(t23));
          });
          break;
        case "focus":
          this.registerIncoming("focus", a23, (t23) => {
            n30(this._wrapFocus(t23));
          });
          break;
        case "blur":
          this.registerIncoming("blur", a23, (t23) => {
            n30(this._wrapBlur(t23));
          });
      }
  }
  _wrapFocus(t22) {
    return { type: "focus", timestamp: t22.timestamp, native: t22.data.native, cancelable: t22.cancelable, stopPropagation: () => t22.stopPropagation(), async: (e22) => t22.async(e22), preventDefault: () => t22.preventDefault() };
  }
  _wrapBlur(t22) {
    return { type: "blur", timestamp: t22.timestamp, native: t22.data.native, cancelable: t22.cancelable, stopPropagation: () => t22.stopPropagation(), async: (e22) => t22.async(e22), preventDefault: () => t22.preventDefault() };
  }
  _wrapClick(t22) {
    const { pointerType: e22, button: n30, buttons: r24, x: i23, y: o25, native: s19, eventId: p22 } = t22.data, { cancelable: c24, timestamp: l20 } = t22;
    return { type: "click", pointerType: e22, button: n30, buttons: r24, x: i23, y: o25, native: s19, timestamp: l20, screenPoint: c4(i23, o25), mapPoint: this._getMapPoint(i23, o25), eventId: p22, cancelable: c24, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapDoubleClick(t22) {
    const { pointerType: e22, button: a23, buttons: n30, x: r24, y: i23, native: o25, eventId: s19 } = t22.data, { cancelable: p22, timestamp: c24 } = t22;
    return { type: "double-click", pointerType: e22, button: a23, buttons: n30, x: r24, y: i23, native: o25, timestamp: c24, mapPoint: this._getMapPoint(r24, i23), eventId: s19, cancelable: p22, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapImmediateClick(t22) {
    const { pointerType: e22, button: a23, buttons: n30, x: r24, y: i23, native: o25, eventId: s19 } = t22.data, p22 = o25.pointerId, { cancelable: c24, timestamp: l20 } = t22;
    return { type: "immediate-click", pointerId: p22, pointerType: e22, button: a23, buttons: n30, x: r24, y: i23, native: o25, timestamp: l20, mapPoint: this._getMapPoint(r24, i23), eventId: s19, cancelable: c24, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapImmediateDoubleClick(t22) {
    const { pointerType: e22, button: a23, buttons: n30, x: r24, y: i23, native: o25, eventId: s19 } = t22.data, p22 = o25.pointerId, { cancelable: c24, timestamp: l20 } = t22;
    return { type: "immediate-double-click", pointerId: p22, pointerType: e22, button: a23, buttons: n30, x: r24, y: i23, native: o25, timestamp: l20, mapPoint: this._getMapPoint(r24, i23), eventId: s19, cancelable: c24, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapHold(t22) {
    const { pointerType: e22, button: a23, buttons: n30, x: r24, y: i23, native: o25 } = t22.data, { cancelable: s19, timestamp: p22 } = t22;
    return { type: "hold", pointerType: e22, button: a23, buttons: n30, x: r24, y: i23, native: o25, timestamp: p22, mapPoint: this._getMapPoint(r24, i23), cancelable: s19, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _getMapPoint(t22, e22) {
    return this.view.toMap(c4(t22, e22), { exclude: [] });
  }
  _wrapDrag(t22) {
    const a23 = t22.data, { x: n30, y: r24 } = a23.center, { action: i23, pointerType: o25, button: s19 } = a23;
    if ("start" === i23 && (this._latestDragStart = a23), !this._latestDragStart)
      return;
    const p22 = a23.pointer.native, c24 = a23.buttons, { cancelable: l20, timestamp: u14 } = t22, m15 = { x: this._latestDragStart.center.x, y: this._latestDragStart.center.y };
    return "end" === i23 && (this._latestDragStart = void 0), { type: "drag", action: i23, x: n30, y: r24, origin: m15, pointerType: o25, button: s19, buttons: c24, radius: a23.radius, angle: m4(a23.angle), native: p22, timestamp: u14, cancelable: l20, stopPropagation: () => t22.stopPropagation(), async: (e22) => t22.async(e22), preventDefault: () => t22.preventDefault() };
  }
  _wrapKeyDown(t22) {
    const { key: e22, repeat: a23, native: n30 } = t22.data, { cancelable: r24, timestamp: i23 } = t22;
    return { type: "key-down", key: e22, repeat: a23, native: n30, timestamp: i23, cancelable: r24, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapKeyUp(t22) {
    const { key: e22, native: a23 } = t22.data, { cancelable: n30, timestamp: r24 } = t22;
    return { type: "key-up", key: e22, native: a23, timestamp: r24, cancelable: n30, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapPointer(t22, e22) {
    const { x: a23, y: n30, button: r24, buttons: i23, native: o25, eventId: s19 } = t22.data, p22 = o25.pointerId, c24 = o25.pointerType, { cancelable: l20, timestamp: u14 } = t22;
    return { type: e22, x: a23, y: n30, pointerId: p22, pointerType: c24, button: r24, buttons: i23, native: o25, timestamp: u14, eventId: s19, cancelable: l20, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapPointerDrag(t22) {
    const { x: e22, y: a23, buttons: n30, native: r24, eventId: i23 } = t22.data.currentEvent, { button: o25 } = t22.data.startEvent, s19 = t22.data.startEvent.native.pointerId, p22 = t22.data.startEvent.native.pointerType, c24 = t22.data.action, l20 = { x: t22.data.startEvent.x, y: t22.data.startEvent.y }, { cancelable: u14, timestamp: m15 } = t22;
    return { type: "pointer-drag", x: e22, y: a23, pointerId: s19, pointerType: p22, button: o25, buttons: n30, action: c24, origin: l20, native: r24, timestamp: m15, eventId: i23, cancelable: u14, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapMouseWheel(t22) {
    const { cancelable: e22, data: a23, timestamp: n30 } = t22, { x: r24, y: i23, deltaY: o25, native: s19 } = a23;
    return { type: "mouse-wheel", x: r24, y: i23, deltaY: o25, native: s19, timestamp: n30, cancelable: e22, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
  _wrapGamepad(t22) {
    const { action: e22, state: a23, device: n30 } = t22.data, { cancelable: r24, timestamp: i23 } = t22, { buttons: o25, axes: s19 } = a23;
    return { type: "gamepad", device: n30, timestamp: i23, action: e22, buttons: o25, axes: s19, cancelable: r24, stopPropagation: () => t22.stopPropagation(), async: (e23) => t22.async(e23), preventDefault: () => t22.preventDefault() };
  }
};

// node_modules/@arcgis/core/views/interactive/interfaces.js
var o11;
var t11;
var u4;
!function(o25) {
  o25[o25.USER = 0] = "USER", o25[o25.MANAGER = 1] = "MANAGER";
}(o11 || (o11 = {})), function(o25) {
  o25[o25.None = 0] = "None", o25[o25.Unfocused = 1] = "Unfocused", o25[o25.Focused = 2] = "Focused", o25[o25.Unselected = 4] = "Unselected", o25[o25.Selected = 8] = "Selected", o25[o25.All = 15] = "All";
}(t11 || (t11 = {})), function(o25) {
  o25[o25.None = 0] = "None", o25[o25.Custom1 = 16] = "Custom1", o25[o25.Custom2 = 32] = "Custom2", o25[o25.Custom3 = 64] = "Custom3", o25[o25.Custom4 = 128] = "Custom4", o25[o25.Custom5 = 256] = "Custom5", o25[o25.Custom6 = 512] = "Custom6", o25[o25.Custom7 = 1024] = "Custom7", o25[o25.Custom8 = 2048] = "Custom8", o25[o25.Custom9 = 4096] = "Custom9", o25[o25.Custom10 = 8192] = "Custom10", o25[o25.Custom11 = 16384] = "Custom11", o25[o25.Custom12 = 32768] = "Custom12", o25[o25.All = 65520] = "All";
}(u4 || (u4 = {}));

// node_modules/@arcgis/core/views/interactive/interactiveToolUtils.js
function o12(t22) {
  return [t22.on("before-add", (o25) => {
    const i23 = o25.item;
    if (null == i23 || t22.includes(i23))
      return s.getLogger("esri.views.interactive.interactiveToolUtils").warn("Tool is either already in the list of tools or tool is `null`. Not adding tool."), void o25.preventDefault();
    i23.onAdd();
  }), t22.on("after-remove", (e22) => {
    const t23 = e22.item;
    t23.active && (t23.view.activeTool = null), t23.destroy();
  })];
}
function i13(e22) {
  return e22.visible && null != e22.getEditableFlag && e22.getEditableFlag(o11.USER) && e22.getEditableFlag(o11.MANAGER);
}

// node_modules/@arcgis/core/views/support/screenUtils.js
function n15(t22) {
  return c4(t22.x, t22.y);
}
function i15(t22, n30) {
  var _a;
  const c24 = (_a = t22 instanceof HTMLElement ? t22 : t22.surface) == null ? void 0 : _a.getBoundingClientRect();
  return c24 ? c4(n30.clientX - c24.left, n30.clientY - c24.top) : c4(0, 0);
}
function r12(e22, t22) {
  return t22 instanceof Event ? i15(e22, t22) : n15(t22);
}
function o13(e22) {
  if (e22 instanceof Event)
    return true;
  if ("object" == typeof e22 && "type" in e22) {
    switch (e22.type) {
      case "click":
      case "double-click":
      case "pointer-down":
      case "pointer-drag":
      case "pointer-enter":
      case "pointer-leave":
      case "pointer-up":
      case "pointer-move":
      case "immediate-click":
      case "immediate-double-click":
      case "hold":
      case "drag":
      case "mouse-wheel":
        return true;
      default:
        return false;
    }
  }
  return false;
}

// node_modules/@arcgis/core/views/interactive/ToolViewManagerManipulatorState.js
var n16 = class {
  constructor() {
    this._pointerLocations = /* @__PURE__ */ new Map(), this._hoveredManipulators = /* @__PURE__ */ new Map(), this._grabbedManipulators = /* @__PURE__ */ new Map(), this._draggedManipulators = /* @__PURE__ */ new Map(), this._stopDrag = false, this._revertToNullActiveTool = false, this._cursor = null;
  }
  get cursor() {
    return this._cursor;
  }
  hasFocusedManipulators() {
    return this._grabbedManipulators.size > 0 || this._draggedManipulators.size > 0;
  }
  handleInputEvent(t22, e22) {
    const r24 = () => t22.stopPropagation();
    switch (t22.type) {
      case "pointer-move":
        s10(t22.pointerType) && this._pointerLocations.set(t22.pointerId, { x: t22.x, y: t22.y, pointerType: t22.pointerType });
        break;
      case "drag":
        this._grabbedManipulators.size > 0 && (this._stopDrag = true), this._stopDrag && (r24(), "end" === t22.action && (this._stopDrag = false));
        break;
      case "pointer-down": {
        if (!l9(t22))
          break;
        const o25 = n15(t22), i23 = this._intersect(o25, t22.pointerType, e22.forEachTool);
        if (null == i23)
          break;
        const n30 = i23.manipulator, s19 = i23.tool;
        null == n30 || null == s19 || !n30.interactive || n30.grabbable && n30.grabbableForEvent(t22) || !n30.grabbing || n30.dragging || this._ungrabManipulatorBeforeDragging(n30, t22, e22), null != n30 && null != s19 && n30.interactive && n30.grabbable && n30.grabbableForEvent(t22) && !n30.grabbing && (this._grabbedManipulators.set(t22.pointerId, { manipulator: n30, tool: s19, start: o25, pointerType: t22.pointerType }), 1 === this._grabbedManipulators.size && null == e22.activeTool && (this._revertToNullActiveTool = true, e22.setActiveTool(i23.tool)), n30.grabbing = true, n30.events.emit("grab-changed", { action: "start", pointerType: t22.pointerType, screenPoint: o25 }), r24());
        break;
      }
      case "pointer-up":
        this._draggedManipulators.has(t22.pointerId) || this._handlePointerEnd(t22, e22);
        break;
      case "pointer-drag": {
        if (!l9(t22))
          break;
        const i23 = this._grabbedManipulators.get(t22.pointerId), n30 = i23 == null ? void 0 : i23.manipulator, s19 = i23 == null ? void 0 : i23.tool;
        if (null == n30 || null == s19)
          break;
        const p22 = n15(t22);
        p22.x = i4(p22.x, 0, e22.view.width), p22.y = i4(p22.y, 0, e22.view.height);
        const u14 = i23.start, c24 = this._draggedManipulators.get(t22.pointerId);
        switch (t22.action) {
          case "start":
          case "update":
            "update" !== t22.action && 1 !== this._grabbedManipulators.size || (n30.dragging = true, c24 ? n30.events.emit("drag", { action: "update", start: u14, screenPoint: p22 }) : n30.events.emit("drag", { action: "start", start: u14, screenPoint: p22, pointerType: t22.pointerType }), this._draggedManipulators.set(t22.pointerId, { tool: s19, manipulator: n30, start: u14 }));
            break;
          case "end":
            n30.dragging = false, c24 && n30.events.emit("drag", { action: "end", start: u14, screenPoint: p22 }), this._draggedManipulators.delete(t22.pointerId), this._handlePointerEnd(t22, e22);
        }
        r24();
        break;
      }
      case "immediate-click": {
        const o25 = n15(t22), i23 = this._intersect(o25, t22.pointerType, e22.forEachTool);
        if (p7(t22) || e22.forEachTool((t23) => {
          if ((null == i23 || i23.tool !== t23 || t23.automaticManipulatorSelection) && t23.manipulators) {
            let e23 = false;
            t23.manipulators.forEach(({ manipulator: t24 }) => {
              t24.selected && (t24.selected = false, e23 = true);
            }), e23 && t23.onManipulatorSelectionChanged && t23.onManipulatorSelectionChanged();
          }
        }), null == i23)
          break;
        const { manipulator: n30, tool: s19 } = i23;
        if (!n30.interactive)
          break;
        n30.selectable && s19.automaticManipulatorSelection && (n30.selected = !n30.selected, s19.onManipulatorSelectionChanged && s19.onManipulatorSelectionChanged());
        const l20 = t22.native.shiftKey;
        n30.events.emit("immediate-click", { screenPoint: o25, button: t22.button, pointerType: t22.pointerType, shiftKey: l20, stopPropagation: r24 }), u5(n30, r24);
        break;
      }
      case "click": {
        const o25 = n15(t22), i23 = this._intersect(o25, t22.pointerType, e22.forEachTool), n30 = i23 == null ? void 0 : i23.manipulator;
        if (null == n30 || !n30.interactive)
          break;
        const s19 = t22.native.shiftKey;
        n30.events.emit(t22.type, { screenPoint: o25, button: t22.button, pointerType: t22.pointerType, shiftKey: s19 }), r24();
        break;
      }
      case "double-click": {
        const o25 = n15(t22), i23 = this._intersect(o25, t22.pointerType, e22.forEachTool), n30 = null != i23 ? i23.manipulator : null;
        if (null == n30 || !n30.interactive)
          break;
        const s19 = t22.native.shiftKey;
        n30.events.emit("double-click", { screenPoint: o25, button: t22.button, pointerType: t22.pointerType, shiftKey: s19, stopPropagation: r24 }), u5(n30, r24);
        break;
      }
      case "immediate-double-click": {
        const o25 = n15(t22), i23 = this._intersect(o25, t22.pointerType, e22.forEachTool), n30 = null != i23 ? i23.manipulator : null;
        if (null == n30 || !n30.interactive)
          break;
        const s19 = t22.native.shiftKey;
        n30.events.emit("immediate-double-click", { screenPoint: o25, button: t22.button, pointerType: t22.pointerType, shiftKey: s19, stopPropagation: r24 }), u5(n30, r24);
        break;
      }
    }
    this._onFocusChange(e22.forEachTool);
  }
  _ungrabManipulatorBeforeDragging(t22, e22, o25) {
    t22.grabbing = false, t22.events.emit("grab-changed", { action: "end", pointerType: e22.pointerType, screenPoint: n15(e22) }), this._grabbedManipulators.forEach(({ manipulator: e23 }, o26) => {
      e23 === t22 && this._grabbedManipulators.delete(o26);
    }), this._afterManipulatorUngrab(o25.setActiveTool);
  }
  _handlePointerEnd(t22, e22) {
    var _a;
    const o25 = (_a = this._grabbedManipulators.get(t22.pointerId)) == null ? void 0 : _a.manipulator;
    null != o25 && o25.grabbing && (o25.grabbing = false, o25.events.emit("grab-changed", { action: "end", pointerType: t22.pointerType, screenPoint: n15(t22) }), this._grabbedManipulators.delete(t22.pointerId), this._afterManipulatorUngrab(e22.setActiveTool));
  }
  _cursorFromMap(t22) {
    let o25 = null;
    return n2(t22, ({ manipulator: t23 }) => !(null == t23 || !t23.interactive) && (t23.grabbing && t23.grabCursor ? (o25 = t23.grabCursor, true) : !!t23.cursor && (o25 = t23.cursor, true))), o25;
  }
  _onFocusChange(t22) {
    this._updateCursor(), this._updateFocusedManipulatorTools(t22);
  }
  _updateCursor() {
    this._grabbedManipulators.size > 0 ? this._cursor = this._cursorFromMap(this._grabbedManipulators) || "grabbing" : this._hoveredManipulators.size > 0 ? this._cursor = this._cursorFromMap(this._hoveredManipulators) || "pointer" : this._cursor = null;
  }
  _updateFocusedManipulatorTools(e22) {
    const o25 = /* @__PURE__ */ new Set(), r24 = /* @__PURE__ */ new Set();
    this._grabbedManipulators.forEach(({ tool: t22 }) => {
      o25.add(t22);
    }), this._hoveredManipulators.forEach(({ tool: t22 }) => {
      r24.add(t22);
    }), e22((e23) => {
      e23.hasGrabbedManipulators = o25.has(e23), e23.hasHoveredManipulators = r24.has(e23);
      const i23 = this._grabbedManipulators.values(), a23 = o(i23, ({ tool: t22 }) => t22 === e23);
      e23.firstGrabbedManipulator = null != a23 ? a23.manipulator : null;
    });
  }
  clearPointers(t22, { forEachTool: e22, setActiveTool: o25 }, r24 = true, i23) {
    const a23 = (e23, o26) => e23 === t22 && (null == i23 || i23 === o26);
    this._grabbedManipulators.forEach(({ tool: t23, manipulator: e23, pointerType: o26 }, r25) => {
      a23(t23, e23) && (this._grabbedManipulators.delete(r25), e23.grabbing = false, e23.events.emit("grab-changed", { action: "end", screenPoint: null, pointerType: o26 }));
    }), this._draggedManipulators.forEach(({ tool: t23, manipulator: e23 }, o26) => {
      a23(t23, e23) && (this._draggedManipulators.delete(o26), e23.dragging = false, e23.events.emit("drag", { action: "cancel" }));
    }), r24 && this._hoveredManipulators.forEach(({ tool: t23, manipulator: e23 }, o26) => {
      a23(t23, e23) && (this._hoveredManipulators.delete(o26), e23.hovering = false);
    }), this._afterManipulatorUngrab(o25), this._onFocusChange(e22);
  }
  _intersect(t22, e22, o25) {
    let r24 = null;
    return o25((o26) => {
      if (null == o26.manipulators || !i13(o26))
        return false;
      const a23 = o26.manipulators.intersect(t22, e22);
      return null != a23 && (r24 = { tool: o26, manipulator: a23 }, true);
    }), r24;
  }
  updateHoveredStateFromKnownPointers(t22) {
    this._pointerLocations.forEach((e22, o25) => {
      this._updateHoveredStateForPointerAtScreenPosition(c4(e22.x, e22.y), o25, e22.pointerType, t22);
    });
  }
  handleHoverEvent(t22, e22) {
    "pointer-up" !== t22.type && "immediate-click" !== t22.type && "pointer-move" !== t22.type || !s10(t22.pointerType) || this._updateHoveredStateForPointerAtScreenPosition(n15(t22), t22.pointerId, t22.pointerType, e22);
  }
  _updateHoveredStateForPointerAtScreenPosition(t22, e22, o25, r24) {
    var _a;
    let i23 = this._intersect(t22, o25, r24);
    const a23 = (_a = this._hoveredManipulators.get(e22)) == null ? void 0 : _a.manipulator;
    null == i23 || i23.manipulator.interactive || (i23 = null), null != i23 && a23 === i23.manipulator || (null != a23 && (a23.hovering = false), null != i23 ? (i23.manipulator.hovering = true, this._hoveredManipulators.set(e22, i23)) : this._hoveredManipulators.delete(e22), this._onFocusChange(r24));
  }
  _afterManipulatorUngrab(t22) {
    0 === this._grabbedManipulators.size && this._revertToNullActiveTool && (t22(null), this._revertToNullActiveTool = false);
  }
};
function s10(t22) {
  return "mouse" === t22;
}
function l9(t22) {
  return "mouse" !== t22.pointerType || 0 === t22.button;
}
function p7(t22) {
  return !!t22.native.shiftKey;
}
function u5(t22, e22) {
  (t22 == null ? void 0 : t22.consumesClicks) && e22();
}

// node_modules/@arcgis/core/views/ToolViewManager.js
var _6 = "attached";
var g6 = "tools";
var T2 = 1e3;
var f7 = class extends g {
  constructor(t22) {
    super(t22), this._updatingHandles = new h2(), this._clock = o3, this._manipulatorState = new n16(), this.tools = new V(), this.cursor = null, this._interacting = false, this._interactingTimeout = T2, this._interactingTimeoutHandle = null, this._forEachTool = (t23) => {
      for (const e22 of this.tools.items)
        if (t23(e22))
          return;
    };
  }
  initialize() {
    this.addHandles([this.view.on(i12, (t22) => {
      this._handleInputEvent(t22);
    }, _3.TOOL), ...o12(this.tools), this.tools.on("before-add", ({ item: t22 }) => {
      this._updateToolEditableFlag(t22);
    }), this.tools.on("before-remove", ({ item: t22 }) => {
      this._manipulatorState.clearPointers(t22, this._manipulatorStateEventArgs), this._updateCursor();
    }), this.tools.on("change", () => {
      this._refreshToolWatchers();
    })]);
  }
  destroy() {
    this.activeTool = null, this.tools.drain((t22) => t22.destroy()), this._clearInteractingTimeout(), this._interacting = false, this._updatingHandles.destroy();
  }
  get _manipulatorStateEventArgs() {
    return { forEachTool: this._forEachTool, activeTool: this.activeTool, setActiveTool: (t22) => {
      this.activeTool = t22;
    }, view: this.view };
  }
  set activeTool(t22) {
    if (null != t22 && !this.view.ready)
      return void s.getLogger(this).error("Cannot set active tool while view is not ready.");
    if (t22 === this.activeTool)
      return;
    const e22 = this.activeTool;
    this._set("activeTool", t22), null != e22 && e22.deactivate(), null != t22 && t22.activate(), this._removeIncompleteTools(t22);
    for (const o25 of this.tools) {
      this._updateToolEditableFlag(o25);
      const t23 = i13(o25);
      null != this.activeTool && t23 || this._manipulatorState.clearPointers(o25, this._manipulatorStateEventArgs, !t23);
    }
    this._updateCursor();
  }
  get updating() {
    return this._updatingHandles.updating || this.tools.some((t22) => t22.updating);
  }
  get interacting() {
    return this._interacting;
  }
  _clearInteractingTimeout() {
    this._interactingTimeoutHandle = l(this._interactingTimeoutHandle);
  }
  _startInteractingTimeout() {
    this._clearInteractingTimeout(), this._interactingTimeoutHandle = this._clock.setTimeout(() => this._interacting = false, this._interactingTimeout);
  }
  attach() {
    var _a;
    "3d" === this.view.type ? this.addHandles([d3(() => {
      const { state: t22 } = this.view;
      return "camera" in t22 && t22.camera;
    }, () => this._forEachManipulator((t22) => t22.onViewChange())), (_a = this.view.elevationProvider) == null ? void 0 : _a.on("elevation-change", (t22) => this._forEachManipulator((e22) => e22.onElevationChange(t22)))], _6) : this.addHandles(d3(() => this.view.extent, () => this._forEachManipulator((t22) => t22.onViewChange())));
  }
  detach() {
    this.activeTool = null, this.tools.removeAll(), this.removeHandles(_6), this._clearInteractingTimeout(), this._interacting = false;
  }
  _forEachManipulator(t22) {
    this._forEachTool((e22) => {
      e22.manipulators && e22.manipulators.forEach(({ manipulator: o25 }) => t22(o25, e22));
    });
  }
  _handleInputEvent(t22) {
    let e22 = false;
    const o25 = { ...t22, stopPropagation: () => {
      e22 = true, t22.stopPropagation();
    } };
    null != this.activeTool ? this.activeTool.handleInputEvent && this.activeTool.handleInputEvent(o25) : this._forEachTool((t23) => {
      !e22 && t23.visible && t23.handleInputEvent(o25);
    }), !e22 && "key-down" === t22.type && "Escape" === t22.key && this.activeTool && (t22.stopPropagation(), this.activeTool = null), this._manipulatorState.handleInputEvent(o25, this._manipulatorStateEventArgs), e22 || null == this.activeTool || this.activeTool.handleInputEventAfter(o25), this._manipulatorState.handleHoverEvent(o25, this._forEachTool), this._updateCursor(), "pointer-move" === t22.type && (this._manipulatorState.hasFocusedManipulators() || this.activeTool) && (this._interacting = true, this._startInteractingTimeout());
  }
  _refreshToolWatchers() {
    this.removeHandles(g6), this._forEachTool((t22) => {
      if (t22 instanceof g) {
        const e22 = d3(() => [t22.cursor, t22.visible, t22.editable], () => {
          i13(t22) || this._manipulatorState.clearPointers(t22, this._manipulatorStateEventArgs), this._updateCursor();
        });
        this.addHandles(e22, g6);
      }
      t22.manipulators && this.addHandles([t22.manipulators.on("after-remove", (e22) => {
        this._manipulatorState.clearPointers(t22, this._manipulatorStateEventArgs, true, e22.item.manipulator);
      }), t22.manipulators.on("change", () => {
        this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
      })], g6);
    }), this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
  }
  _updateToolEditableFlag(t22) {
    var _a;
    (_a = t22.setEditableFlag) == null ? void 0 : _a.call(t22, o11.MANAGER, null == this.activeTool || t22 === this.activeTool);
  }
  _updateCursor() {
    let t22 = this._manipulatorState.cursor;
    null == t22 && this._forEachTool((e22) => !(null == e22.cursor || !e22.visible) && (t22 = e22.cursor, true)), this._get("cursor") !== t22 && this._set("cursor", t22);
  }
  _removeIncompleteTools(t22) {
    this.tools.filter((e22) => (null == t22 || e22 !== t22) && !e22.created && e22.removeIncompleteOnCancel).forEach((t23) => {
      this.tools.remove(t23);
    });
  }
  get test() {
    const t22 = this;
    return { setClock: (t23) => this._clock = t23, set interactingTimeoutEnabled(e22) {
      t22._interactingTimeout = e22 ? T2 : 0;
    }, get interactingTimeoutEnabled() {
      return 0 !== t22._interactingTimeout;
    } };
  }
};
e([y({ constructOnly: true, nonNullable: true })], f7.prototype, "view", void 0), e([y({ value: null })], f7.prototype, "activeTool", null), e([y({ readOnly: true, type: V })], f7.prototype, "tools", void 0), e([y({ readOnly: true })], f7.prototype, "cursor", void 0), e([y({ readOnly: true })], f7.prototype, "updating", null), e([y()], f7.prototype, "_interacting", void 0), e([y({ readOnly: true })], f7.prototype, "interacting", null), f7 = e([c2("esri.views.ToolViewManager")], f7);

// node_modules/@arcgis/core/views/input/gamepad/GamepadInputDevice.js
var n17 = class extends g {
  constructor(e22) {
    super(), this.nativeIndex = null, this._detectedDeviceType = "unknown", "standard" === e22.mapping ? this._detectedDeviceType = "standard" : o14.test(e22.id) ? this._detectedDeviceType = "spacemouse" : this._detectedDeviceType = "unknown", this.nativeIndex = e22.index;
  }
  get native() {
    const e22 = navigator.getGamepads ? navigator.getGamepads() : [];
    return null != this.nativeIndex && this.nativeIndex < e22.length ? e22[this.nativeIndex] : null;
  }
  get deviceType() {
    return this._detectedDeviceType;
  }
  get axisThreshold() {
    return i16[this.deviceType];
  }
};
e([y({ nonNullable: true, readOnly: true })], n17.prototype, "nativeIndex", void 0), e([y({ type: String, readOnly: true })], n17.prototype, "deviceType", null), e([y({ type: Number, readOnly: true })], n17.prototype, "axisThreshold", null), n17 = e([c2("esri.views.input.gamepad.GamepadInputDevice")], n17);
var o14 = new RegExp("^(3dconnexion|space(mouse|navigator|pilot|explorer))", "i");
var i16 = { standard: 0.15, spacemouse: 0.025, unknown: 0 };
var a4 = n17;

// node_modules/@arcgis/core/views/input/gamepad/GamepadSettings.js
var c11 = class extends g {
  constructor(...e22) {
    super(...e22), this.devices = new V(), this.enabledFocusMode = "document";
  }
};
e([y({ type: V.ofType(a4), readOnly: true })], c11.prototype, "devices", void 0), e([y({ type: ["document", "view", "none"] })], c11.prototype, "enabledFocusMode", void 0), c11 = e([c2("esri.views.input.gamepad.GamepadSettings")], c11);
var i17 = c11;

// node_modules/@arcgis/core/views/input/Input.js
var p8 = class extends g {
  constructor() {
    super(...arguments), this.gamepad = new i17();
  }
};
e([y({ readOnly: true })], p8.prototype, "gamepad", void 0), p8 = e([c2("esri.views.input.Input")], p8);
var a5 = p8;

// node_modules/@arcgis/core/views/navigation/gamepad/GamepadSettings.js
var s11 = class extends g {
  constructor(o25) {
    super(o25), this.enabled = true, this.device = null, this.mode = "pan", this.tiltDirection = "forward-down", this.velocityFactor = 1;
  }
};
e([y({ type: Boolean, nonNullable: true })], s11.prototype, "enabled", void 0), e([y({ type: a4 })], s11.prototype, "device", void 0), e([y({ type: ["pan", "zoom"], nonNullable: true })], s11.prototype, "mode", void 0), e([y({ type: ["forward-down", "forward-up"], nonNullable: true })], s11.prototype, "tiltDirection", void 0), e([y({ type: Number, nonNullable: true })], s11.prototype, "velocityFactor", void 0), s11 = e([c2("esri.views.navigation.gamepad.GamepadSettings")], s11);
var a6 = s11;

// node_modules/@arcgis/core/views/navigation/Navigation.js
var a7 = class extends g {
  constructor(o25) {
    super(o25), this.browserTouchPanEnabled = true, this.gamepad = new a6(), this.momentumEnabled = true, this.mouseWheelZoomEnabled = true;
  }
};
e([y({ type: Boolean })], a7.prototype, "browserTouchPanEnabled", void 0), e([y({ type: a6, nonNullable: true })], a7.prototype, "gamepad", void 0), e([y({ type: Boolean })], a7.prototype, "momentumEnabled", void 0), e([y({ type: Boolean })], a7.prototype, "mouseWheelZoomEnabled", void 0), a7 = e([c2("esri.views.navigation.Navigation")], a7);
var p9 = a7;

// node_modules/@arcgis/core/geometry/support/heightModelInfoUtils.js
var a8;
function l10(e22) {
  var _a;
  const i23 = e22.url ? p2(e22.url) : void 0, r24 = (_a = e22.spatialReference) == null ? void 0 : _a.vcsWkid;
  return !(null == r24 && null != i23 && "ImageServer" === i23.serverType) && h5(e22) && e22.heightModelInfo ? e22.heightModelInfo : d9(e22) ? v5.deriveUnitFromSR(p10, e22.spatialReference) : null;
}
function h5(e22) {
  return "heightModelInfo" in e22;
}
function u6(e22) {
  if ("unknown" === e22.type || !("capabilities" in e22))
    return false;
  switch (e22.type) {
    case "csv":
    case "feature":
    case "geojson":
    case "subtype-group":
    case "ogc-feature":
    case "oriented-imagery":
    case "wfs":
    case "knowledge-graph-sublayer":
      return true;
    default:
      return false;
  }
}
function d9(e22) {
  return u6(e22) ? !!(e22.capabilities && e22.capabilities.data && e22.capabilities.data.supportsZ) : f8(e22);
}
function g7(e22) {
  return null != e22.layers || f8(e22) || u6(e22) || h5(e22);
}
function f8(e22) {
  switch (e22.type) {
    case "building-scene":
    case "elevation":
    case "integrated-mesh":
    case "point-cloud":
    case "scene":
    case "voxel":
      return true;
    case "base-dynamic":
    case "base-elevation":
    case "base-tile":
    case "bing-maps":
    case "csv":
    case "dimension":
    case "geojson":
    case "feature":
    case "subtype-group":
    case "geo-rss":
    case "graphics":
    case "group":
    case "imagery":
    case "imagery-tile":
    case "kml":
    case "knowledge-graph":
    case "link-chart":
    case "knowledge-graph-sublayer":
    case "line-of-sight":
    case "map-image":
    case "map-notes":
    case "media":
    case "ogc-feature":
    case "open-street-map":
    case "oriented-imagery":
    case "route":
    case "stream":
    case "tile":
    case "unknown":
    case "unsupported":
    case "vector-tile":
    case "video":
    case "wcs":
    case "web-tile":
    case "wfs":
    case "wms":
    case "wmts":
    case null:
      return false;
  }
  return false;
}
!function(e22) {
  e22[e22.Ok = 0] = "Ok", e22[e22.Units = 1] = "Units", e22[e22.HeightModel = 2] = "HeightModel", e22[e22.CRS = 3] = "CRS", e22[e22.Unsupported = 4] = "Unsupported";
}(a8 || (a8 = {}));
var p10 = new v5({ heightModel: "gravity-related-height" });

// node_modules/@arcgis/core/views/support/projectionUtils.js
var n18;
var s12 = null;
async function c12(r24) {
  s12 || (s12 = import("./geometryServiceUtils-VYVVCT63.js").then((e22) => n18 = e22)), await s12, s3(r24);
}
async function p11(e22, s19, a23, m15) {
  if (!e22)
    return null;
  const l20 = e22.spatialReference;
  return E2() || D(l20, s19) ? b2(e22, s19) : n18 ? n18.projectGeometry(e22, s19, a23, m15) : (await Promise.race([c12(m15), _2(m15)]), p11(e22, s19, a23, m15));
}

// node_modules/@arcgis/core/views/support/DefaultsFromMap.js
var d10 = class extends g {
  constructor(e22) {
    super(e22), this.required = { tileInfo: false, heightModelInfo: false, extent: false }, this.defaultSpatialReference = null, this.userSpatialReference = null, this.sourcePreloadCount = 10, this.priorityCollection = null, this.requiresExtentInSpatialReference = true, this.suspended = false, this._projectExtentTask = { task: null, input: null, output: null, spatialReference: null };
  }
  destroy() {
    this._projectExtentTask.task && (this._projectExtentTask.task = e3(this._projectExtentTask.task)), this._set("map", null);
  }
  get ready() {
    return !this._spatialReferenceTask.updating && !this._tileInfoTask.updating && !this._extentTask.updating;
  }
  get heightModelInfoReady() {
    return !this._heightModelInfoTask.updating;
  }
  get spatialReference() {
    return null != this.userSpatialReference ? this.userSpatialReference : this._spatialReferenceTask.spatialReference;
  }
  get extent() {
    return this._extentTask.extent;
  }
  get heightModelInfo() {
    return this._heightModelInfoTask.heightModelInfo;
  }
  get vcsWkid() {
    return this._heightModelInfoTask.vcsWkid;
  }
  get latestVcsWkid() {
    return this._heightModelInfoTask.latestVcsWkid;
  }
  get viewingMode() {
    return null == this.userSpatialReference || this.userSpatialReference.equals(this._spatialReferenceTask.spatialReference) ? this._spatialReferenceTask.viewingMode : null;
  }
  get tileInfo() {
    return this._tileInfoTask.tileInfo;
  }
  get mapCollections() {
    var _a, _b, _c, _d;
    const e22 = (_a = this.map) == null ? void 0 : _a.call(this), t22 = [];
    return null != this.priorityCollection && t22.push(this.priorityCollection), t22.push({ parent: e22 == null ? void 0 : e22.basemap, layers: (_b = e22 == null ? void 0 : e22.basemap) == null ? void 0 : _b.baseLayers }, { layers: e22 == null ? void 0 : e22.layers }, { parent: e22 == null ? void 0 : e22.ground, layers: (_c = e22 == null ? void 0 : e22.ground) == null ? void 0 : _c.layers }, { parent: e22 == null ? void 0 : e22.basemap, layers: (_d = e22 == null ? void 0 : e22.basemap) == null ? void 0 : _d.referenceLayers }), t22;
  }
  get _allLayers() {
    return this._collectLayers(this.mapCollections);
  }
  get _spatialReferenceTask() {
    if (this.suspended)
      return this._get("_spatialReferenceTask") ?? { updating: false };
    const { layers: e22, updating: t22 } = this._allLayers;
    let n30 = null;
    for (const s19 of e22) {
      const e23 = this._getSupportedSpatialReferences(s19);
      if (e23.length > 0) {
        const t23 = this._narrowDownSpatialReferenceCandidates(n30, e23);
        null != t23 && (n30 = t23);
      }
      if (null != n30 && 1 === n30.length)
        break;
    }
    if (t22 && (null == n30 || 1 !== n30.length))
      return { updating: true };
    const a23 = this._pickSpatialReferenceCandidate(n30);
    return { spatialReference: null != a23 ? a23.spatialReference : null, viewingMode: null != a23 ? a23.viewingMode : null, updating: false };
  }
  get _tileInfoTask() {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!this.required.tileInfo)
      return this._get("_tileInfoTask") ?? { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const { layers: e22, updating: t22 } = this._collectLayers([{ parent: (_b = (_a = this.map) == null ? void 0 : _a.call(this)) == null ? void 0 : _b.basemap, layers: (_e = (_d = (_c = this.map) == null ? void 0 : _c.call(this)) == null ? void 0 : _d.basemap) == null ? void 0 : _e.baseLayers }, { layers: (_g = (_f = this.map) == null ? void 0 : _f.call(this)) == null ? void 0 : _g.layers }]);
    if (e22 && e22.length > 0 && "tileInfo" in e22[0]) {
      const t23 = e22[0].tileInfo;
      return { tileInfo: t23 && t23.spatialReference.equals(this.spatialReference) ? t23 : null, updating: false };
    }
    return { updating: t22 };
  }
  get _heightModelInfoTask() {
    var _a, _b, _c;
    if (!this.required.heightModelInfo || this.suspended && ((_a = this._get("_heightModelInfoTask")) == null ? void 0 : _a.heightModelInfo))
      return this._get("_heightModelInfoTask") ?? { updating: false };
    const { layers: e22, updating: t22 } = this._allLayers;
    for (const n30 of e22)
      if (g7(n30)) {
        const e23 = l10(n30);
        if (e23)
          return { heightModelInfo: e23, vcsWkid: (_b = n30.spatialReference) == null ? void 0 : _b.vcsWkid, latestVcsWkid: (_c = n30.spatialReference) == null ? void 0 : _c.latestVcsWkid, updating: false };
      }
    return { updating: t22 };
  }
  get _extentCandidatesTask() {
    if (this.suspended || !this.required.extent)
      return this._get("_extentCandidatesTask") ?? { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const e22 = this._allLayers, t22 = e22.updating, n30 = [];
    for (const a23 of e22.layers) {
      const e23 = "fullExtents" in a23 && a23.fullExtents || (null != a23.fullExtent ? [a23.fullExtent] : []), t23 = this.requiresExtentInSpatialReference ? null : e23[0], s19 = e23.find((e24) => e24.spatialReference.equals(this.spatialReference)) ?? t23;
      if (s19)
        return { candidates: [{ extent: s19, layer: a23 }], updating: false };
      if (this._getSupportedSpatialReferences(a23).length > 0)
        for (const i23 of e23)
          n30.push({ extent: i23, layer: a23 });
    }
    return { candidates: n30, updating: t22 };
  }
  get _extentTask() {
    const { candidates: e22, updating: t22 } = this._extentCandidatesTask;
    if (t22)
      return { updating: t22 };
    if (null == e22 || 0 === e22.length)
      return { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const i23 = this._pickExtentCandidate(e22), r24 = this.spatialReference;
    return i23.extent.equals(this._projectExtentTask.input) && r24.equals(this._projectExtentTask.spatialReference) ? { extent: this._projectExtentTask.output, updating: null != this._projectExtentTask.task && !this._projectExtentTask.task.finished } : (null != this._projectExtentTask.task && (this._projectExtentTask.task = e3(this._projectExtentTask.task)), this._projectExtentTask = { input: i23.extent.clone(), output: null, spatialReference: r24.clone(), task: d2(async (e23) => {
      try {
        const t23 = await p11(i23.extent, r24, "portalItem" in i23.layer ? i23.layer.portalItem : void 0, e23);
        this._projectExtentTask = { ...this._projectExtentTask, task: null, output: t23 };
      } catch (t23) {
        if (c(e23))
          return;
        this._projectExtentTask = { ...this._projectExtentTask, task: null };
      }
    }) }, { updating: true });
  }
  _narrowDownSpatialReferenceCandidates(e22, t22) {
    if (null == e22)
      return t22;
    const n30 = [], a23 = (e23, t23) => null != e23 ? null != t23 ? e23 === t23 && e23 : e23 : t23;
    for (const s19 of e22)
      for (const e23 of t22) {
        if (!s19.spatialReference.equals(e23.spatialReference))
          continue;
        const t23 = a23(s19.viewingMode, e23.viewingMode);
        if (false !== t23) {
          n30.push({ spatialReference: s19.spatialReference, viewingMode: t23 });
          break;
        }
      }
    return n30.length > 0 ? n30 : null;
  }
  _pickSpatialReferenceCandidate(e22) {
    const t22 = this.defaultSpatialReference;
    return null == e22 || e22.length < 1 ? null != t22 ? { spatialReference: t22, viewingMode: null } : null : (null != t22 && e22.length > 1 && e22.some(({ spatialReference: e23 }) => e23.equals(t22)) && (e22 = e22.filter(({ spatialReference: e23 }) => e23.equals(t22))), e22.length > 1 && e22.some(({ viewingMode: e23 }) => e23 !== l3.Local) && (e22 = e22.filter(({ viewingMode: e23 }) => e23 !== l3.Local)), e22[0]);
  }
  _getSupportedSpatialReferences(e22) {
    const t22 = "supportedSpatialReferences" in e22 && e22.supportedSpatialReferences || (e22.spatialReference ? [e22.spatialReference] : []);
    if (0 === t22.length)
      return [];
    const n30 = [];
    for (const a23 of t22) {
      const t23 = this.getSpatialReferenceSupport({ spatialReference: a23, layer: e22 });
      if (null != t23) {
        const e23 = null != t23.constraints ? t23.constraints : [{ spatialReference: a23, viewingMode: null }];
        for (const { spatialReference: t24, viewingMode: a24 } of e23)
          this.requiresExtentInSpatialReference && null != this.userSpatialReference && !t24.equals(this.userSpatialReference) || n30.push({ spatialReference: t24, viewingMode: a24 });
      }
    }
    return n30;
  }
  _pickExtentCandidate(e22) {
    const t22 = this.spatialReference;
    return e22.find(({ extent: e23 }) => t22.equals(e23.spatialReference)) || e22[0];
  }
  _collectLayers(e22) {
    var _a;
    if ("loaded" !== this._loadMaybe((_a = this.map) == null ? void 0 : _a.call(this)))
      return { layers: [], updating: true };
    const t22 = new f9();
    for (const n30 of e22)
      if (this._collectCollection(n30, t22), t22.preloading === this.sourcePreloadCount)
        break;
    return { layers: t22.layers, updating: t22.updating };
  }
  _collectCollection(e22, t22) {
    if (e22.layers) {
      switch (this._loadMaybe(e22.parent)) {
        case "loading":
          return t22.updating = true, void ++t22.preloading;
        case "failed":
          return;
      }
      for (const n30 of e22.layers) {
        switch (this._loadMaybe(n30)) {
          case "failed":
            continue;
          case "loading":
            t22.updating = true, ++t22.preloading;
            break;
          case "loaded":
            t22.updating || t22.layers.push(n30), "layers" in n30 && this._collectCollection({ layers: n30.layers }, t22);
        }
        if (t22.preloading === this.sourcePreloadCount)
          break;
      }
    }
  }
  _loadMaybe(e22) {
    return e22 && "loadStatus" in e22 && null != e22.loadStatus ? "not-loaded" === e22.loadStatus ? (e22.load().catch((e23) => {
      b(e23) || console.log(e23);
    }), "loading") : e22.loadStatus : "loaded";
  }
};
e([y()], d10.prototype, "required", void 0), e([y({ constructOnly: true })], d10.prototype, "map", void 0), e([y({ constructOnly: true })], d10.prototype, "getSpatialReferenceSupport", void 0), e([y()], d10.prototype, "defaultSpatialReference", void 0), e([y()], d10.prototype, "userSpatialReference", void 0), e([y()], d10.prototype, "sourcePreloadCount", void 0), e([y()], d10.prototype, "priorityCollection", void 0), e([y()], d10.prototype, "requiresExtentInSpatialReference", void 0), e([y()], d10.prototype, "suspended", void 0), e([y({ readOnly: true })], d10.prototype, "ready", null), e([y({ readOnly: true })], d10.prototype, "heightModelInfoReady", null), e([y({ readOnly: true })], d10.prototype, "spatialReference", null), e([y({ readOnly: true })], d10.prototype, "extent", null), e([y({ readOnly: true })], d10.prototype, "heightModelInfo", null), e([y({ readOnly: true })], d10.prototype, "vcsWkid", null), e([y({ readOnly: true })], d10.prototype, "latestVcsWkid", null), e([y({ readOnly: true })], d10.prototype, "viewingMode", null), e([y({ readOnly: true })], d10.prototype, "tileInfo", null), e([y({ readOnly: true })], d10.prototype, "mapCollections", null), e([y({ readOnly: true })], d10.prototype, "_allLayers", null), e([y({ readOnly: true })], d10.prototype, "_spatialReferenceTask", null), e([y({ readOnly: true })], d10.prototype, "_tileInfoTask", null), e([y({ readOnly: true })], d10.prototype, "_heightModelInfoTask", null), e([y({ readOnly: true })], d10.prototype, "_extentCandidatesTask", null), e([y()], d10.prototype, "_extentTask", null), e([y()], d10.prototype, "_projectExtentTask", void 0), d10 = e([c2("esri.views.support.DefaultsFromMap")], d10);
var f9 = class {
  constructor() {
    this.layers = new Array(), this.preloading = -1, this.updating = false;
  }
};

// node_modules/@arcgis/core/views/View.js
var A3;
var z3 = A3 = class extends o4.EventedMixin(n4(g)) {
  constructor(e22) {
    super(e22), this._userSpatialReference = null, this._cursor = null, this.handles = new e2(), this.updatingHandles = new h2(), this.allLayerViews = new l2({ getCollections: () => {
      var _a, _b, _c;
      return [(_a = this.basemapView) == null ? void 0 : _a.baseLayerViews, (_b = this.groundView) == null ? void 0 : _b.layerViews, this.layerViews, (_c = this.basemapView) == null ? void 0 : _c.referenceLayerViews];
    }, getChildrenFunction: N }), this.groundView = null, this.basemapView = null, this.fatalError = null, this.graphics = new i9(), this.analyses = new t9(), this.typeSpecificPreconditionsReady = true, this.layerViews = new V(), this.magnifier = new p4(), this.padding = { left: 0, top: 0, right: 0, bottom: 0 }, this.ready = false, this.spatialReferenceWarningDelay = 1e3, this.supportsGround = true, this.timeExtent = null, this.type = null, this.scale = null, this.updating = false, this.initialExtentRequired = true, this.input = new a5(), this.navigation = new p9(), this.layerViewManager = null, this.analysisViewManager = null, this.isHeightModelInfoRequired = false, this.width = null, this.height = null, this.resizing = false, this.suspended = false, this.viewEvents = new c10(this), this.persistableViewModels = new V(), this._isValid = false, this._readyCycleForced = false, this._lockedSpatialReference = null, this._userTimeZone = null, this._lockedTimeZone = null, this.theme = null, this.handles.add(d3(() => this.preconditionsReady, (e23) => {
      var _a, _b;
      e23 ? (this._lockedSpatialReference = this.spatialReference, this._lockedTimeZone = this.timeZone, A3.views.add(this)) : (this._lockedSpatialReference = null, A3.views.remove(this)), this.notifyChange("spatialReference"), !e23 && this.ready ? ((_a = this.toolViewManager) == null ? void 0 : _a.detach(), null != this.analysisViewManager && this.analysisViewManager.detach(), (_b = this.layerViewManager) == null ? void 0 : _b.clear(), this._teardown()) : e23 && !this.ready && (this._startup(), null != this.analysisViewManager && this.analysisViewManager.attach(), this.toolViewManager.attach());
    }, C2));
  }
  initialize() {
    this.addResolvingPromise(Promise.all([this.loadAsyncDependencies(), this.validate()]).then(() => (this._isValid = true, w(() => this.ready)))), this.basemapView = new n14({ view: this }), this.layerViewManager = new M3({ view: this, layerViewImporter: { importLayerView: (e22) => this.importLayerView(e22), hasLayerViewModule: (e22) => this.hasLayerViewModule(e22) }, supportsGround: this.supportsGround }), this.toolViewManager = new f7({ view: this }), this._setupSpatialReferenceLogger(), this.addHandles([d3(() => this.initialExtentRequired, (e22) => this.defaultsFromMap.required = { ...this.defaultsFromMap.required, extent: e22 }, { sync: true, initial: true }), d3(() => this.ready, (e22) => {
      this.defaultsFromMap && (this.defaultsFromMap.suspended = e22, this.defaultsFromMap.userSpatialReference = e22 ? this.spatialReference : this._userSpatialReference);
    }, { sync: true }), d3(() => this._userSpatialReference, (e22) => {
      this.defaultsFromMap && (this.defaultsFromMap.userSpatialReference = e22);
    }, { sync: true, initial: true })]);
  }
  _setupSpatialReferenceLogger() {
    let e22 = null;
    this.addHandles([d3(() => {
      var _a;
      return (_a = this.defaultsFromMap) == null ? void 0 : _a.ready;
    }, (t22) => {
      var _a;
      const i23 = ((_a = this.map) == null ? void 0 : _a.allLayers.length) > 0;
      if (t22 && !this.spatialReference && i23) {
        if (null != e22)
          return;
        const t23 = e4(() => e22 = e3(e22));
        e22 = d2(async (t24) => {
          try {
            await A(this.spatialReferenceWarningDelay, null, t24);
          } catch {
            return;
          } finally {
            e22 = null;
          }
          s.getLogger(this).warn("#spatialReference", "no spatial reference could be derived from the currently added map layers");
        }), this.addHandles(t23, "spatial-reference-logger-task");
      } else
        this.removeHandles("spatial-reference-logger-task");
    }, { sync: true })]);
  }
  destroy() {
    var _a, _b;
    this.destroyed || (A3.views.remove(this), this.viewEvents.destroy(), this.allLayerViews.destroy(), this.navigation && (this.navigation.destroy(), this._set("navigation", null)), this.graphics = u(this.graphics), this.analyses = u(this.analyses), this.defaultsFromMap.destroy(), this._set("defaultsFromMap", null), u(this.analysisViewManager), this.toolViewManager = u(this.toolViewManager), this.layerViewManager = u(this.layerViewManager), this.basemapView = u(this.basemapView), (_a = this.groundView) == null ? void 0 : _a.destroy(), (_b = this.layerViews) == null ? void 0 : _b.forEach((e22) => e22.destroy()), this.layerViews.length = 0, this.invalidate(), this._emitter.clear(), this.handles.destroy(), this.map = u(this.map), this.updatingHandles.destroy());
  }
  _startup() {
    this._set("ready", true);
  }
  _teardown() {
    this._set("ready", false);
  }
  whenReady() {
    return Promise.resolve(this);
  }
  toMap() {
    return s.getLogger(this).error("#toMap()", "Not implemented on this instance of View"), null;
  }
  get activeTool() {
    var _a;
    return (_a = this.toolViewManager) == null ? void 0 : _a.activeTool;
  }
  set activeTool(e22) {
    this.toolViewManager && (this.toolViewManager.activeTool = e22);
  }
  get animation() {
    return this._get("animation");
  }
  set animation(e22) {
    this._set("animation", e22);
  }
  get center() {
    return null;
  }
  get _defaultsFromMapSettings() {
    return {};
  }
  get defaultsFromMap() {
    return new d10({ required: { tileInfo: false, heightModelInfo: false, extent: false }, map: () => this.map, getSpatialReferenceSupport: (e22) => this.getSpatialReferenceSupport(e22), ...this._defaultsFromMapSettings });
  }
  get extent() {
    return this._get("extent");
  }
  set extent(e22) {
    this._set("extent", e22);
  }
  get heightModelInfo() {
    return this.getDefaultHeightModelInfo();
  }
  get interacting() {
    return this.navigating;
  }
  get navigating() {
    return false;
  }
  get preconditionsReady() {
    var _a;
    return !(this.fatalError || !this._isValid || this._readyCycleForced || !this.map || m3.isLoadable(this.map) && !this.map.loaded || 0 === this.width || 0 === this.height || !this.spatialReference || !this._validateSpatialReference(this.spatialReference) || !this._lockedSpatialReference && !((_a = this.defaultsFromMap) == null ? void 0 : _a.ready) || !this.typeSpecificPreconditionsReady);
  }
  get resolution() {
    return 0;
  }
  set map(e22) {
    e22 !== this._get("map") && ((e22 == null ? void 0 : e22.destroyed) && (s.getLogger(this).warn("#map", "The provided map is already destroyed", { map: e22 }), e22 = null), m3.isLoadable(e22) && e22.load().catch(() => {
    }), this.constructed && !this.destroyed && (this.forceReadyCycle(), this._lockedSpatialReference = null), this._set("map", e22));
  }
  get spatialReference() {
    var _a, _b;
    let e22 = this._userSpatialReference || this._lockedSpatialReference || this.getDefaultSpatialReference() || null;
    return e22 && ((_b = (_a = this.defaultsFromMap) == null ? void 0 : _a.required) == null ? void 0 : _b.heightModelInfo) && (e22 = e22.clone(), e22.vcsWkid = this.defaultsFromMap.vcsWkid, e22.latestVcsWkid = this.defaultsFromMap.latestVcsWkid), e22;
  }
  set spatialReference(e22) {
    const t22 = !d4(e22, this._get("spatialReference"));
    this._set("_userSpatialReference", e22), t22 && (this._set("spatialReference", e22), this._spatialReferenceChanged(e22));
  }
  _spatialReferenceChanged(e22) {
  }
  get stationary() {
    return !this.animation && !this.navigating && !this.resizing;
  }
  get timeZone() {
    return this._userTimeZone ?? this._lockedTimeZone ?? this.getDefaultTimeZone() ?? o5;
  }
  set timeZone(e22) {
    const t22 = /* @__PURE__ */ new Set(["etc/utc", "etc/gmt", "gmt"]), i23 = new Set(Intl.supportedValuesOf("timeZone").map((e23) => e23.toLowerCase()));
    this._userTimeZone = e22, e22 === o5 || e22 === r3 || t22.has(e22.toLowerCase()) || i23.has(e22.toLowerCase()) || s.getLogger(this).warn("#timeZone", `the parsed value '${e22}' may not be a valid IANA time zone`);
  }
  get tools() {
    var _a;
    return (_a = this.toolViewManager) == null ? void 0 : _a.tools;
  }
  get initialExtent() {
    var _a;
    return (_a = this.defaultsFromMap) == null ? void 0 : _a.extent;
  }
  get cursor() {
    var _a;
    return ((_a = this.toolViewManager) == null ? void 0 : _a.cursor) ?? this._cursor ?? "default";
  }
  set cursor(e22) {
    this._cursor = e22, this.notifyChange("cursor");
  }
  get size() {
    return [this.width, this.height];
  }
  get effectiveTheme() {
    return this.theme ?? new l7();
  }
  whenLayerView(e22) {
    var _a;
    return ((_a = this.layerViewManager) == null ? void 0 : _a.whenLayerView(e22)) ?? Promise.reject();
  }
  getDefaultSpatialReference() {
    var _a;
    return (_a = this.defaultsFromMap) == null ? void 0 : _a.spatialReference;
  }
  getDefaultHeightModelInfo() {
    var _a;
    return (this.map && "heightModelInfo" in this.map ? this.map.heightModelInfo : void 0) ?? ((_a = this.defaultsFromMap) == null ? void 0 : _a.heightModelInfo) ?? null;
  }
  getDefaultTimeZone() {
    return null;
  }
  importLayerView(e22) {
    throw new s2("importLayerView() not implemented");
  }
  hasLayerViewModule(e22) {
    return false;
  }
  async validate() {
  }
  async loadAsyncDependencies() {
  }
  invalidate() {
    this._isValid = false;
  }
  getSpatialReferenceSupport() {
    return { constraints: null };
  }
  _validateSpatialReference(e22) {
    return null != this.getSpatialReferenceSupport({ spatialReference: e22 });
  }
  when(e22, t22) {
    return this.isResolved() && !this.ready && s.getLogger(this).warn("#when()", "Calling view.when() while the view is no longer ready but was already resolved once will resolve immediately. Use reactiveUtils.whenOnce(() => view.ready).then(...) instead."), super.when(e22, t22);
  }
  forceReadyCycle() {
    this.ready && (p(() => this.destroyed || false === this.preconditionsReady, () => this._readyCycleForced = false, { once: true }), this._readyCycleForced = true);
  }
  addAndActivateTool(e22) {
    this.toolViewManager.tools.add(e22), this.activeTool = e22;
  }
  tryFatalErrorRecovery() {
    this.fatalError = null;
  }
};
z3.views = new V(), e([y()], z3.prototype, "_userSpatialReference", void 0), e([y()], z3.prototype, "activeTool", null), e([y({ readOnly: true })], z3.prototype, "allLayerViews", void 0), e([y()], z3.prototype, "groundView", void 0), e([y()], z3.prototype, "animation", null), e([y()], z3.prototype, "basemapView", void 0), e([y()], z3.prototype, "center", null), e([y({ readOnly: true })], z3.prototype, "_defaultsFromMapSettings", null), e([y()], z3.prototype, "defaultsFromMap", null), e([y()], z3.prototype, "fatalError", void 0), e([y({ type: M })], z3.prototype, "extent", null), e([y(l4(i9, "graphics"))], z3.prototype, "graphics", void 0), e([y(l4(t9, "analyses"))], z3.prototype, "analyses", void 0), e([y({ readOnly: true, type: v5 })], z3.prototype, "heightModelInfo", null), e([y({ readOnly: true })], z3.prototype, "interacting", null), e([y({ readOnly: true })], z3.prototype, "navigating", null), e([y({ readOnly: true, dependsOn: ["fatalError", "_isValid", "_readyCycleForced", "map", "map.loaded?", "width", "height", "spatialReference", "_lockedSpatialReference", "defaultsFromMap.ready", "typeSpecificPreconditionsReady"] })], z3.prototype, "preconditionsReady", null), e([y({ readOnly: true })], z3.prototype, "typeSpecificPreconditionsReady", void 0), e([y({ type: V, readOnly: true })], z3.prototype, "layerViews", void 0), e([y()], z3.prototype, "resolution", null), e([y({ type: p4 })], z3.prototype, "magnifier", void 0), e([y({ value: null, type: g4 })], z3.prototype, "map", null), e([y()], z3.prototype, "padding", void 0), e([y({ readOnly: true })], z3.prototype, "ready", void 0), e([y({ type: f4 })], z3.prototype, "spatialReference", null), e([y()], z3.prototype, "spatialReferenceWarningDelay", void 0), e([y()], z3.prototype, "stationary", null), e([y({ readOnly: true })], z3.prototype, "supportsGround", void 0), e([y({ type: c5 })], z3.prototype, "timeExtent", void 0), e([y({ type: String, nonNullable: true })], z3.prototype, "timeZone", null), e([y()], z3.prototype, "tools", null), e([y()], z3.prototype, "toolViewManager", void 0), e([y({ readOnly: true })], z3.prototype, "type", void 0), e([y({ type: Number })], z3.prototype, "scale", void 0), e([y({ readOnly: true })], z3.prototype, "updating", void 0), e([y({ readOnly: true })], z3.prototype, "initialExtentRequired", void 0), e([y({ readOnly: true })], z3.prototype, "initialExtent", null), e([y()], z3.prototype, "cursor", null), e([y({ readOnly: true })], z3.prototype, "input", void 0), e([y({ type: p9, nonNullable: true })], z3.prototype, "navigation", void 0), e([y()], z3.prototype, "layerViewManager", void 0), e([y()], z3.prototype, "analysisViewManager", void 0), e([y()], z3.prototype, "width", void 0), e([y()], z3.prototype, "height", void 0), e([y({ readOnly: true })], z3.prototype, "resizing", void 0), e([y({ value: null, readOnly: true })], z3.prototype, "size", null), e([y({ readOnly: true })], z3.prototype, "suspended", void 0), e([y({ readOnly: true })], z3.prototype, "viewEvents", void 0), e([y({ readOnly: true })], z3.prototype, "persistableViewModels", void 0), e([y()], z3.prototype, "_isValid", void 0), e([y()], z3.prototype, "_readyCycleForced", void 0), e([y()], z3.prototype, "_lockedSpatialReference", void 0), e([y()], z3.prototype, "_userTimeZone", void 0), e([y()], z3.prototype, "_lockedTimeZone", void 0), e([y({ type: l7 })], z3.prototype, "theme", void 0), e([y({ readOnly: true, type: l7 })], z3.prototype, "effectiveTheme", null), z3 = A3 = e([c2("esri.views.View")], z3);
var W2 = z3;
function N(e22) {
  return e22.layerViews;
}

// node_modules/@arcgis/core/views/ViewAnimation.js
var n19 = class extends m2 {
  constructor(t22) {
    super(t22), this.state = "running", this.target = null, this._resolver = null;
  }
  initialize() {
    this._resolver = C(), this.addResolvingPromise(this._resolver.promise);
  }
  get done() {
    return "finished" === this.state || "stopped" === this.state;
  }
  stop() {
    var _a;
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "stopped"), (_a = this._resolver) == null ? void 0 : _a.reject(new s2("ViewAnimation stopped")));
  }
  finish() {
    var _a;
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "finished"), (_a = this._resolver) == null ? void 0 : _a.resolve());
  }
  update(t22, s19) {
    s19 || (s19 = E(t22) ? "waiting-for-target" : "running"), this._set("target", t22), this._set("state", s19);
  }
};
e([y({ readOnly: true })], n19.prototype, "done", null), e([y({ readOnly: true, type: String })], n19.prototype, "state", void 0), e([y()], n19.prototype, "target", void 0), n19 = e([c2("esri.views.ViewAnimation")], n19), function(t22) {
  t22.State = { RUNNING: "running", STOPPED: "stopped", FINISHED: "finished", WAITING_FOR_TARGET: "waiting-for-target" };
}(n19 || (n19 = {}));
var a9 = n19;

// node_modules/@arcgis/core/views/2d/AnimationManager.js
var u7 = class {
  constructor(t22, i23, s19, e22) {
    const o25 = t22.targetGeometry, n30 = i23.targetGeometry;
    e22 ? "string" == typeof e22 && (e22 = r10(e22) || t6.ease) : e22 = t6.ease, this.easing = e22, this.duration = s19, this.sCenterX = o25.x, this.sCenterY = o25.y, this.sScale = t22.scale, this.sRotation = t22.rotation, this.tCenterX = n30.x, this.tCenterY = n30.y, this.tScale = i23.scale, this.tRotation = i23.rotation, this.dCenterX = this.tCenterX - this.sCenterX, this.dCenterY = this.tCenterY - this.sCenterY, this.dScale = this.tScale - this.sScale, this.dRotation = this.tRotation - this.sRotation, this.dRotation > 180 ? this.dRotation -= 360 : this.dRotation < -180 && (this.dRotation += 360);
  }
  applyRatio(t22, i23) {
    const s19 = this.easing(i23);
    let e22, o25, n30, a23;
    i23 >= 1 ? (e22 = this.tCenterX, o25 = this.tCenterY, n30 = this.tRotation, a23 = this.tScale) : (e22 = this.sCenterX + s19 * this.dCenterX, o25 = this.sCenterY + s19 * this.dCenterY, n30 = this.sRotation + s19 * this.dRotation, a23 = this.sScale + s19 * this.dScale), t22.targetGeometry.x = e22, t22.targetGeometry.y = o25, t22.scale = a23, t22.rotation = n30;
  }
};
var d11 = class extends g {
  constructor(t22) {
    super(t22), this.updateFunction = null, this.animation = null, this.duration = 200, this.transition = null, this.easing = t6.ease, this.view = null, this.viewpoint = new l5({ targetGeometry: new x(), scale: 0, rotation: 0 }), this._updateTask = v({ postRender: this._postRender.bind(this) }), this._updateTask.pause();
  }
  destroy() {
    this._updateTask = l(this._updateTask);
  }
  animate(t22, i23, s19) {
    this.stop();
    const e22 = this.viewpoint;
    Y(e22, i23), this.transition = new u7(this.viewpoint, t22.target, (s19 == null ? void 0 : s19.duration) || this.duration, (s19 == null ? void 0 : s19.easing) || this.easing);
    const o25 = () => {
      var _a, _b;
      this.animation === t22 && this._updateTask && ("finished" === t22.state && ((_a = this.transition) == null ? void 0 : _a.applyRatio(this.viewpoint, 1), ((_b = this.view) == null ? void 0 : _b.state) && (this.view.state.viewpoint = this.viewpoint.clone())), this.animation = null, this.updateFunction = null);
    };
    return t22.when(o25, o25), this._startTime = performance.now(), this._updateTask.resume(), this.animation = t22, t22;
  }
  animateContinous(t22, i23) {
    this.stop(), this.updateFunction = i23, this.viewpoint = t22;
    const s19 = new a9({ target: t22.clone() }), e22 = () => {
      this.animation === s19 && this._updateTask && (this.animation = null, this.updateFunction = null);
    };
    return s19.when(e22, e22), this._startTime = performance.now(), this._updateTask.resume(), this.animation = s19, s19;
  }
  stop() {
    this.animation && (this.animation.stop(), this.animation = null, this.updateFunction = null);
  }
  _postRender(t22) {
    var _a, _b;
    const i23 = this.animation;
    if (i23 && i23.state !== a9.State.STOPPED) {
      if (this.updateFunction)
        this.updateFunction(this.viewpoint, t22.deltaTime);
      else {
        const t23 = this.transition, i24 = (performance.now() - this._startTime) / t23.duration, s19 = i24 >= 1;
        t23.applyRatio(this.viewpoint, i24), s19 && ((_a = this.animation) == null ? void 0 : _a.finish());
      }
      ((_b = this.view) == null ? void 0 : _b.state) && (this.view.state.viewpoint = this.viewpoint.clone());
    } else
      this._updateTask.pause();
  }
};
e([y()], d11.prototype, "animation", void 0), e([y()], d11.prototype, "duration", void 0), e([y()], d11.prototype, "transition", void 0), e([y()], d11.prototype, "easing", void 0), e([y()], d11.prototype, "view", void 0), e([y()], d11.prototype, "viewpoint", void 0), d11 = e([c2("esri.views.2d.AnimationManager")], d11);
var l11 = d11;

// node_modules/@arcgis/core/views/2d/FrameTask.js
var a10 = class {
  constructor(t22) {
    this.view = t22, this._stationaryHandle = null, this._frameTaskHandle = null, this._updateParameters = null, this._updateRequested = false, this.stationary = true, this.animationInProgress = false, this.prepare = () => {
      this._updateParameters && (this._updateParameters.state = this.view.state, this._updateParameters.stationary = this.view.stationary, this._updateParameters.pixelRatio = window.devicePixelRatio, this._updateParameters.renderingOptions = this.view.renderingOptions);
    }, this.update = () => {
      var _a2, _b;
      if (this._updateRequested = false, (_a2 = this.view) == null ? void 0 : _a2.destroyed)
        return;
      const { allLayerViews: t23, graphicsView: e22, labelManager: a23, state: { id: s19 } } = this.view;
      t23.forEach(this._updateLayerView, this), null != a23 && (a23.lastUpdateId !== s19 && (a23.viewChange(), a23.lastUpdateId = s19), a23.updateRequested && a23.processUpdate(this._updateParameters)), null != e22 && (e22.lastUpdateId !== s19 && (e22.viewChange(), e22.lastUpdateId = s19), e22.updateRequested && e22.processUpdate(this._updateParameters)), this.view.graphicsTileStore.setViewState(this._updateParameters.state), this.animationInProgress || this._updateRequested || ((_b = this._frameTaskHandle) == null ? void 0 : _b.pause());
    };
  }
  destroy() {
    this.stop();
  }
  start() {
    if (this._frameTaskHandle)
      return;
    const a23 = this.view;
    this.stationary = a23.stationary, this._updateParameters = { state: a23.state, pixelRatio: window.devicePixelRatio, stationary: this.stationary, renderingOptions: a23.renderingOptions }, this._stationaryHandle = d3(() => a23.stationary, (t22) => {
      this.stationary = t22, this.requestFrame();
    }), this._frameTaskHandle = v(this), this.requestUpdate();
  }
  stop() {
    var _a2;
    this._frameTaskHandle && (this._updateRequested = false, (_a2 = this._stationaryHandle) == null ? void 0 : _a2.remove(), this._frameTaskHandle.remove(), this._updateParameters = this._stationaryHandle = this._frameTaskHandle = null, this.stationary = true, this.animationInProgress = false);
  }
  requestUpdate() {
    this._updateRequested || (this._updateRequested = true, this.requestFrame());
  }
  requestFrame() {
    this._frameTaskHandle && this._frameTaskHandle.resume();
  }
  _updateLayerView(t22) {
    var _a2;
    if (!t22.attached)
      return void this.requestUpdate();
    const e22 = this.view.state, a23 = t22.lastUpdateId;
    null != a23 && (this.stationary || t22.moving) || (t22.moving = true, t22.moveStart()), a23 !== e22.id && t22.viewChange(), this.stationary && t22.moving && (t22.moving = false, t22.moveEnd()), t22.lastUpdateId = e22.id, t22.updateRequested && t22.processUpdate(this._updateParameters), "layerViews" in t22 && ((_a2 = t22.layerViews) == null ? void 0 : _a2.forEach(this._updateLayerView, this));
  }
};

// node_modules/@arcgis/core/views/2d/GoToManager.js
var p12 = class extends g {
  constructor(t22) {
    super(t22), this._gotoTask = null;
  }
  destroy() {
    this._gotoTask = null;
  }
  async goTo(t22, o25) {
    if (!t22)
      return void s.getLogger(this).error("#goTo()", "target cannot be null or undefined");
    this.view.animation && (this.view.animation = null);
    const e22 = this._createAnimation();
    await w(() => this.view.ready, o25);
    const r24 = { animate: true, ...o25 }, { extent: n30, spatialReference: a23, size: c24, viewpoint: p22, constraints: l20, padding: h12, allLayerViews: w6 } = this.view, g10 = X(t22, { extent: n30, spatialReference: a23, size: c24, viewpoint: p22, constraints: l20, padding: h12, allLayerViews: w6, pickClosestTarget: (o25 == null ? void 0 : o25.pickClosestTarget) ?? true });
    return e22 == null ? void 0 : e22.update(g10), this._gotoTask = {}, r24.animate ? this._gotoAnimated(g10, r24) : this._gotoImmediate(g10, r24);
  }
  _gotoImmediate(t22, o25) {
    const i23 = this._gotoTask, s19 = this.view.animation, n30 = t22.then((t23) => {
      if (s3(o25), i23 !== this._gotoTask)
        throw new s2("view:goto-interrupted", "Goto was interrupted");
      this.view.viewpoint = s19.target = t23, s19.finish();
    });
    return this._cancellableGoTo(i23, s19, n30);
  }
  _gotoAnimated(t22, o25) {
    const i23 = this._gotoTask, s19 = this.view.animation;
    if (!s19)
      return Promise.resolve();
    const n30 = t22.then((t23) => {
      if (s3(o25), i23 !== this._gotoTask)
        throw new s2("view:goto-interrupted", "Goto was interrupted");
      return s19.update(t23), this.view.animationManager.animate(s19, this.view.viewpoint, o25), s19.when().then(() => {
      }, () => {
      });
    });
    return this._cancellableGoTo(i23, s19, n30);
  }
  _createAnimation() {
    return this.view.animation && !this.view.animation.done || (this.view.animation = new a9()), this.view.animation;
  }
  _cancellableGoTo(t22, o25, e22) {
    const i23 = () => t22 === this._gotoTask;
    return e22.finally(() => {
      i23() && (o25.done || o25.stop(), this.view.animation = null);
    });
  }
};
e([y({ constructOnly: true })], p12.prototype, "view", void 0), p12 = e([c2("esri.views.2d.GoToManager")], p12);

// node_modules/@arcgis/core/views/2d/layerViewModuleImportUtils.js
function r13() {
  return Promise.all([import("./webglDeps-5SSGCC46.js"), import("./mapViewDeps-ZRXADAPS.js")]);
}
var a11 = () => r13().then(() => import("./TileLayerView2D-EHTYFC7S.js"));
var t12 = () => r13().then(() => import("./FeatureLayerView2D-SJTZWXXN.js"));
var s13 = { "base-dynamic": () => r13().then(() => import("./BaseDynamicLayerView2D-G6CN2BB4.js")), "base-tile": a11, "bing-maps": a11, csv: t12, "geo-rss": () => r13().then(() => import("./GeoRSSLayerView2D-ZRFKALII.js")), feature: t12, geojson: t12, graphics: () => r13().then(() => import("./GraphicsLayerView2D-47LQNTY6.js")), group: () => r13().then(() => import("./GroupLayerView2D-VEI3L2IE.js")), imagery: () => r13().then(() => import("./ImageryLayerView2D-DNXVVDNG.js")), "imagery-tile": () => r13().then(() => import("./ImageryTileLayerView2D-6RG4BXJU.js")), kml: () => r13().then(() => import("./KMLLayerView2D-72LKK37O.js")), "knowledge-graph": () => r13().then(() => import("./KnowledgeGraphLayerView2D-6MKLZXM3.js")), "link-chart": () => r13().then(() => import("./KnowledgeGraphLayerView2D-6MKLZXM3.js")), "knowledge-graph-sublayer": t12, "map-image": () => r13().then(() => import("./MapImageLayerView2D-ZB6NCQVS.js")), "map-notes": () => r13().then(() => import("./MapNotesLayerView2D-VFM47QOQ.js")), media: () => r13().then(() => import("./MediaLayerView2D-GZB56PUA.js")), "ogc-feature": () => r13().then(() => import("./OGCFeatureLayerView2D-GVDEZHP3.js")), "open-street-map": a11, "oriented-imagery": t12, route: () => r13().then(() => import("./RouteLayerView2D-A6LARG5X.js")), stream: () => r13().then(() => import("./StreamLayerView2D-JBOLPZKK.js")), "subtype-group": () => r13().then(() => import("./SubtypeGroupLayerView2D-3CJS2HIH.js")), tile: a11, "vector-tile": () => r13().then(() => import("./VectorTileLayerView2D-V75SKNTL.js")), video: () => r13().then(() => import("./VideoLayerView2D-ZNL2Z6HZ.js")), wcs: () => r13().then(() => import("./ImageryTileLayerView2D-6RG4BXJU.js")), "web-tile": a11, wfs: t12, wms: () => r13().then(() => import("./WMSLayerView2D-PWKNA7JF.js")), wmts: () => r13().then(() => import("./WMTSLayerView2D-BMZE3Y7Q.js")), "line-of-sight": null, "base-elevation": null, "building-scene": null, dimension: null, elevation: null, "integrated-mesh": null, "point-cloud": null, voxel: null, scene: null, unknown: null, unsupported: null };
function i18(r24) {
  const a23 = r24.declaredClass ? r24.declaredClass.slice(r24.declaredClass.lastIndexOf(".") + 1) : "Unknown", t22 = a23.replaceAll(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  return new s2(`${t22}:view-not-supported`, `${a23} is not supported in 2D`);
}
var l12 = { hasLayerViewModule: (e22) => null != s13[e22.type], importLayerView: (e22) => {
  const r24 = s13[e22.type];
  if (null == r24)
    throw i18(e22);
  return r24(e22);
} };

// node_modules/@arcgis/core/geometry/support/near.js
function o15(o25, m15) {
  const { spatialReference: r24 } = m15, i23 = [m15.x, m15.y];
  let s19 = Number.POSITIVE_INFINITY, x2 = 0, c24 = 0;
  const a23 = [0, 0], f14 = "extent" === o25.type ? [[[o25.xmin, o25.ymin], [o25.xmin, o25.ymax], [o25.xmax, o25.ymax], [o25.xmax, o25.ymin], [o25.xmin, o25.ymin]]] : o25.rings;
  for (const n30 of f14)
    for (let o26 = 0; o26 < n30.length - 1; o26++) {
      s6(a23, i23, n30, o26);
      const m16 = m5(i23, a23);
      m16 < s19 && (s19 = m16, x2 = a23[0], c24 = a23[1]);
    }
  return { coordinate: new x({ x: x2, y: c24, spatialReference: r24 }), distance: s19 };
}

// node_modules/@arcgis/core/views/2d/constraints/GeometryConstraint.js
var p13;
var l13 = p13 = class extends i5(g) {
  constructor(e22) {
    super(e22), this.geometry = null, this.spatialReference = null;
  }
  get normalizedGeometry() {
    if (null == this.geometry || !this.spatialReference)
      return null;
    if (!this.spatialReference.equals(this.geometry.spatialReference))
      try {
        return b2(this.geometry, this.spatialReference);
      } catch (e22) {
        return s.getLogger(this).error("#constraints.geometry", "could not project the geometry to the view's spatial reference", { geometry: this.geometry, spatialReference: this.spatialReference, error: e22 }), null;
      }
    return this.geometry;
  }
  constrain(e22, r24) {
    if (null == this.normalizedGeometry)
      return e22;
    const t22 = e22.targetGeometry;
    if ("extent" === this.normalizedGeometry.type ? t4(this.normalizedGeometry, t22) : f5(this.normalizedGeometry, t22))
      return e22;
    const { coordinate: o25 } = o15(this.normalizedGeometry, t22);
    return o25 ? (e22.targetGeometry = o25, e22) : e22;
  }
  clone() {
    var _a, _b;
    return new p13({ geometry: (_a = this.geometry) == null ? void 0 : _a.clone(), spatialReference: (_b = this.spatialReference) == null ? void 0 : _b.clone() });
  }
};
e([y({ constructOnly: true })], l13.prototype, "geometry", void 0), e([y({ readOnly: true })], l13.prototype, "normalizedGeometry", null), e([y({ constructOnly: true })], l13.prototype, "spatialReference", void 0), l13 = p13 = e([c2("esri.views.2d.constraints.GeometryConstraint")], l13);

// node_modules/@arcgis/core/views/2d/constraints/RotationConstraint.js
var a12;
var n20 = a12 = class extends i5(g) {
  constructor() {
    super(...arguments), this.enabled = true, this.rotationEnabled = true;
  }
  constrain(o25, r24) {
    return this.enabled && r24 ? (this.rotationEnabled || (o25.rotation = r24.rotation), o25) : o25;
  }
  clone() {
    return new a12({ enabled: this.enabled, rotationEnabled: this.rotationEnabled });
  }
};
e([y()], n20.prototype, "enabled", void 0), e([y()], n20.prototype, "rotationEnabled", void 0), n20 = a12 = e([c2("esri.views.2d.constraints.RotationConstraint")], n20);
var i19 = n20;

// node_modules/@arcgis/core/views/2d/constraints/ZoomConstraint.js
var a13;
var c13 = a13 = class extends i5(g) {
  constructor(e22) {
    super(e22), this._lodByScale = {}, this._scales = [], this.effectiveLODs = null, this.effectiveMinZoom = -1, this.effectiveMaxZoom = -1, this.effectiveMinScale = 0, this.effectiveMaxScale = 0, this.lods = null, this.minZoom = -1, this.maxZoom = -1, this.minScale = 0, this.maxScale = 0, this.snapToZoom = true;
  }
  initialize() {
    let e22, { lods: t22, minScale: o25, maxScale: s19, minZoom: i23, maxZoom: a23 } = this, c24 = -1, r24 = -1, l20 = false, n30 = false;
    if (0 !== o25 && 0 !== s19 && o25 < s19 && ([o25, s19] = [s19, o25]), !(t22 == null ? void 0 : t22.length))
      return this._set("effectiveMinScale", o25), void this._set("effectiveMaxScale", s19);
    t22 = t22.map((e23) => e23.clone()), t22.sort((e23, t23) => t23.scale - e23.scale), t22.forEach((e23, t23) => e23.level = t23);
    for (const f14 of t22)
      !l20 && o25 > 0 && o25 >= f14.scale && (c24 = f14.level, l20 = true), !n30 && s19 > 0 && s19 >= f14.scale && (r24 = e22 ? e22.level : -1, n30 = true), e22 = f14;
    -1 === i23 && (i23 = 0 === o25 ? 0 : c24), -1 === a23 && (a23 = 0 === s19 ? t22.length - 1 : r24), i23 = Math.max(i23, 0), i23 = Math.min(i23, t22.length - 1), a23 = Math.max(a23, 0), a23 = Math.min(a23, t22.length - 1), i23 > a23 && ([i23, a23] = [a23, i23]), o25 = t22[i23].scale, s19 = t22[a23].scale, t22.splice(0, i23), t22.splice(a23 - i23 + 1, t22.length), t22.forEach((e23, t23) => {
      this._lodByScale[e23.scale] = e23, this._scales[t23] = e23.scale;
    }), this._set("effectiveLODs", t22), this._set("effectiveMinZoom", i23), this._set("effectiveMaxZoom", a23), this._set("effectiveMinScale", o25), this._set("effectiveMaxScale", s19);
  }
  constrain(e22, t22) {
    if (t22 && e22.scale === t22.scale)
      return e22;
    const o25 = this.effectiveMinScale, s19 = this.effectiveMaxScale, i23 = e22.targetGeometry, a23 = t22 && t22.targetGeometry, c24 = 0 !== s19 && e22.scale < s19, r24 = 0 !== o25 && e22.scale > o25;
    if (c24 || r24) {
      const c25 = r24 ? o25 : s19;
      if (t22 && a23) {
        const o26 = (c25 - t22.scale) / (e22.scale - t22.scale);
        i23.x = a23.x + (i23.x - a23.x) * o26, i23.y = a23.y + (i23.y - a23.y) * o26;
      }
      e22.scale = c25;
    }
    return this.snapToZoom && this.effectiveLODs && (e22.scale = this._getClosestScale(e22.scale)), e22;
  }
  fit(e22) {
    if (!this.effectiveLODs || !this.snapToZoom)
      return this.constrain(e22, null);
    const t22 = this.scaleToZoom(e22.scale), o25 = Math.abs(t22 - Math.floor(t22));
    return e22.scale = this.zoomToScale(o25 > 0.99 ? Math.round(t22) : Math.floor(t22)), e22;
  }
  zoomToScale(e22) {
    if (!this.effectiveLODs)
      return 0;
    e22 -= this.effectiveMinZoom, e22 = Math.max(0, e22);
    const t22 = this._scales;
    if (e22 <= 0)
      return t22[0];
    if (e22 >= t22.length)
      return t22[t22.length - 1];
    const o25 = Math.round(e22 - 0.5), s19 = Math.round(e22);
    return t22[s19] + (s19 - e22) * (t22[o25] - t22[s19]);
  }
  scaleToZoom(e22) {
    if (!this.effectiveLODs)
      return -1;
    const t22 = this._scales;
    let o25, s19;
    if (e22 >= t22[0])
      return this.effectiveMinZoom;
    if (e22 <= t22[t22.length - 1])
      return this.effectiveMaxZoom;
    for (let i23 = 0; i23 < t22.length - 1; i23++) {
      if (o25 = t22[i23], s19 = t22[i23 + 1], s19 === e22) {
        return i23 + this.effectiveMinZoom + 1;
      }
      if (o25 > e22 && s19 < e22) {
        return i23 + this.effectiveMinZoom + 1 - (e22 - s19) / (o25 - s19);
      }
    }
    return -1;
  }
  snapToClosestScale(e22) {
    if (!this.effectiveLODs)
      return e22;
    const t22 = this.scaleToZoom(e22);
    return this.zoomToScale(Math.round(t22));
  }
  snapToNextScale(e22, t22 = 0.5) {
    if (!this.effectiveLODs)
      return e22 * t22;
    const o25 = Math.round(this.scaleToZoom(e22));
    return this.zoomToScale(o25 + 1);
  }
  snapToPreviousScale(e22, t22 = 2) {
    if (!this.effectiveLODs)
      return e22 * t22;
    const o25 = Math.round(this.scaleToZoom(e22));
    return this.zoomToScale(o25 - 1);
  }
  clone() {
    return new a13({ lods: this.lods, minZoom: this.minZoom, maxZoom: this.maxZoom, minScale: this.minScale, maxScale: this.maxScale });
  }
  _getClosestScale(e22) {
    return this._lodByScale[e22] || (e22 = this._scales.reduce((t22, o25) => Math.abs(o25 - e22) <= Math.abs(t22 - e22) ? o25 : t22, this._scales[0])), this._lodByScale[e22].scale;
  }
};
e([y({ readOnly: true })], c13.prototype, "effectiveLODs", void 0), e([y({ readOnly: true })], c13.prototype, "effectiveMinZoom", void 0), e([y({ readOnly: true })], c13.prototype, "effectiveMaxZoom", void 0), e([y({ readOnly: true })], c13.prototype, "effectiveMinScale", void 0), e([y({ readOnly: true })], c13.prototype, "effectiveMaxScale", void 0), e([y()], c13.prototype, "lods", void 0), e([y()], c13.prototype, "minZoom", void 0), e([y()], c13.prototype, "maxZoom", void 0), e([y()], c13.prototype, "minScale", void 0), e([y()], c13.prototype, "maxScale", void 0), e([y()], c13.prototype, "snapToZoom", void 0), c13 = a13 = e([c2("esri.views.2d.constraints.ZoomConstraint")], c13);
var r14 = c13;

// node_modules/@arcgis/core/views/2d/MapViewConstraints.js
var p14 = { base: null, key: "type", typeMap: { extent: M, polygon: j2 } };
var y3 = class extends g {
  constructor(o25) {
    super(o25), this.lods = null, this.minScale = 0, this.maxScale = 0, this.minZoom = -1, this.maxZoom = -1, this.rotationEnabled = true, this.snapToZoom = true, this.customConstraints = new V();
  }
  destroy() {
    this.view = null;
  }
  get effectiveLODs() {
    return this._zoom.effectiveLODs;
  }
  get effectiveMinScale() {
    return this._zoom.effectiveMinScale;
  }
  get effectiveMaxScale() {
    return this._zoom.effectiveMaxScale;
  }
  get effectiveMinZoom() {
    return this._zoom.effectiveMinZoom;
  }
  get effectiveMaxZoom() {
    return this._zoom.effectiveMaxZoom;
  }
  set geometry(o25) {
    o25 ? this._set("geometry", o25) : this._set("geometry", null);
  }
  get version() {
    var _a, _b, _c;
    return `${(_a = this._zoom) == null ? void 0 : _a.uid}/${(_b = this._rotation) == null ? void 0 : _b.uid}/${(_c = this._geometry) == null ? void 0 : _c.uid}`;
  }
  get _geometry() {
    var _a, _b;
    const o25 = this._get("_geometry");
    return o25 && this.geometry === o25.geometry && ((_a = this.view) == null ? void 0 : _a.constraintsInfo.spatialReference) === o25.spatialReference ? o25 : new l13({ geometry: this.geometry, spatialReference: (_b = this.view) == null ? void 0 : _b.constraintsInfo.spatialReference });
  }
  get _rotation() {
    return new i19({ rotationEnabled: this.rotationEnabled });
  }
  get _zoom() {
    var _a;
    const o25 = this._get("_zoom"), t22 = this.lods || ((_a = this.view) == null ? void 0 : _a.constraintsInfo.lods), e22 = this.minZoom, r24 = this.maxZoom, s19 = this.minScale, i23 = this.maxScale, n30 = this.snapToZoom;
    return o25 && o25.lods === t22 && o25.minZoom === e22 && o25.maxZoom === r24 && o25.minScale === s19 && o25.maxScale === i23 && o25.snapToZoom === n30 ? o25 : new r14({ lods: t22, minZoom: e22, maxZoom: r24, minScale: s19, maxScale: i23, snapToZoom: n30 });
  }
  canZoomInTo(o25) {
    const t22 = this.effectiveMaxScale;
    return 0 === t22 || o25 >= t22;
  }
  canZoomOutTo(o25) {
    const t22 = this.effectiveMinScale;
    return 0 === t22 || o25 <= t22;
  }
  constrain(o25, t22) {
    return this._zoom.constrain(o25, t22), this._rotation.constrain(o25, t22), this._geometry.constrain(o25, t22), this.customConstraints.forEach((e22) => e22.constrain(o25, t22)), o25;
  }
  constrainByGeometry(o25) {
    return this._geometry.constrain(o25), this.customConstraints.forEach((t22) => {
      var _a;
      return (_a = t22.applyPanConstraint) == null ? void 0 : _a.call(t22, o25);
    }), o25;
  }
  fit(o25) {
    return this._zoom.fit(o25);
  }
  zoomToScale(o25) {
    return this._zoom.zoomToScale(o25);
  }
  scaleToZoom(o25) {
    return this._zoom.scaleToZoom(o25);
  }
  snapScale(o25) {
    return this._zoom.snapToClosestScale(o25);
  }
  snapToNextScale(o25) {
    return this._zoom.snapToNextScale(o25);
  }
  snapToPreviousScale(o25) {
    return this._zoom.snapToPreviousScale(o25);
  }
};
e([y({ readOnly: true })], y3.prototype, "effectiveLODs", null), e([y({ readOnly: true })], y3.prototype, "effectiveMinScale", null), e([y({ readOnly: true })], y3.prototype, "effectiveMaxScale", null), e([y({ readOnly: true })], y3.prototype, "effectiveMinZoom", null), e([y({ readOnly: true })], y3.prototype, "effectiveMaxZoom", null), e([y({ types: p14, value: null })], y3.prototype, "geometry", null), e([y({ type: [p3] })], y3.prototype, "lods", void 0), e([y()], y3.prototype, "minScale", void 0), e([y()], y3.prototype, "maxScale", void 0), e([y()], y3.prototype, "minZoom", void 0), e([y()], y3.prototype, "maxZoom", void 0), e([y()], y3.prototype, "rotationEnabled", void 0), e([y()], y3.prototype, "snapToZoom", void 0), e([y({ type: V })], y3.prototype, "customConstraints", void 0), e([y()], y3.prototype, "view", void 0), e([y({ readOnly: true })], y3.prototype, "version", null), e([y({ type: l13, readOnly: true })], y3.prototype, "_geometry", null), e([y({ type: i19 })], y3.prototype, "_rotation", null), e([y({ readOnly: true, type: r14 })], y3.prototype, "_zoom", null), y3 = e([c2("esri.views.2d.MapViewConstraints")], y3);
var f10 = y3;

// node_modules/@arcgis/core/core/libs/gl-matrix-2/types/vec2.js
function n21(n30) {
  return n30 instanceof Float32Array && n30.length >= 2;
}
function r15(n30) {
  return Array.isArray(n30) && n30.length >= 2;
}
function t13(t22) {
  return n21(t22) || r15(t22);
}

// node_modules/@arcgis/core/views/2d/ViewState.js
var U;
var G = [0, 0];
var O3 = U = class extends f {
  constructor(t22) {
    super(t22), this._viewpoint2D = { center: n7(), rotation: 0, scale: 0, spatialReference: void 0 }, this.center = [0, 0], this.extent = new M(), this.id = 0, this.inverseTransform = e10(), this.resolution = 0, this.rotation = 0, this.scale = 0, this.transform = e10(), this.transformNoRotation = e10(), this.displayMat3 = e8(), this.displayViewMat3 = e8(), this.viewMat3 = e8(), this.viewMat2d = n8(), this.worldScreenWidth = 0, this.size = [0, 0];
  }
  set pixelRatio(t22) {
    this._set("pixelRatio", t22), this._update();
  }
  set size(t22) {
    this._set("size", t22), this._update();
  }
  set viewpoint(t22) {
    if (t22) {
      const s19 = this._viewpoint2D, e22 = t22.targetGeometry;
      s19.center[0] = e22.x, s19.center[1] = e22.y, s19.rotation = t22.rotation, s19.scale = t22.scale, s19.spatialReference = e22.spatialReference;
    }
    this._update();
  }
  copy(t22) {
    const s19 = this.size, e22 = this.viewpoint;
    return e22 && s19 ? (this.viewpoint = Y(e22, t22.viewpoint), this._set("size", a(s19, t22.size))) : (this.viewpoint = t22.viewpoint.clone(), this._set("size", [t22.size[0], t22.size[1]])), this._set("pixelRatio", t22.pixelRatio), this;
  }
  clone() {
    return new U({ size: this.size, viewpoint: this.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
  toMap(t22, s19, e22) {
    return t13(s19) ? z(t22, s19, this.inverseTransform) : (G[0] = s19, G[1] = e22, z(t22, G, this.inverseTransform));
  }
  toScreen(t22, s19, e22) {
    return t13(s19) ? z(t22, s19, this.transform) : (G[0] = s19, G[1] = e22, z(t22, G, this.transform));
  }
  toScreenNoRotation(t22, s19, e22) {
    return t13(s19) ? z(t22, s19, this.transformNoRotation) : (G[0] = s19, G[1] = e22, z(t22, G, this.transformNoRotation));
  }
  toScreenClosest(t22, s19, e22) {
    t13(s19) ? (G[0] = s19[0], G[1] = s19[1]) : (G[0] = s19, G[1] = e22);
    const [i23] = G, { center: o25, extent: r24, spatialReference: n30, transform: a23 } = this;
    return (i23 < r24.xmin || i23 > r24.xmax) && (G[0] = P2(i23, o25[0], n30)), z(t22, G, a23);
  }
  getScreenTransform(t22, s19) {
    const { center: e22 } = this._viewpoint2D, i23 = this._get("pixelRatio") || 1, o25 = this._get("size");
    return st(t22, e22, o25, s19, 0, i23), t22;
  }
  _update() {
    const { center: t22, spatialReference: e22, scale: i23, rotation: o25 } = this._viewpoint2D, c24 = this._get("pixelRatio") || 1, m15 = this._get("size"), d18 = new l5({ targetGeometry: new x(t22[0], t22[1], e22), scale: i23, rotation: o25 });
    if (this._set("viewpoint", d18), !m15 || !e22 || !i23)
      return;
    this.resolution = rt(d18), this.rotation = o25, this.scale = i23, this.spatialReference = e22, a(this.center, t22);
    const y6 = 0 !== m15[0] ? 2 / m15[0] : 0, x2 = 0 !== m15[1] ? -2 / m15[1] : 0;
    s7(this.displayMat3, y6, 0, 0, 0, x2, 0, -1, 1, 1);
    const _11 = r8(this.viewMat3), z6 = t5(m15[0] / 2, m15[1] / 2), g10 = t5(-m15[0] / 2, -m15[1] / 2), S = r6(o25);
    M2(_11, _11, z6), h(_11, _11, S), M2(_11, _11, g10), i6(this.displayViewMat3, this.displayMat3, _11);
    const V4 = f6(this.viewMat2d, z6);
    return e7(V4, V4, S), i8(V4, V4, g10), $(this.extent, d18, m15), ut(this.transform, d18, m15, c24), r9(this.inverseTransform, this.transform), ft(this.transformNoRotation, d18, m15, c24), this.worldScreenWidth = mt(this.spatialReference, this.resolution), this._set("id", this.id + 1), this;
  }
};
e([y({ readOnly: true })], O3.prototype, "id", void 0), e([y({ value: 1, json: { write: true } })], O3.prototype, "pixelRatio", null), e([y({ json: { write: true } })], O3.prototype, "size", null), e([y()], O3.prototype, "spatialReference", void 0), e([y({ type: l5, json: { write: true } })], O3.prototype, "viewpoint", null), O3 = U = e([c2("esri.views.2d.ViewState")], O3);
var W3 = O3;

// node_modules/@arcgis/core/views/2d/PaddedViewState.js
var l14;
var m9;
var w4 = l14 = class extends g {
  constructor() {
    super(...arguments), this.left = 0, this.top = 0, this.right = 0, this.bottom = 0;
  }
  clone() {
    return new l14({ left: this.left, top: this.top, right: this.right, bottom: this.bottom });
  }
};
e([y()], w4.prototype, "left", void 0), e([y()], w4.prototype, "top", void 0), e([y()], w4.prototype, "right", void 0), e([y()], w4.prototype, "bottom", void 0), w4 = l14 = e([c2("esri.views.2d.PaddedViewState.Padding")], w4);
var u8 = m9 = class extends W3 {
  constructor(...t22) {
    super(...t22), this.paddedViewState = new W3(), this._updateContent = (() => {
      const t23 = n7();
      return () => {
        const e22 = this._get("size"), i23 = this._get("padding");
        if (!e22 || !i23)
          return;
        const o25 = this.paddedViewState;
        r7(t23, i23.left + i23.right, i23.top + i23.bottom), o7(t23, e22, t23), a(o25.size, t23);
        const s19 = o25.viewpoint;
        s19 && (this.viewpoint = s19);
      };
    })(), this.addHandles(d3(() => [this.size, this.padding], () => this._updateContent(), C2)), this.padding = new w4(), this.size = [0, 0];
  }
  set padding(t22) {
    this._set("padding", t22 || new w4());
  }
  set viewpoint(t22) {
    if (t22) {
      const e22 = t22.clone();
      this.paddedViewState.viewpoint = t22, pt(e22, t22, this._get("size"), this._get("padding"));
      const i23 = this._viewpoint2D, o25 = e22.targetGeometry;
      i23.center[0] = o25.x, i23.center[1] = o25.y, i23.rotation = e22.rotation, i23.scale = e22.scale, i23.spatialReference = o25.spatialReference, this._update();
    }
  }
  clone() {
    return new m9({ padding: this.padding.clone(), size: this.size.slice(), viewpoint: this.paddedViewState.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
};
e([y()], u8.prototype, "paddedViewState", void 0), e([y({ type: w4 })], u8.prototype, "padding", null), e([y()], u8.prototype, "viewpoint", null), u8 = m9 = e([c2("esri.views.2d.PaddedViewState")], u8);
var f11 = u8;

// node_modules/@arcgis/core/views/2d/ViewStateManager.js
var z4 = class extends g {
  constructor(t22) {
    super(t22), this.constraints = null, this.ready = false, this.resizeAlign = "center", this.addHandles([d3(() => {
      var _a;
      return (_a = this.constraints) == null ? void 0 : _a.version;
    }, (t23) => {
      this.constraints && t23 && this.ready && (this.state.viewpoint = this.constraints.fit(this.state.paddedViewState.viewpoint));
    }, C2)]);
  }
  get center() {
    if (!this.ready)
      return this._get("center");
    const { center: t22, spatialReference: e22 } = this.state.paddedViewState;
    return this.state.commitProperty("id"), new x({ x: t22[0], y: t22[1], spatialReference: e22 });
  }
  set center(t22) {
    if (null == t22)
      return;
    if (!this.ready)
      return void this._set("center", t22);
    let e22;
    try {
      e22 = this._project(t22, this.state.spatialReference);
    } catch (o25) {
      return void s.getLogger(this).error(new s2("mapview:invalid-center", "could not project the value in the view's spatial reference", { input: t22, error: o25 }));
    }
    const i23 = this.viewpoint;
    gt(i23, i23, e22), this.viewpoint = i23;
  }
  get extent() {
    return this.ready ? (this.state.commitProperty("id"), this.state.paddedViewState.extent.clone()) : this._get("extent");
  }
  set extent(t22) {
    if (null == t22)
      return;
    if (!t22.width || !t22.height)
      return void s.getLogger(this).error(new s2("mapview:invalid-extent", "invalid extent size"));
    if (!this.ready)
      return this._set("extent", t22), this._set("center", void 0), this._set("viewpoint", void 0), this._set("scale", void 0), void this._set("zoom", void 0);
    let e22;
    try {
      e22 = this._project(t22, this.state.spatialReference);
    } catch (o25) {
      return void s.getLogger(this).error(new s2("mapview:invalid-extent", "could not project the value in the view's spatial reference", { error: o25 }));
    }
    const i23 = this.viewpoint;
    _4(i23, i23, e22, this.state.size, { constraints: this.constraints }), this.viewpoint = i23;
  }
  get padding() {
    return this.ready ? this.state.padding : this._get("padding");
  }
  set padding(t22) {
    this.ready ? (this.state.padding = t22, this._set("padding", this.state.padding)) : this._set("padding", t22);
  }
  get resolution() {
    return this.ready ? (this.state.commitProperty("id"), this.state.resolution) : 0;
  }
  get rotation() {
    return this.ready ? (this.state.commitProperty("id"), this.state.rotation) : this._get("rotation");
  }
  set rotation(t22) {
    if (isNaN(t22))
      return;
    if (!this.ready)
      return void this._set("rotation", t22);
    const e22 = this.viewpoint;
    bt(e22, e22, t22), this.viewpoint = e22;
  }
  get scale() {
    return this.ready ? (this.state.commitProperty("id"), this.state.scale) : this._get("scale");
  }
  set scale(t22) {
    if (!t22 || isNaN(t22))
      return;
    if (!this.ready) {
      this._set("scale", t22), this._set("zoom", void 0);
      const e23 = this._get("extent");
      return void (e23 && (this._set("extent", void 0), this._set("center", e23.center)));
    }
    const e22 = this.viewpoint;
    dt(e22, e22, t22), this.viewpoint = e22;
  }
  get viewpoint() {
    if (!this.ready)
      return this._get("viewpoint");
    return this.state.paddedViewState.viewpoint.clone();
  }
  set viewpoint(t22) {
    var _a;
    if (null == t22)
      return;
    if (!this.ready)
      return this._set("viewpoint", t22), this._set("extent", void 0), this._set("center", void 0), this._set("zoom", void 0), void this._set("scale", void 0);
    let i23, o25;
    try {
      i23 = this._project(t22, this.state.spatialReference), !t22.scale || isNaN(t22.scale) ? o25 = new s2("mapview:invalid-viewpoint", `invalid scale value of ${t22.scale}`) : null == t22.targetGeometry && (o25 = new s2("mapview:invalid-viewpoint", "geometry not defined"));
    } catch (a23) {
      o25 = new s2("mapview:invalid-viewpoint", "could not project the value in the view's spatial reference", { error: a23 });
    }
    if (o25)
      return void s.getLogger(this).error(o25);
    this._scaleBeforeChangingSpatialReference = null;
    const n30 = new l5({ targetGeometry: new x(), scale: 0, rotation: 0 });
    Y(n30, i23), (_a = this.constraints) == null ? void 0 : _a.constrain(n30, this.state.paddedViewState.viewpoint), this.state.viewpoint = n30, this._set("viewpoint", n30);
  }
  get zoom() {
    var _a;
    return this.ready ? ((_a = this.constraints) == null ? void 0 : _a.scaleToZoom(this.scale)) ?? -1 : this._get("zoom");
  }
  set zoom(t22) {
    var _a, _b;
    if (!(t22 >= 0))
      return;
    if (!this.ready) {
      this._set("zoom", t22), this._set("scale", void 0);
      const e23 = this._get("extent");
      return void (e23 && (this._set("extent", void 0), this._set("center", e23.center)));
    }
    const e22 = ((_a = this.constraints) == null ? void 0 : _a.zoomToScale(t22)) ?? 0;
    if (!e22)
      return void this._set("zoom", -1);
    const i23 = this.viewpoint;
    dt(i23, i23, e22), this.viewpoint = i23, this._set("zoom", ((_b = this.constraints) == null ? void 0 : _b.scaleToZoom(this.scale)) ?? -1);
  }
  getUserStartupOptions(t22) {
    if (!t22[0] && !t22[1])
      return { center: void 0, rotation: void 0, scale: void 0 };
    const { padding: e22, constraints: i23 } = this, s19 = this._get("center"), r24 = this._get("extent"), o25 = this._get("scale"), n30 = this._get("rotation"), a23 = this._get("viewpoint"), c24 = this._get("zoom"), p22 = null != c24 && null != i23 && i23.zoomToScale(c24) || void 0;
    let h12, l20, d18;
    const v9 = a23 == null ? void 0 : a23.rotation, m15 = a23 == null ? void 0 : a23.targetGeometry;
    "extent" === (m15 == null ? void 0 : m15.type) ? h12 = m15 : "point" === (m15 == null ? void 0 : m15.type) && (l20 = m15, d18 = a23 == null ? void 0 : a23.scale);
    const u14 = r24 ?? h12;
    return { center: s19 ?? l20 ?? (u14 == null ? void 0 : u14.center), rotation: n30 ?? v9, scale: (o25 ?? p22 ?? d18 ?? (u14 && W(u14, [t22[0] - e22.left - e22.right, t22[1] - e22.top - e22.bottom]))) || void 0 };
  }
  startup(t22, e22, i23, s19) {
    var _a;
    const o25 = t22.targetGeometry;
    try {
      this._project(t22, i23);
    } catch (n30) {
      s.getLogger(this).warn(new s4("mapview:startup-projection-error", "projection of initial viewpoint to the view's spatial reference, defaulting to the initial viewpoint.", { center: o25.toJSON(), spatialReference: i23, error: n30 })), t22.targetGeometry = s19 || new x({ x: 0, y: 0, spatialReference: i23 });
    }
    (_a = this.constraints) == null ? void 0 : _a.fit(t22), this._set("state", new f11({ padding: this.padding, size: e22, viewpoint: t22 })), this._set("ready", true);
  }
  teardown() {
    this._set("ready", false);
    const { center: [t22, e22], spatialReference: i23, rotation: s19, scale: r24 } = this.state.paddedViewState, o25 = new x({ x: t22, y: e22, spatialReference: i23 });
    this._set("viewpoint", null), this._set("extent", null), this._set("center", o25), this._set("zoom", -1), this._set("rotation", s19), this._set("scale", r24), this._set("state", null);
  }
  changeSpatialReference(t22) {
    var _a;
    const i23 = this.state.paddedViewState.clone();
    if (null == this._scaleBeforeChangingSpatialReference)
      this._scaleBeforeChangingSpatialReference = i23.scale;
    else {
      const t23 = i23.viewpoint.clone();
      t23.scale = this._scaleBeforeChangingSpatialReference, i23.viewpoint = t23;
    }
    const s19 = i23.clone(), [o25, n30] = i23.center;
    let a23 = null;
    try {
      a23 = this._project(new x({ x: o25, y: n30, spatialReference: i23.spatialReference }), t22);
    } catch (h12) {
      r5() || s.getLogger(this).warn(new s4("mapview:spatial-reference-change", "could not project the view's center to the new spatial reference", { center: a23 == null ? void 0 : a23.toJSON(), spatialReference: t22, error: h12 }));
    }
    a23 || (a23 = new x({ x: 0, y: 0, spatialReference: t22 }));
    const p22 = gt(new l5({ targetGeometry: new x(), scale: 0, rotation: 0 }), i23.viewpoint, a23);
    s19.viewpoint = p22;
    try {
      const e22 = 20, r24 = [i23.size[0] / 2, i23.size[1] / 2], o26 = [r24[0] + e22, r24[1]], n31 = i23.toMap([0, 0], o26), { x: a24, y: c24 } = this._project(new x({ x: n31[0], y: n31[1], spatialReference: i23.spatialReference }), t22);
      n31[0] = a24, n31[1] = c24, s19.toScreen(n31, n31);
      const h12 = yt(r24, n31, o26), l20 = Math.hypot(n31[0] - r24[0], n31[1] - r24[1]) / e22;
      !Number.isFinite(l20) || Math.abs(l20) > 4 ? (p22.rotation = 0, p22.targetGeometry = new x({ x: 0, y: 0, spatialReference: t22 })) : (p22.scale *= l20, p22.scale > has("mapview-srswitch-adjust-rotation-scale-threshold") ? p22.rotation = 0 : p22.rotation += Number.isFinite(h12) ? h12 : 0);
    } catch {
    }
    (_a = this._get("constraints")) == null ? void 0 : _a.constrain(p22, void 0), this._get("state").viewpoint = p22;
  }
  resize(t22, e22) {
    var _a;
    if (!this.ready)
      return;
    const i23 = this.state;
    let s19 = this.state.paddedViewState.viewpoint;
    const r24 = this.state.paddedViewState.size.concat();
    i23.size = [t22, e22], xt(s19, s19, r24, this.state.paddedViewState.size, this.resizeAlign), s19 = ((_a = this.constraints) == null ? void 0 : _a.constrain(s19, void 0)) ?? s19, this.state.viewpoint = s19;
  }
  toMap(t22) {
    if (!this.ready)
      return null;
    const e22 = [0, 0], [i23, s19] = this.state.toMap(e22, [t22.x, t22.y]), r24 = this.state.spatialReference;
    return new x({ x: i23, y: s19, spatialReference: r24 });
  }
  toScreen(t22, e22) {
    if (!this.ready)
      return null;
    const i23 = this._project(t22, this.state.spatialReference), s19 = [i23.x, i23.y];
    return false === (e22 == null ? void 0 : e22.pickClosestTarget) ? this.state.toScreen(s19, s19) : this.state.toScreenClosest(s19, s19), c4(s19[0], s19[1]);
  }
  _project(t22, e22) {
    var _a;
    const i23 = (t22 == null ? void 0 : t22.targetGeometry) || t22;
    if (!e22)
      return t22;
    if (!i23)
      return null;
    if (e22.imageCoordinateSystem || ((_a = i23.spatialReference) == null ? void 0 : _a.imageCoordinateSystem))
      return t22;
    if (d4(e22, i23.spatialReference))
      return t22;
    const r24 = b2(i23, e22);
    if (!r24)
      throw new s2("mapview:projection-not-possible", "projecting input geometry to target spatial reference returned a null value", { geometry: i23, spatialReference: e22 });
    return V3(t22) ? (t22.targetGeometry = r24, t22) : r24;
  }
};
function V3(t22) {
  return "esri.Viewpoint" === (t22 == null ? void 0 : t22.declaredClass);
}
e([y({ type: x })], z4.prototype, "center", null), e([y()], z4.prototype, "constraints", void 0), e([y({ type: M })], z4.prototype, "extent", null), e([y({ value: { top: 0, right: 0, bottom: 0, left: 0 }, cast: (t22) => ({ top: 0, right: 0, bottom: 0, left: 0, ...t22 }) })], z4.prototype, "padding", null), e([y()], z4.prototype, "ready", void 0), e([y()], z4.prototype, "resizeAlign", void 0), e([y({ readOnly: true })], z4.prototype, "resolution", null), e([y({ type: Number })], z4.prototype, "rotation", null), e([y({ type: Number })], z4.prototype, "scale", null), e([y({ readOnly: true })], z4.prototype, "state", void 0), e([y({ type: l5 })], z4.prototype, "viewpoint", null), e([y()], z4.prototype, "zoom", null), z4 = e([c2("esri.views.2d.ViewStateManager")], z4);

// node_modules/@arcgis/core/views/input/handlers/support.js
function t14(t22, r24) {
  switch (r24) {
    case "primary":
      return "touch" === t22.pointerType || 0 === t22.button;
    case "secondary":
      return "touch" !== t22.pointerType && 2 === t22.button;
    case "tertiary":
      return "touch" !== t22.pointerType && 1 === t22.button;
  }
}

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleClickZoom.js
var a14 = class extends i10 {
  constructor(t22, i23) {
    super(true), this._view = t22, this.registerIncoming("double-click", i23, (t23) => this._handleDoubleClick(t23, i23));
  }
  _handleDoubleClick(t22, a23) {
    t14(t22.data, "primary") && (t22.stopPropagation(), a23 ? this._view.mapViewNavigation.zoomOut([t22.data.x, t22.data.y]) : this._view.mapViewNavigation.zoomIn([t22.data.x, t22.data.y]));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleTapDragZoom.js
var e12 = class extends i10 {
  constructor(t22, e22, a23) {
    super(true), this.view = t22, this.pointerType = e22, this.registerIncoming("double-tap-drag", a23, (t23) => this._handleDoubleTapDrag(t23));
  }
  _handleDoubleTapDrag(t22) {
    const { data: e22 } = t22, { pointerType: a23 } = e22;
    if (a23 !== this.pointerType)
      return;
    t22.stopPropagation();
    const { action: s19, delta: i23 } = e22, { view: r24 } = this, { mapViewNavigation: n30 } = r24;
    switch (s19) {
      case "begin": {
        const { scale: t23 } = r24;
        this._startScale = t23, this._currentScale = t23, this._previousDelta = i23, n30.begin();
        break;
      }
      case "update": {
        if (this._previousDelta.y === i23.y)
          return;
        this._previousDelta = i23;
        const t23 = 1.015 ** i23.y, e23 = this._startScale * t23, a24 = e23 / this._currentScale;
        n30.setViewpointImmediate(a24), this._currentScale = e23;
        break;
      }
      case "end": {
        const { constraints: t23 } = r24, { effectiveLODs: e23, snapToZoom: a24 } = t23;
        if (!a24 || !e23)
          return void n30.end();
        const s20 = t23.snapScale(this._currentScale), o25 = (i23.y > 0 ? Math.max(s20, t23.snapToPreviousScale(this._startScale)) : Math.min(s20, t23.snapToNextScale(this._startScale))) / this._currentScale;
        n30.zoom(o25);
        break;
      }
    }
  }
};

// node_modules/@arcgis/core/views/input/DragEventSeparator.js
var t15 = class {
  constructor(t22) {
    this._callbacks = t22, this._currentCount = 0, this._callbacks.condition || (this._callbacks.condition = () => true);
  }
  handle(t22) {
    const s19 = t22.data, i23 = s19.pointers.size;
    switch (s19.action) {
      case "start":
        this._currentCount = i23, this._emitStart(t22);
        break;
      case "added":
        this._emitEnd(this._previousEvent), this._currentCount = i23, this._emitStart(t22);
        break;
      case "update":
        this._emitUpdate(t22);
        break;
      case "removed":
        this._startEvent && this._emitEnd(this._previousEvent), this._currentCount = i23, this._emitStart(t22);
        break;
      case "end":
        this._emitEnd(t22), this._currentCount = 0;
    }
    this._previousEvent = t22;
  }
  _emitStart(t22) {
    var _a, _b;
    this._startEvent = t22, ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t22)) && this._callbacks.start(this._currentCount, t22, this._startEvent);
  }
  _emitUpdate(t22) {
    var _a, _b;
    ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t22)) && this._callbacks.update(this._currentCount, t22, this._startEvent);
  }
  _emitEnd(t22) {
    var _a, _b;
    ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t22)) && this._callbacks.end(this._currentCount, t22, this._startEvent), this._startEvent = null;
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragPan.js
var n22 = class extends i10 {
  constructor(t22, i23, a23) {
    super(true), this.view = t22, this.pointerAction = i23, this.registerIncoming("drag", a23, (t23) => this._handleDrag(t23)), this.registerIncoming("pointer-down", () => this.stopMomentumNavigation());
  }
  onInstall(i23) {
    super.onInstall(i23), this._dragEventSeparator = new t15({ start: (t22, i24) => {
      this.view.mapViewNavigation.pan.begin(this.view, i24.data), i24.stopPropagation();
    }, update: (t22, i24) => {
      this.view.mapViewNavigation.pan.update(this.view, i24.data), i24.stopPropagation();
    }, end: (t22, i24) => {
      this.view.mapViewNavigation.pan.end(this.view, i24.data), i24.stopPropagation();
    }, condition: (t22, i24) => 1 === t22 && t14(i24.data, this.pointerAction) });
  }
  _handleDrag(t22) {
    const i23 = this.view.mapViewNavigation;
    i23.pinch.zoomMomentum || i23.pinch.rotateMomentum ? this.stopMomentumNavigation() : this._dragEventSeparator.handle(t22);
  }
  stopMomentumNavigation() {
    this.view.mapViewNavigation.pan.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragRotate.js
var o16 = class extends i10 {
  constructor(a23, o25, r24) {
    super(true), this._view = a23, this.pointerAction = o25;
    const e22 = this._view.mapViewNavigation;
    this._dragEventSeparator = new t15({ start: (t22, a24) => {
      e22.rotate.begin(this._view, a24.data), a24.stopPropagation();
    }, update: (t22, a24) => {
      e22.rotate.update(this._view, a24.data), a24.stopPropagation();
    }, end: (t22, a24) => {
      e22.rotate.end(), a24.stopPropagation();
    }, condition: (t22, a24) => 1 === t22 && t14(a24.data, this.pointerAction) }), this.registerIncoming("drag", r24, (t22) => this._dragEventSeparator.handle(t22));
  }
};

// node_modules/@arcgis/core/views/navigation/gamepadAndKeyboardUtils.js
function n23(t22) {
  let n30 = t22 * t22;
  return t22 < 0 && (n30 *= -1), n30;
}
function a15(t22) {
  return t22.translation[0] = 0, t22.translation[1] = 0, t22.translation[2] = 0, t22.heading = 0, t22.tilt = 0, t22;
}
function i20(a23, i23, o25) {
  const s19 = o25, e22 = a23.state, r24 = a23.device, l20 = "forward-down" === i23.tiltDirection ? 1 : -1, c24 = 1;
  return "standard" === r24.deviceType ? (s19.translation[0] = n23(e22.axes[0]), s19.translation[1] = n23(e22.axes[1]), s19.translation[2] = n23(e22.buttons[7]) - n23(e22.buttons[6]), s19.heading = n23(e22.axes[2]), s19.tilt = n23(e22.axes[3])) : "spacemouse" === r24.deviceType && (s19.translation[0] = 1.2 * n23(e22.axes[0]), s19.translation[1] = 1.2 * n23(e22.axes[1]), s19.translation[2] = 2 * -n23(e22.axes[2]), s19.heading = 1.2 * n23(e22.axes[5]), s19.tilt = 1.2 * n23(e22.axes[3])), s19.tilt *= l20, g3(s19.translation, s19.translation, c24), s19;
}
function s14(t22) {
  return 0 === t22.translation[0] && 0 === t22.translation[1] && 0 === t22.translation[2] && 0 === t22.heading && 0 === t22.tilt && 0 === t22.zoom;
}

// node_modules/@arcgis/core/views/2d/input/handlers/GamepadNavigation.js
var d12 = class extends i10 {
  constructor(i23) {
    super(true), this._view = i23, this._frameTask = null, this._watchHandles = new e2(), this._currentDevice = null, this._transformation = { translation: [0, 0, 0], heading: 0, tilt: 0, zoom: 0 }, this._handle = this.registerIncoming("gamepad", (t22) => this._handleGamePadEvent(t22)), this._handle.pause();
  }
  onInstall(t22) {
    super.onInstall(t22), this._watchHandles.add([d3(() => {
      var _a;
      return (_a = this._view.navigation.gamepad) == null ? void 0 : _a.enabled;
    }, (t23) => {
      t23 ? (this._handle.resume(), this._frameTask || (this._frameTask = v({ update: (t24) => this._frameUpdate(t24.deltaTime) }))) : (this._handle.pause(), this._frameTask && (this._frameTask.remove(), this._frameTask = null));
    }, P)]);
  }
  onUninstall() {
    this._watchHandles.removeAll(), this._frameTask && (this._frameTask.remove(), this._frameTask = null), super.onUninstall();
  }
  _handleGamePadEvent(t22) {
    const i23 = this._view.navigation.gamepad.device;
    i23 && t22.data.device !== i23 || this._currentDevice && this._currentDevice !== t22.data.device || ("end" === t22.data.action ? (this._currentDevice = null, a15(this._transformation)) : (this._currentDevice = t22.data.device, i20(t22.data, this._view.navigation.gamepad, this._transformation)));
  }
  _frameUpdate(t22) {
    const i23 = this._transformation;
    if (s14(i23))
      return;
    const e22 = this._view.viewpoint.clone(), a23 = this._view.navigation.gamepad.velocityFactor, r24 = _7 * a23 * t22;
    At(e22, e22, [i23.translation[0] * r24, -i23.translation[1] * r24]);
    const o25 = 1 + i23.translation[2] * c14 * t22, h12 = this._view.constraints.rotationEnabled ? -i23.heading * m10 * t22 : 0, d18 = this._view.size, v9 = [d18[0] / 2, d18[1]];
    jt(e22, e22, o25, h12, v9, d18);
    const p22 = this._view.constraints.constrain(e22, this._view.viewpoint);
    this._view.viewpoint = p22;
  }
};
var m10 = 0.06;
var _7 = 0.7;
var c14 = 6e-4;

// node_modules/@arcgis/core/views/input/VisibilityChange.js
function e13(e22) {
  const i23 = () => e22("visible" === document.visibilityState);
  return document.addEventListener("visibilitychange", i23), { remove: () => document.addEventListener("visibilitychange", i23) };
}

// node_modules/@arcgis/core/views/2d/input/handlers/KeyPan.js
var e14 = class extends i10 {
  constructor(i23, e22, s19) {
    super(true), this.view = i23, this.keys = e22, this._isSticky = false, this._pressedKeys = /* @__PURE__ */ new Set(), this._timeout = void 0, this._currentDirection = void 0, this._stickyKeyDuration = 200, this._handleKey = (i24) => {
      const t22 = this._keyMap[i24.data.key];
      if (i24.modifiers.has("Meta") || i24.modifiers.has("Ctrl"))
        return void this._stopMovement();
      if (null == t22)
        return;
      i24.stopPropagation(), i24.preventDefault();
      const e23 = "key-down" === i24.type;
      if (this._pressedKeys[e23 ? "add" : "delete"](t22), e23) {
        if (this._direction === t22)
          return;
        this._direction = t22, this._isSticky = false, this._setTimeout(() => {
          this._isSticky && this._handlePopKey();
        });
      } else {
        const i25 = void 0 === this._timeout, t23 = this._pressedKeys.size > 0;
        i25 || t23 ? this._handlePopKey() : this._isSticky = true;
      }
    }, this._handlePopKey = () => {
      this._direction = Array.from(this._pressedKeys).pop(), null == this._direction && this._stopMovement();
    }, this._stopMovement = () => {
      this._isSticky = false, this._direction = void 0, this._pressedKeys.clear(), this._setTimeout(void 0);
    }, this._keyMap = { [e22.left]: "left", [e22.right]: "right", [e22.up]: "up", [e22.down]: "down" }, this.registerIncoming("key-down", s19, this._handleKey), this.registerIncoming("key-up", s19, this._handleKey), this.registerIncoming("blur", s19, this._stopMovement), this._visibilityHandle = e13((i24) => i24 ? null : this._stopMovement());
  }
  onUninstall() {
    var _a;
    this._stopMovement(), (_a = this._visibilityHandle) == null ? void 0 : _a.remove();
  }
  get _direction() {
    return this._currentDirection;
  }
  set _direction(i23) {
    const t22 = null != this._currentDirection;
    if (null != i23) {
      if (t22 || this.view.mapViewNavigation.begin(), this._currentDirection !== i23)
        switch (i23) {
          case "left":
            this.view.mapViewNavigation.continousPanLeft();
            break;
          case "right":
            this.view.mapViewNavigation.continousPanRight();
            break;
          case "up":
            this.view.mapViewNavigation.continousPanUp();
            break;
          case "down":
            this.view.mapViewNavigation.continousPanDown();
        }
    } else
      t22 && this.view.mapViewNavigation.stop();
    this._currentDirection = i23;
  }
  _setTimeout(i23) {
    clearTimeout(this._timeout), this._timeout = void 0 === i23 ? void 0 : setTimeout(() => {
      this._timeout = void 0, i23();
    }, this._stickyKeyDuration);
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyRotate.js
var t16 = class extends i10 {
  constructor(e22, t22, s19) {
    super(true), this.view = e22, this.keys = t22, this._pressed = false, this._keyToDirection = { [t22.clockwiseOption1]: "clockwise", [t22.clockwiseOption2]: "clockwise", [t22.counterClockwiseOption1]: "counterClockwise", [t22.counterClockwiseOption2]: "counterClockwise", [t22.resetOption1]: "reset", [t22.resetOption2]: "reset" }, this.registerIncoming("key-down", s19, (e23) => this._handleKeyDown(e23)), this.registerIncoming("key-up", s19, (e23) => this._handleKeyUp(e23)), this.registerIncoming("blur", s19, () => this._handleStop()), this._visibilityHandle = e13((e23) => e23 ? null : this._handleStop());
  }
  onUninstall() {
    var _a;
    (_a = this._visibilityHandle) == null ? void 0 : _a.remove(), this._handleStop();
  }
  _handleKeyDown(e22) {
    e22.data.repeat || this._handleKey(e22, true);
  }
  _handleKeyUp(e22) {
    this._handleKey(e22, false);
  }
  _handleStop() {
    this._pressed && (this._pressed = false, this.view.mapViewNavigation.stop());
  }
  _handleKey(e22, i23) {
    const t22 = e22.modifiers;
    if (t22.size > 0 && !t22.has("Shift") || !this.view.constraints.rotationEnabled)
      return;
    const s19 = this._keyToDirection[e22.data.key];
    if (this._pressed = null != s19, this._pressed) {
      if (e22.preventDefault(), i23)
        switch (this.view.mapViewNavigation.begin(), s19) {
          case "clockwise":
            this.view.mapViewNavigation.continousRotateClockwise();
            break;
          case "counterClockwise":
            this.view.mapViewNavigation.continousRotateCounterclockwise();
            break;
          case "reset":
            this.view.mapViewNavigation.resetRotation();
        }
      else
        this._pressed = false, this.view.mapViewNavigation.stop();
      e22.stopPropagation();
    }
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyZoom.js
var t17;
!function(o25) {
  o25[o25.IN = 0] = "IN", o25[o25.OUT = 1] = "OUT";
}(t17 || (t17 = {}));
var e15 = class extends i10 {
  constructor(o25, e22, i23) {
    super(true), this.view = o25, this.keys = e22, this._keysToZoomAction = {}, this.registerIncoming("key-down", i23, (o26) => this._handleKeyDown(o26)), e22.zoomIn.forEach((o26) => this._keysToZoomAction[o26] = t17.IN), e22.zoomOut.forEach((o26) => this._keysToZoomAction[o26] = t17.OUT);
  }
  _handleKeyDown(o25) {
    this._handleKey(o25);
  }
  _handleKey(o25) {
    const e22 = o25.modifiers;
    if (e22.size > 0 && !e22.has("Shift"))
      return;
    const { key: i23 } = o25.data;
    if (!(i23 in this._keysToZoomAction))
      return;
    const n30 = this._keysToZoomAction[i23], { mapViewNavigation: s19 } = this.view;
    let r24 = null;
    switch (n30) {
      case t17.IN:
        r24 = s19.zoomIn();
        break;
      case t17.OUT:
        r24 = s19.zoomOut();
        break;
      default:
        return;
    }
    s19.begin(), r24.then(() => s19.end()), o25.stopPropagation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/MouseWheelZoom.js
var t18 = 0.6;
var o17 = class extends i10 {
  constructor(e22, t22) {
    super(true), this._view = e22, this._canZoom = true, this.registerIncoming("mouse-wheel", t22, (e23) => this._handleMouseWheel(e23));
  }
  _handleMouseWheel(e22) {
    if (!this._view.navigation.mouseWheelZoomEnabled)
      return;
    if (e22.preventDefault(), e22.stopPropagation(), !this._canZoom)
      return;
    const o25 = this._view.mapViewNavigation, { x: n30, y: i23, deltaY: s19 } = e22.data, a23 = 1 / t18 ** (1 / 60 * s19), h12 = o25.zoom(a23, [n30, i23]);
    h12 && (this._canZoom = false, h12.catch(() => {
    }).then(() => {
      this._canZoom = true, o25.end();
    }));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/PinchAction.js
var a16 = class extends i10 {
  constructor(i23) {
    super(true), this.view = i23, this.registerIncoming("drag", (t22) => this._handleDrag(t22)), this.registerIncoming("pointer-down", () => this._stopMomentumNavigation());
    const a23 = this.view.mapViewNavigation;
    this._dragEventSeparator = new t15({ start: (t22, i24) => {
      a23.pinch.begin(this.view, i24.data), i24.stopPropagation();
    }, update: (t22, i24) => {
      a23.pinch.update(this.view, i24.data), i24.stopPropagation();
    }, end: (t22, i24) => {
      a23.pinch.end(this.view), i24.stopPropagation();
    }, condition: (t22) => t22 >= 2 });
  }
  _handleDrag(t22) {
    this._dragEventSeparator.handle(t22);
  }
  _stopMomentumNavigation() {
    this.view.mapViewNavigation.pinch.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/input/gamepad/GamepadState.js
function t19(t22) {
  const n30 = t22.native;
  return n30 ? { buttons: n30.buttons.map((t23) => t23.pressed ? t23.value || 1 : 0), axes: n30.axes.map((n31) => s15(n31, t22.axisThreshold)) } : { buttons: [], axes: [] };
}
function n24(t22, n30) {
  if (t22.axes.length !== n30.axes.length)
    return false;
  if (t22.buttons.length !== n30.buttons.length)
    return false;
  for (let e22 = 0; e22 < t22.axes.length; e22++)
    if (t22.axes[e22] !== n30.axes[e22])
      return false;
  for (let e22 = 0; e22 < t22.buttons.length; e22++)
    if (t22.buttons[e22] !== n30.buttons[e22])
      return false;
  return true;
}
function e16(t22) {
  for (let n30 = 0; n30 < t22.axes.length; n30++)
    if (0 !== t22.axes[n30])
      return false;
  for (let n30 = 0; n30 < t22.buttons.length; n30++)
    if (0 !== t22.buttons[n30])
      return false;
  return true;
}
function s15(t22, n30) {
  const e22 = Math.abs(t22);
  return e22 < n30 ? 0 : Math.sign(t22) * (e22 - n30) / (1 - n30);
}

// node_modules/@arcgis/core/views/input/gamepad/GamepadSource.js
var a17 = class {
  constructor(e22, t22) {
    this._element = e22, this._input = t22, this._hasEventListeners = false, this._onConnectGamepad = (e23) => {
      this._connectGamepad(e23.gamepad);
    }, this._onDisconnectGamepad = (e23) => {
      const t23 = e23.gamepad, i24 = t23.index, n31 = this._inputDevices[i24];
      n31 && (this._emitGamepadEvent(t23, t19(n31), false), this._inputDevices.splice(i24, 1), this._latestUpdate.splice(i24, 1), this._input.gamepad.devices.remove(n31), this.ensurePollingState());
    }, this._frameTask = null, this._latestUpdate = new Array(), this._inputDevices = new Array(), this._callback = null;
    const i23 = "getGamepads" in window.navigator, n30 = window.isSecureContext;
    this.supported = i23 && n30, this.supported && (this._forEachGamepad((e23) => this._connectGamepad(e23)), window.addEventListener("gamepadconnected", this._onConnectGamepad), window.addEventListener("gamepaddisconnected", this._onDisconnectGamepad), this.ensurePollingState());
  }
  destroy() {
    this.hasEventListeners = false, this.supported && (window.removeEventListener("gamepadconnected", this._onConnectGamepad), window.removeEventListener("gamepaddisconnected", this._onDisconnectGamepad));
  }
  set hasEventListeners(e22) {
    this._hasEventListeners !== e22 && (this._hasEventListeners = e22, this.ensurePollingState());
  }
  get _eventsEnabled() {
    return this.supported && this._inputDevices.length > 0 && this._hasEventListeners;
  }
  set onEvent(e22) {
    this._callback = e22;
  }
  _connectGamepad(e22) {
    const s19 = new a4(e22);
    "unknown" !== s19.deviceType && (this._inputDevices[e22.index] = s19, this._input.gamepad.devices.add(s19)), this.ensurePollingState();
  }
  ensurePollingState() {
    this._eventsEnabled ? this._startPolling() : this._stopPolling();
  }
  _startPolling() {
    null == this._frameTask && (this._frameTask = v({ update: () => this._readGamepadState() }));
  }
  _stopPolling() {
    null != this._frameTask && (this._frameTask.remove(), this._frameTask = null, this._latestUpdate = new Array());
  }
  _readGamepadState() {
    const e22 = document.hasFocus(), t22 = this._element.contains(document.activeElement), a23 = "document" === this._input.gamepad.enabledFocusMode && !e22 || "view" === this._input.gamepad.enabledFocusMode && !t22;
    this._forEachGamepad((e23) => {
      const t23 = this._inputDevices[e23.index];
      if (!t23)
        return;
      const d18 = this._latestUpdate[e23.index], o25 = t19(t23), r24 = a23 || e16(o25);
      if (d18) {
        if (d18.timestamp === e23.timestamp)
          return;
        if (!d18.active && r24)
          return;
        if (n24(d18.state, o25))
          return;
      }
      this._emitGamepadEvent(e23, o25, !r24);
    });
  }
  _forEachGamepad(e22) {
    const t22 = window.navigator.getGamepads();
    for (let s19 = 0; s19 < t22.length; s19++) {
      const i23 = t22[s19];
      this._validate(i23) && e22(i23);
    }
  }
  _emitGamepadEvent(e22, t22, s19) {
    const i23 = this._latestUpdate[e22.index], n30 = i23 && i23.active;
    if (!n30 && !s19)
      return;
    const a23 = !n30 && s19 ? "start" : n30 && s19 ? "update" : "end";
    this._latestUpdate[e22.index] = { timestamp: e22.timestamp, state: t22, active: s19 }, this._callback && this._callback({ device: this._inputDevices[e22.index], state: t22, action: a23 });
  }
  _validate(e22) {
    if (!e22)
      return false;
    if (!e22.connected)
      return false;
    for (let t22 = 0; t22 < e22.axes.length; t22++)
      if (isNaN(e22.axes[t22]))
        return false;
    return true;
  }
};

// node_modules/@arcgis/core/views/input/BrowserEventSource.js
var o18 = has("edge");
var a18 = has("chrome");
var s16 = has("ff");
var r16 = has("safari");
var h6 = "esri-view-surface";
var l15 = { touchNone: `${h6}--touch-none`, touchPan: `${h6}--touch-pan` };
var c15 = class _c {
  constructor(e22, t22) {
    this._input = t22, this._active = {}, this._callback = () => {
    }, this._activePointerCaptures = /* @__PURE__ */ new Set(), this._keyDownState = /* @__PURE__ */ new Set(), this._eventId = 1, this._browserTouchPanningEnabled = false, this._element = e22, e22.getAttribute("tabindex") || e22.setAttribute("tabindex", "0"), this._eventHandlers = { "key-down": this._handleKey, "key-up": this._handleKey, "pointer-down": this._handlePointer, "pointer-move": this._handlePointerPreventDefault, "pointer-up": this._handlePointerPreventDefault, "pointer-enter": this._handlePointer, "pointer-leave": this._handlePointer, "pointer-cancel": this._handlePointer, "mouse-wheel": this._handleMouseWheel, "pointer-capture-lost": this._handlePointerCaptureLost }, this._updateTouchAction(), this._element.addEventListener("keydown", this._preventAltKeyDefault), this._gamepadSource = new a17(e22, this._input), this._gamepadSource.onEvent = (e23) => this._callback("gamepad", e23);
  }
  destroy() {
    this._callback = () => {
    }, this.activeEvents = null, this._activePointerCaptures.forEach((e22) => {
      this._releasePointerCaptureSafe(e22);
    }), this._gamepadSource = u(this._gamepadSource), this._activePointerCaptures = null, this._removeTouchAction(), this._element.removeEventListener("keydown", this._preventAltKeyDefault);
  }
  get browserTouchPanningEnabled() {
    return this._browserTouchPanningEnabled;
  }
  set browserTouchPanningEnabled(e22) {
    this._browserTouchPanningEnabled = e22, this._updateTouchAction(), this._updateTouchEventHandling();
  }
  set onEventReceived(e22) {
    this._callback = e22;
  }
  set activeEvents(e22) {
    for (const t22 in this._active)
      if (!e22 || !e22.has(t22)) {
        const e23 = this._active[t22];
        this._element.removeEventListener(u9[t22], e23), delete this._active[t22];
      }
    e22 && e22.forEach((e23) => {
      if (!this._active[e23] && u9[e23]) {
        const t22 = (this._eventHandlers[e23] || this._handleDefault).bind(this, e23);
        this._element.addEventListener(u9[e23], t22), this._active[e23] = t22;
      }
    }), this._gamepadSource.hasEventListeners = (e22 == null ? void 0 : e22.has("gamepad")) ?? false;
  }
  setPointerCapture(e22, t22) {
    t22 ? this._setPointerCatpureSafe(e22.pointerId) : (this._releasePointerCaptureSafe(e22.pointerId), this._activePointerCaptures.delete(e22.pointerId));
  }
  _updateTouchAction() {
    this._element.classList.remove(this._browserTouchPanningEnabled ? l15.touchNone : l15.touchPan), this._element.classList.add(this._browserTouchPanningEnabled ? l15.touchPan : l15.touchNone);
  }
  _updateTouchEventHandling() {
    this._browserTouchPanningEnabled ? this._element.addEventListener("touchmove", this._preventMultiTouchPanning) : this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _removeTouchAction() {
    this._element.classList.remove(l15.touchNone), this._element.classList.remove(l15.touchPan), this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _setPointerCatpureSafe(e22) {
    try {
      this._element.setPointerCapture(e22), this._activePointerCaptures.add(e22);
    } catch {
    }
  }
  _releasePointerCaptureSafe(e22) {
    try {
      if (this._element.hasPointerCapture && !this._element.hasPointerCapture(e22))
        return;
      this._element.releasePointerCapture(e22);
    } catch (t22) {
    }
  }
  _updateNormalizedPointerLikeEvent(e22, t22) {
    const n30 = i15(this._element, e22);
    return _c.test.disableSubpixelCoordinates && (n30.x = Math.round(n30.x), n30.y = Math.round(n30.y)), t22.x = n30.x, t22.y = n30.y, t22;
  }
  _handleKey(e22, n30) {
    const i23 = o8(n30);
    i23 && "key-up" === e22 && this._keyDownState.delete(i23);
    const o25 = { native: n30, key: i23, repeat: !!i23 && this._keyDownState.has(i23) };
    i23 && "key-down" === e22 && this._keyDownState.add(o25.key), this._callback(e22, o25);
  }
  _handlePointer(e22, t22) {
    const n30 = this._updateNormalizedPointerLikeEvent(t22, { native: t22, x: 0, y: 0, pointerType: t22.pointerType, button: t22.button, buttons: t22.buttons, eventId: this._eventId++ });
    this._callback(e22, n30);
  }
  _handlePointerPreventDefault(e22, t22) {
    const n30 = this._updateNormalizedPointerLikeEvent(t22, { native: t22, x: 0, y: 0, pointerType: t22.pointerType, button: t22.button, buttons: t22.buttons, eventId: this._eventId++ });
    t22.preventDefault(), this._callback(e22, n30);
  }
  _handleMouseWheel(e22, t22) {
    let n30 = t22.deltaY;
    switch (t22.deltaMode) {
      case 0:
        o18 && (n30 = n30 / document.documentElement.clientHeight * 600);
        break;
      case 1:
        n30 *= 30;
        break;
      case 2:
        n30 *= 900;
    }
    o18 ? n30 *= 0.7 : a18 || r16 ? n30 *= 0.6 : s16 && (n30 *= 1.375);
    const i23 = 100, h12 = Math.abs(n30);
    if (h12 > i23) {
      const e23 = 0.02;
      n30 = n30 / h12 * 200 / (1 + Math.exp(-e23 * (h12 - i23)));
    }
    const l20 = this._updateNormalizedPointerLikeEvent(t22, { native: t22, x: 0, y: 0, deltaY: n30 });
    this._callback(e22, l20);
  }
  _handlePointerCaptureLost(e22, t22) {
    this._activePointerCaptures.delete(t22.pointerId), this._handleDefault(e22, t22);
  }
  _handleDefault(e22, t22) {
    const n30 = { native: t22 };
    t22.preventDefault(), this._callback(e22, n30);
  }
  _preventAltKeyDefault(e22) {
    "Alt" === e22.key && e22.preventDefault();
  }
  _preventMultiTouchPanning(e22) {
    e22.touches.length > 1 && e22.preventDefault();
  }
};
c15.test = { disableSubpixelCoordinates: false };
var u9 = { "key-down": "keydown", "key-up": "keyup", "pointer-down": "pointerdown", "pointer-up": "pointerup", "pointer-move": "pointermove", "mouse-wheel": "wheel", "pointer-capture-got": "gotpointercapture", "pointer-capture-lost": "lostpointercapture", "context-menu": "contextmenu", "pointer-enter": "pointerenter", "pointer-leave": "pointerleave", "pointer-cancel": "pointercancel", focus: "focus", blur: "blur" };

// node_modules/@arcgis/core/views/input/handlers/PreventContextMenu.js
var e17 = class extends i10 {
  constructor() {
    super(true), this.registerIncoming("context-menu", (t22) => {
      t22.data.native.preventDefault();
    });
  }
};

// node_modules/@arcgis/core/views/input/recognizers/support.js
var t20 = { maximumClickDelay: 300, movementUntilMouseDrag: 1.5, movementUntilPenDrag: 6, movementUntilTouchDrag: 6, holdDelay: 500, maximumDoubleClickDelay: 250, maximumDoubleClickDistance: 10, maximumDoubleTouchDelay: 350, maximumDoubleTouchDistance: 35 };
function n25(e22, t22) {
  return Math.abs(t22.x - e22.x) + Math.abs(t22.y - e22.y);
}
function r17(e22, t22) {
  const n30 = t22.x - e22.x, r24 = t22.y - e22.y;
  return Math.sqrt(n30 * n30 + r24 * r24);
}
function o19(t22, n30) {
  if (n30 ? (n30.radius = 0, n30.center.x = 0, n30.center.y = 0) : n30 = { radius: 0, center: c4() }, 0 === t22.length)
    return n30;
  if (1 === t22.length)
    return n30.center.x = t22[0].x, n30.center.y = t22[0].y, n30;
  if (2 === t22.length) {
    const [e22, r25] = t22, [o26, u15] = [r25.x - e22.x, r25.y - e22.y];
    return n30.radius = Math.sqrt(o26 * o26 + u15 * u15) / 2, n30.center.x = (e22.x + r25.x) / 2, n30.center.y = (e22.y + r25.y) / 2, n30;
  }
  let r24 = 0, o25 = 0;
  for (let e22 = 0; e22 < t22.length; e22++)
    r24 += t22[e22].x, o25 += t22[e22].y;
  r24 /= t22.length, o25 /= t22.length;
  const u14 = t22.map((e22) => e22.x - r24), c24 = t22.map((e22) => e22.y - o25);
  let i23 = 0, a23 = 0, l20 = 0, m15 = 0, s19 = 0, x2 = 0, y6 = 0;
  for (let e22 = 0; e22 < u14.length; e22++) {
    const t23 = u14[e22], n31 = c24[e22], r25 = t23 * t23, o26 = n31 * n31;
    i23 += r25, a23 += o26, l20 += t23 * n31, m15 += r25 * t23, s19 += o26 * n31, x2 += t23 * o26, y6 += n31 * r25;
  }
  const h12 = 0.5 * (m15 + x2), D2 = 0.5 * (s19 + y6), g10 = i23 * a23 - l20 * l20, f14 = (h12 * a23 - D2 * l20) / g10, b6 = (i23 * D2 - l20 * h12) / g10, p22 = c4(f14 + r24, b6 + o25);
  return { radius: Math.sqrt(f14 * f14 + b6 * b6 + (i23 + a23) / t22.length), center: p22 };
}
function u10(e22) {
  const { native: t22 } = e22, { pointerId: n30, button: r24, pointerType: o25 } = t22;
  return "mouse" === o25 ? `${n30}:${r24}` : `${o25}`;
}

// node_modules/@arcgis/core/views/input/recognizers/DoubleTapDrag.js
var p15 = class extends i10 {
  constructor(e22 = t20.maximumDoubleClickDelay, a23 = t20.maximumDoubleClickDistance, r24 = t20.maximumDoubleTouchDelay, n30 = t20.maximumDoubleTouchDistance, u14 = o3) {
    super(false), this._maximumDoubleClickDelay = e22, this._maximumDoubleClickDistance = a23, this._maximumDoubleTouchDelay = r24, this._maximumDoubleTouchDistance = n30, this._clock = u14, this._doubleTapDragReady = false, this._doubleTapDragActive = false, this._dragStartCenter = c4(0, 0), this._pointerState = /* @__PURE__ */ new Map(), this._doubleTapDrag = this.registerOutgoing("double-tap-drag"), this._dragEventSeparator = new t15({ start: (t22, e23) => this._dragStart(t22, e23), update: (t22, e23) => this._dragUpdate(e23), end: (t22, e23) => this._dragEnd(e23) }), this.registerIncoming("drag", (t22) => this._dragEventSeparator.handle(t22)), this.registerIncoming("pointer-down", (t22) => this._handlePointerDown(t22)), this.registerIncoming("pointer-up", () => this._handlePointerUp());
  }
  onUninstall() {
    this._pointerState.forEach((t22) => {
      t22.doubleTapTimeout = l(t22.doubleTapTimeout);
    });
  }
  get hasPendingInputs() {
    return n2(this._pointerState, (t22) => null != t22.doubleTapTimeout);
  }
  _clearPointerDown(t22) {
    const e22 = this._pointerState.get(t22);
    e22 && (e22.doubleTapTimeout = l(e22.doubleTapTimeout), this._pointerState.delete(t22), this.refreshHasPendingInputs());
  }
  _createDoubleTapDragData(t22, e22, a23) {
    const { button: i23, buttons: o25, pointer: r24, pointers: s19, pointerType: n30, timestamp: u14 } = a23;
    return { action: t22, delta: e22, button: i23, buttons: o25, pointer: r24, pointers: s19, pointerType: n30, timestamp: u14 };
  }
  _dragStart(t22, e22) {
    if (!this._doubleTapDragReady || 1 !== t22)
      return;
    this._doubleTapDragReady = false, this._doubleTapDragActive = true;
    const { data: a23, modifiers: o25 } = e22, { center: r24 } = a23;
    this._dragStartCenter = r24;
    const s19 = this._createDoubleTapDragData("begin", c4(0, 0), a23);
    this._doubleTapDrag.emit(s19, void 0, o25), e22.stopPropagation();
  }
  _dragUpdate(t22) {
    if (!this._doubleTapDragActive)
      return;
    const { data: e22, modifiers: a23 } = t22, { center: o25 } = e22, r24 = c4(o25.x - this._dragStartCenter.x, o25.y - this._dragStartCenter.y), s19 = this._createDoubleTapDragData("update", r24, e22);
    this._doubleTapDrag.emit(s19, void 0, a23), t22.stopPropagation();
  }
  _dragEnd(t22) {
    if (!this._doubleTapDragActive)
      return;
    const { data: e22, modifiers: a23 } = t22, { center: o25 } = e22, r24 = c4(o25.x - this._dragStartCenter.x, o25.y - this._dragStartCenter.y), s19 = this._createDoubleTapDragData("end", r24, e22);
    this._doubleTapDrag.emit(s19, void 0, a23), this._doubleTapDragActive = false, t22.stopPropagation();
  }
  _handlePointerDown(t22) {
    const { data: e22 } = t22, a23 = u10(e22), i23 = this._pointerState.get(a23), { pointerType: o25 } = e22.native;
    if (i23) {
      const r24 = "touch" === o25 ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
      this._clearPointerDown(a23), n25(i23.event.data, e22) > r24 ? this._storePointerDown(t22) : this._doubleTapDragReady = true;
    } else
      this._storePointerDown(t22);
  }
  _handlePointerUp() {
    this._doubleTapDragReady = false;
  }
  _storePointerDown(t22) {
    const { data: e22 } = t22, { pointerType: a23 } = e22.native, i23 = u10(e22), o25 = "touch" === a23 ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay, r24 = this._clock.setTimeout(() => this._clearPointerDown(i23), o25);
    this._pointerState.set(i23, { event: t22, doubleTapTimeout: r24 }), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/Drag.js
var s17 = class extends i10 {
  constructor(t22) {
    super(false), this._navigationTouch = t22, this._startStateModifiers = /* @__PURE__ */ new Set(), this._activePointerMap = /* @__PURE__ */ new Map(), this._isDragging = false, this._isCurrentDragSuppressed = false, this._drag = this.registerOutgoing("drag"), this.registerIncoming("pointer-drag", this._handlePointerDrag.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-capture-lost", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-cancel", this._handlePointerUpAndPointerLost.bind(this));
  }
  _createPayload(t22, e22, i23, n30) {
    return { action: t22, pointerType: this._pointerType, button: this._mouseButton, buttons: e22.buttons, timestamp: n30, pointers: o20(this._activePointerMap), pointer: e22, angle: i23.angle, radius: i23.radius, center: i23.center };
  }
  _addPointer(t22) {
    const e22 = t22.native.pointerId, i23 = a19(this._activePointerMap).angle, n30 = { event: t22, initialAngle: 0, lastAngle: 0 };
    this._activePointerMap.set(e22, n30);
    const s19 = h7(n30, r18(this._activePointerMap));
    n30.initialAngle = s19, n30.lastAngle = s19, this._updatePointerAngles(i23);
  }
  _updatePointer(t22) {
    if (t22 && null == t22.x && null == t22.y)
      return;
    const e22 = t22.native.pointerId, i23 = this._activePointerMap.get(e22);
    i23 ? i23.event = t22 : this._addPointer(t22);
  }
  _removePointer(t22) {
    const e22 = a19(this._activePointerMap).angle;
    this._activePointerMap.delete(t22), this._updatePointerAngles(e22);
  }
  _updatePointerAngles(t22) {
    const e22 = a19(this._activePointerMap);
    this._activePointerMap.forEach((i23) => {
      i23.initialAngle = h7(i23, e22) - t22, i23.lastAngle = h7(i23, e22) - t22;
    });
  }
  _emitEvent(t22, e22, i23) {
    const n30 = a19(this._activePointerMap);
    this._drag.emit(this._createPayload(t22, e22, n30, i23), void 0, this._startStateModifiers);
  }
  _handlePointerUpAndPointerLost(t22) {
    const i23 = t22.data.native.pointerId, n30 = n(t22.timestamp);
    this._activePointerMap.get(i23) && (1 === this._activePointerMap.size ? (this._updatePointer(t22.data), !this._isCurrentDragSuppressed && this._emitEvent("end", t22.data, n30), this._isDragging = false, this._isCurrentDragSuppressed = false, this._removePointer(i23)) : (this._removePointer(i23), this._emitEvent("removed", t22.data, n(t22.timestamp))));
  }
  _handlePointerDrag(t22) {
    const i23 = t22.data, n30 = i23.currentEvent, s19 = n(t22.timestamp);
    switch (i23.action) {
      case "start":
      case "update":
        this._isDragging ? this._activePointerMap.has(n30.native.pointerId) ? (this._updatePointer(n30), !this._isCurrentDragSuppressed && this._emitEvent("update", n30, s19)) : (this._addPointer(n30), this._emitEvent("added", n30, s19), this._isCurrentDragSuppressed = this._isSuppressed) : (this._updatePointer(n30), this._pointerType = t22.data.startEvent.pointerType, this._mouseButton = t22.data.startEvent.button, this._startStateModifiers = t22.modifiers, this._isDragging = true, this._isCurrentDragSuppressed = this._isSuppressed, !this._isCurrentDragSuppressed && this._emitEvent("start", n30, s19));
    }
  }
  get _isSuppressed() {
    return !!this._navigationTouch && !this._navigationTouch.browserTouchPanEnabled && "touch" === this._pointerType && 1 === this._activePointerMap.size;
  }
};
function r18(e22) {
  const i23 = [];
  return e22.forEach((e23) => {
    i23.push(c4(e23.event.x, e23.event.y));
  }), o19(i23);
}
function a19(t22) {
  const e22 = r18(t22);
  let i23 = 0;
  return t22.forEach((t23) => {
    let n30 = h7(t23, e22), s19 = n30 - t23.lastAngle;
    for (; s19 > Math.PI; )
      s19 -= 2 * Math.PI;
    for (; s19 < -Math.PI; )
      s19 += 2 * Math.PI;
    n30 = t23.lastAngle + s19, t23.lastAngle = n30;
    const r24 = n30 - t23.initialAngle;
    i23 += r24;
  }), i23 /= t22.size || 1, { angle: i23, radius: e22.radius, center: e22.center };
}
function o20(t22) {
  const e22 = /* @__PURE__ */ new Map();
  return t22.forEach((t23, i23) => e22.set(i23, t23.event)), e22;
}
function h7(t22, e22) {
  const i23 = t22.event, n30 = i23.x - e22.center.x, s19 = i23.y - e22.center.y;
  return Math.atan2(s19, n30);
}
var p16;
!function(t22) {
  t22[t22.Left = 0] = "Left", t22[t22.Middle = 1] = "Middle", t22[t22.Right = 2] = "Right", t22[t22.Back = 3] = "Back", t22[t22.Forward = 4] = "Forward", t22[t22.Undefined = -1] = "Undefined";
}(p16 || (p16 = {}));

// node_modules/@arcgis/core/views/input/recognizers/ImmediateDoubleClick.js
var m11 = class extends i10 {
  constructor(e22 = t20.maximumDoubleClickDelay, o25 = t20.maximumDoubleClickDistance, a23 = t20.maximumDoubleTouchDelay, m15 = t20.maximumDoubleTouchDistance, n30 = o3) {
    super(false), this._maximumDoubleClickDelay = e22, this._maximumDoubleClickDistance = o25, this._maximumDoubleTouchDelay = a23, this._maximumDoubleTouchDistance = m15, this._clock = n30, this._pointerState = /* @__PURE__ */ new Map(), this._immediateDoubleClick = this.registerOutgoing("immediate-double-click"), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUp.bind(this));
  }
  onUninstall() {
    this._pointerState.forEach((t22) => {
      t22.immediateDoubleClick && t22.immediateDoubleClick.timeoutHandle.remove();
    }), super.onUninstall();
  }
  _handlePointerDown(t22) {
    const e22 = t22.data, i23 = u10(e22);
    if (!this._pointerState.has(i23)) {
      const t23 = { downButton: e22.native.button, x: e22.x, y: e22.y, immediateDoubleClick: null };
      this._pointerState.set(i23, t23), this.startCapturingPointer(e22.native);
    }
  }
  _handlePointerUp(t22) {
    const e22 = t22.data, i23 = u10(e22), m15 = this._pointerState.get(i23);
    if (m15 && m15.downButton === e22.native.button) {
      const i24 = m15.immediateDoubleClick, o25 = "touch" === t22.data.native.pointerType ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
      i24 ? (i24.timeoutHandle.remove(), n25(i24, t22.data) > o25 ? this._startImmediateDoubleClick(t22, m15) : (this._immediateDoubleClick.emit(t22.data, void 0, i24.modifiers), this._removeState(e22))) : n25(m15, t22.data) > o25 ? this._removeState(e22) : this._startImmediateDoubleClick(t22, m15);
    }
  }
  _startImmediateDoubleClick(t22, e22) {
    const i23 = "touch" === t22.data.native.pointerType ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay;
    e22.immediateDoubleClick = { x: t22.data.x, y: t22.data.y, modifiers: t22.modifiers, timeoutHandle: this._clock.setTimeout(() => this._removeState(t22.data), i23) };
  }
  _removeState(t22) {
    const e22 = u10(t22);
    this._pointerState.delete(e22), this.stopCapturingPointer(t22.native), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/PointerClickHoldAndDrag.js
var r19 = class extends i10 {
  constructor(e22 = t20.maximumClickDelay, i23 = t20.movementUntilMouseDrag, o25 = t20.movementUntilPenDrag, r24 = t20.movementUntilTouchDrag, s19 = t20.holdDelay, a23 = o3) {
    super(false), this._maximumClickDelay = e22, this._movementUntilMouseDrag = i23, this._movementUntilPenDrag = o25, this._movementUntilTouchDrag = r24, this._holdDelay = s19, this._clock = a23, this._pointerState = /* @__PURE__ */ new Map(), this._pointerDrag = this.registerOutgoing("pointer-drag"), this._immediateClick = this.registerOutgoing("immediate-click"), this._pointerHold = this.registerOutgoing("hold"), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this)), this.registerIncoming("pointer-up", (t22) => {
      this._handlePointerLoss(t22, "pointer-up");
    }), this.registerIncoming("pointer-capture-lost", (t22) => {
      this._handlePointerLoss(t22, "pointer-capture-lost");
    }), this.registerIncoming("pointer-cancel", (t22) => {
      this._handlePointerLoss(t22, "pointer-cancel");
    }), this._moveHandle = this.registerIncoming("pointer-move", this._handlePointerMove.bind(this)), this._moveHandle.pause();
  }
  onUninstall() {
    this._pointerState.forEach((t22) => {
      t22.holdTimeout = l(t22.holdTimeout);
    }), super.onUninstall();
  }
  _handlePointerDown(t22) {
    const e22 = t22.data, i23 = e22.native.pointerId;
    let n30 = null;
    0 === this._pointerState.size && (n30 = this._clock.setTimeout(() => {
      const e23 = this._pointerState.get(i23);
      if (e23) {
        if (!e23.isDragging) {
          const i24 = e23.previousEvent;
          this._pointerHold.emit(i24, void 0, t22.modifiers), e23.holdEmitted = true;
        }
        e23.holdTimeout = null;
      }
    }, this._holdDelay));
    const o25 = { startEvent: e22, previousEvent: e22, startTimestamp: t22.timestamp, isDragging: false, downButton: e22.native.button, holdTimeout: n30, modifiers: /* @__PURE__ */ new Set() };
    this._pointerState.set(i23, o25), this.startCapturingPointer(e22.native), this._moveHandle.resume(), this._pointerState.size > 1 && this._startDragging(t22);
  }
  _createPointerDragData(t22, e22, i23) {
    return { action: t22, startEvent: e22.startEvent, previousEvent: e22.previousEvent, currentEvent: i23 };
  }
  _handlePointerMove(t22) {
    const e22 = t22.data, i23 = e22.native.pointerId, n30 = this._pointerState.get(i23);
    if (n30) {
      if (n30.isDragging)
        this._pointerDrag.emit(this._createPointerDragData("update", n30, e22), void 0, n30.modifiers);
      else {
        r17(e22, n30.startEvent) > this._getDragThreshold(e22.native.pointerType) && this._startDragging(t22);
      }
      n30.previousEvent = e22;
    }
  }
  _getDragThreshold(t22) {
    switch (t22) {
      case "touch":
        return this._movementUntilTouchDrag;
      case "pen":
        return this._movementUntilPenDrag;
      default:
        return this._movementUntilMouseDrag;
    }
  }
  _startDragging(t22) {
    const e22 = t22.data, i23 = e22.native.pointerId;
    this._pointerState.forEach((n30) => {
      null != n30.holdTimeout && (n30.holdTimeout.remove(), n30.holdTimeout = null), n30.isDragging || (n30.modifiers = t22.modifiers, n30.isDragging = true, i23 === n30.startEvent.native.pointerId ? this._pointerDrag.emit(this._createPointerDragData("start", n30, e22)) : this._pointerDrag.emit(this._createPointerDragData("start", n30, n30.previousEvent), t22.timestamp));
    });
  }
  _handlePointerLoss(t22, e22) {
    const i23 = t22.data, n30 = i23.native.pointerId, o25 = this._pointerState.get(n30);
    if (o25) {
      if (null != o25.holdTimeout && (o25.holdTimeout.remove(), o25.holdTimeout = null), o25.isDragging)
        this._pointerDrag.emit(this._createPointerDragData("end", o25, "pointer-up" === e22 ? i23 : o25.previousEvent), void 0, o25.modifiers);
      else if ("pointer-up" === e22 && o25.downButton === i23.native.button) {
        t22.timestamp - o25.startTimestamp <= this._maximumClickDelay && !o25.holdEmitted && this._immediateClick.emit(i23);
      }
      this._pointerState.delete(n30), this.stopCapturingPointer(i23.native), 0 === this._pointerState.size && this._moveHandle.pause();
    }
  }
};

// node_modules/@arcgis/core/views/input/recognizers/SingleAndDoubleClick.js
var r20 = class extends i10 {
  constructor(t22 = t20.maximumDoubleClickDelay, i23 = t20.maximumDoubleClickDistance, o25 = t20.maximumDoubleTouchDelay, s19 = t20.maximumDoubleTouchDistance, l20 = o3) {
    super(false), this._maximumDoubleClickDelay = t22, this._maximumDoubleClickDistance = i23, this._maximumDoubleTouchDelay = o25, this._maximumDoubleTouchDistance = s19, this._clock = l20, this._pointerState = /* @__PURE__ */ new Map(), this._click = this.registerOutgoing("click"), this._doubleClick = this.registerOutgoing("double-click"), this.registerIncoming("immediate-click", this._handleImmediateClick.bind(this)), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this));
  }
  onUninstall() {
    this._pointerState.forEach((e22) => e22.doubleClickTimer = l(e22.doubleClickTimer));
  }
  get hasPendingInputs() {
    return n2(this._pointerState, (e22) => null != e22.doubleClickTimer);
  }
  _clearDoubleClickTimer(e22, t22) {
    const o25 = this._pointerState.get(e22);
    o25 && (o25.doubleClickTimer = l(o25.doubleClickTimer), t22 && this._click.emit(o25.event.data, void 0, o25.event.modifiers), this._pointerState.delete(e22), this.refreshHasPendingInputs());
  }
  _doubleClickTimeoutExceeded(e22) {
    const t22 = this._pointerState.get(e22);
    1 === t22.pointerDownCount && this._click.emit(t22.event.data, void 0, t22.event.modifiers), t22.doubleClickTimer = null, this._pointerState.delete(e22), this.refreshHasPendingInputs();
  }
  _getPointerId(e22) {
    const { pointerId: t22, pointerType: i23, button: o25 } = e22.native;
    return "mouse" === i23 ? `${t22}:${o25}` : `${i23}`;
  }
  _handleImmediateClick(e22) {
    const t22 = e22.data, { pointerType: i23 } = t22.native, o25 = this._getPointerId(t22);
    if (!this._pointerState.has(o25))
      return void this._startClick(e22);
    const n30 = this._pointerState.get(o25), { data: l20, modifiers: r24 } = n30.event, c24 = "touch" === i23 ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
    n25(l20, t22) > c24 ? (this._clearDoubleClickTimer(o25, true), this._startClick(e22)) : (this._clearDoubleClickTimer(o25, false), 2 === n30.pointerDownCount && this._doubleClick.emit(l20, void 0, r24));
  }
  _handlePointerDown(e22) {
    const t22 = u10(e22.data), i23 = this._pointerState.get(t22);
    i23 && (i23.pointerDownCount += 1);
  }
  _startClick(e22) {
    const { data: t22 } = e22, { native: { pointerType: i23 } } = t22, o25 = u10(t22), n30 = "touch" === i23 ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay, s19 = this._clock.setTimeout(() => this._doubleClickTimeoutExceeded(o25), n30), r24 = 1;
    this._pointerState.set(o25, { event: e22, doubleClickTimer: s19, pointerDownCount: r24 }), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/2d/input/MapViewInputManager.js
var b3 = { counter: "Ctrl", pan: { left: "ArrowLeft", right: "ArrowRight", up: "ArrowUp", down: "ArrowDown" }, zoom: { zoomIn: ["=", "+"], zoomOut: ["-", "_"] }, rotate: { clockwiseOption1: "a", clockwiseOption2: "A", counterClockwiseOption1: "d", counterClockwiseOption2: "D", resetOption1: "n", resetOption2: "N" } };
var z5 = class extends g {
  initialize() {
    const e22 = () => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ready;
    };
    this.addHandles([p(() => !e22(), () => this._disconnect()), p(e22, () => this._connect())]);
  }
  destroy() {
    this._disconnect();
  }
  get latestPointerType() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerType;
  }
  get latestPointerLocation() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerLocation;
  }
  get multiTouchActive() {
    var _a;
    return ((_a = this._inputManager) == null ? void 0 : _a.multiTouchActive) ?? false;
  }
  _disconnect() {
    this.view.viewEvents.disconnect(), this._inputManager = u(this._inputManager);
  }
  _connect() {
    const e22 = this.view.surface, t22 = new c15(e22, this.view.input), o25 = [new m11(), new r19(), new r20(), new s17(this.view.navigation), new p15()], r24 = new d7({ eventSource: t22, recognizers: o25 });
    r24.installHandlers("prevent-context-menu", [new e17()], _3.INTERNAL), r24.installHandlers("navigation", [new a16(this.view), new d12(this.view), new o17(this.view), new a14(this.view), new a14(this.view, [b3.counter]), new n22(this.view, "primary"), new e14(this.view, b3.pan), new e15(this.view, b3.zoom), new t16(this.view, b3.rotate), new o16(this.view, "secondary"), new e12(this.view, "touch")], _3.INTERNAL), this.view.viewEvents.connect(r24), this._source = t22, this._inputManager = r24, d3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.navigation) == null ? void 0 : _b.browserTouchPanEnabled;
    }, (e23) => {
      this._source && (this._source.browserTouchPanningEnabled = !e23);
    }, P);
  }
  get test() {
    return { inputManager: this._inputManager };
  }
};
e([y()], z5.prototype, "view", void 0), e([y()], z5.prototype, "latestPointerType", null), e([y()], z5.prototype, "latestPointerLocation", null), e([y()], z5.prototype, "multiTouchActive", null), z5 = e([c2("esri.views.2d.input.MapViewInputManager")], z5);
var k3 = z5;

// node_modules/@arcgis/core/views/2d/support/hitTestUtils.js
async function l16(e22, t22, l20) {
  const p22 = o13(t22) ? r12(e22, t22) : t22;
  if (!e22.ready || isNaN(p22.x) || isNaN(p22.y))
    return { screenPoint: p22, results: [] };
  let d18 = /* @__PURE__ */ new Set();
  const f14 = /* @__PURE__ */ new Set();
  let u14 = false, y6 = null, h12 = null;
  (l20 == null ? void 0 : l20.include) ? n26(l20.include, s18(e22, (e23) => {
    d18.add(e23), c16(e23, (e24) => f14.add(e24));
  }, (e23, r24) => {
    f14.add(e23), d18.add(r24);
  }, (e23) => {
    y6 || (y6 = /* @__PURE__ */ new Set()), y6.add(e23);
  }, (e23) => d18.add(e23), () => u14 = true)) : (u14 = true, d18 = new Set(e22.allLayerViews), d18.forEach((e23) => {
    c16(e23, (e24) => f14.add(e24));
  })), (l20 == null ? void 0 : l20.exclude) && n26(l20.exclude, s18(e22, (e23) => {
    d18.delete(e23), c16(e23, (e24) => f14.delete(e24));
  }, (e23) => f14.delete(e23), (e23) => {
    h12 || (h12 = /* @__PURE__ */ new Set()), h12.add(e23);
  }));
  const g10 = e22.allLayerViews.filter((e23) => !e23.suspended && d18.has(e23)).reverse(), w6 = e22.toMap(p22);
  let m15 = [...u14 ? e22.graphicsView.hitTest(w6).map((e23) => ({ type: "graphic", graphic: e23, layer: null, mapPoint: w6 })) : [], ...await Promise.all(g10.map((e23) => e23.hitTest(w6, p22)).toArray())].filter(k).flat().filter(k);
  return m15 = m15.filter((e23) => {
    var _a;
    return "graphic" !== e23.type || "subtype-group" !== ((_a = e23.layer) == null ? void 0 : _a.type) || f14.has(e23.graphic.layer);
  }), y6 && (m15 = m15.filter((e23) => !("graphic" in e23) || !e23.graphic || (y6 == null ? void 0 : y6.has(o21(e23.graphic))))), h12 && (m15 = m15.filter((e23) => !("graphic" in e23) || !e23.graphic || !(h12 == null ? void 0 : h12.has(o21(e23.graphic))))), { screenPoint: p22, results: m15 };
}
function s18(r24, t22, a23, i23, l20, s19) {
  return (n30) => {
    if (n30 instanceof c6) {
      if (n30.layer === r24)
        s19 == null ? void 0 : s19();
      else {
        const e22 = r24.allLayerViews.find((e23) => e23.layer === n30.layer);
        e22 && (l20 == null ? void 0 : l20(e22));
      }
      i23(o21(n30));
    } else if ("subtype-sublayer" === n30.type) {
      const e22 = r24.allLayerViews.find((e23) => e23.layer === n30.parent);
      e22 && a23(n30, e22);
    } else {
      const e22 = r24.allLayerViews.find((e23) => e23.layer === n30);
      e22 && t22(e22);
    }
  };
}
function n26(e22, r24) {
  if (e22)
    if (t(e22))
      for (const a23 of e22)
        if (t(a23))
          for (const e23 of a23)
            r24(e23);
        else
          r24(a23);
    else
      r24(e22);
}
function o21(e22) {
  var _a, _b;
  const r24 = e22.getObjectId();
  return r24 ? `${((_a = e22.layer) == null ? void 0 : _a.uid) ?? ((_b = e22.sourceLayer) == null ? void 0 : _b.uid) ?? "MapView"}/${r24}` : `"MapView/${e22.uid}`;
}
function c16({ layer: e22 }, r24) {
  "subtype-group" === e22.type && e22.sublayers.forEach((e23) => {
    r24(e23);
  });
}

// node_modules/@arcgis/core/views/2d/support/screenshotUtils.js
var e18 = { flipY: true, premultipliedAlpha: true };
async function o22(h12, n30) {
  const o25 = await a20(h12, n30), { format: r24, quality: l20 } = c7(n30 == null ? void 0 : n30.format, n30 == null ? void 0 : n30.quality);
  return a2(o25, { format: r24, quality: l20, rotation: 0, disableDecorations: false }, e18);
}
async function r21(t22, i23) {
  const n30 = await a20(t22, i23);
  return r11(n30, e18);
}
function a20(t22, i23) {
  const h12 = d13(i23 || {}, u11(t22.stage, t22.size), t22.size, t22.padding), n30 = l17(i23, t22.allLayerViews);
  return t22.stage.takeScreenshot(h12, n30, t22.backgroundColor, i23 == null ? void 0 : i23.rotation);
}
function l17(t22 = {}, i23) {
  if (!t22.layers)
    return;
  const h12 = [];
  return t22.layers.forEach((t23) => {
    const n30 = i23.find((i24) => i24.layer.id === t23.id);
    (n30 == null ? void 0 : n30.container) && h12.push(n30.container);
  }), h12;
}
function u11(t22, i23) {
  return Math.min(4, s8(i23, Math.min(4096, t22.context.parameters.maxTextureSize)));
}
function d13(t22, i23, h12, n30) {
  t22.ignorePadding && (n30 = { left: 0, right: 0, top: 0, bottom: 0 });
  let e22 = null;
  null != t22.width && null != t22.height ? e22 = [t22.width, t22.height] : null == t22.width && null != t22.height ? e22 = [t22.height, t22.height] : null != t22.width && null == t22.height ? e22 = [t22.width, t22.width] : null == t22.width && null == t22.height && (e22 = null);
  const o25 = h12[0] - (n30.left + n30.right), r24 = h12[1] - (n30.top + n30.bottom);
  let a23, l20, u14 = t22.area || { x: 0, y: 0, width: o25, height: r24 };
  if (e22) {
    const t23 = o25 / r24, i24 = e22[0] / e22[1];
    if (i24 > t23) {
      const t24 = u14.width / i24;
      u14 = { x: u14.x, y: Math.round(u14.y + (u14.height - t24) / 2), width: u14.width, height: Math.round(t24) };
    } else {
      const t24 = u14.height * i24;
      u14 = { x: Math.round(u14.x + (u14.width - t24) / 2), y: u14.y, width: Math.round(t24), height: u14.height };
    }
  } else
    e22 = [u14.width, u14.height];
  return e22[0] > u14.width ? (a23 = Math.min(e22[0] / u14.width, i23), l20 = e22[0] / u14.width / a23) : (a23 = 1, l20 = e22[0] / u14.width), { cropArea: { x: Math.round((u14.x + n30.left) * a23), y: Math.round((u14.y + n30.top) * a23), width: Math.round(u14.width * a23), height: Math.round(u14.height * a23) }, outputScale: l20, resolutionScale: a23 };
}

// node_modules/@arcgis/core/views/2d/support/StationaryManager.js
var o23 = 160;
var i21 = class extends g {
  constructor() {
    super(...arguments), this._timer = void 0;
  }
  get stationary() {
    return !this._timer;
  }
  flip() {
    this._timestamp = performance.now(), null == this._timer && (this._timer = setInterval(() => {
      performance.now() - this._timestamp >= o23 && this.clear();
    }, o23));
  }
  clear() {
    this._timer && (clearInterval(this._timer), this._timer = void 0);
  }
};
e([y()], i21.prototype, "_timer", void 0), e([y()], i21.prototype, "stationary", null), i21 = e([c2("esri.views.2d.support.StationaryManager")], i21);

// node_modules/@arcgis/core/views/support/WebGLRequirements.js
function i22(i23) {
  const s19 = n12(i23);
  if (!s19.available)
    return new s2("webgl:required", "3d" === i23 ? "WebGL2 is required but not supported." : "WebGL is required but not supported.", new Error().stack);
  if ("3d" === i23 && s19.majorPerformanceCaveat)
    return new s2("webgl:major-performance-caveat-detected", "Your WebGL implementation doesn't seem to support hardware accelerated rendering. Check your browser settings or if your GPU is in a blocklist.");
  if (!s19.supportsHighPrecisionFragment)
    return new s2("webgl:high-precision-fragment-required", "WebGL support for high precision fragment shaders is required but not supported.");
  if (!s19.supportsVertexShaderSamplers)
    return new s2("webgl:vertex-shader-samplers-required", "WebGL support for vertex shader samplers is required but not supported.");
  if (s19.type === n10.WEBGL1) {
    if (!s19.supportsElementIndexUint)
      return new s2("webgl:element-index-uint-required", "WebGL support for uint vertex indices is required but not supported.");
    if (!s19.supportsStandardDerivatives)
      return new s2("webgl:standard-derivatives-required", "WebGL support for standard derivatives is required but not supported.");
    if (!s19.supportsInstancedArrays)
      return new s2("webgl:instanced-arrays-required", "WebGL support for instanced rendering is required but not supported.");
  }
  return null;
}

// node_modules/@arcgis/core/views/ui/Component.js
function n27(t22) {
  return t22 && "nodeType" in t22;
}
function d14(t22) {
  return t22 && "function" == typeof t22.render;
}
var c17 = { component: "esri-component" };
var p17 = class extends g {
  constructor() {
    super(...arguments), this.widget = null;
  }
  destroy() {
    var _a;
    this.node = null, (_a = this.widget) == null ? void 0 : _a.destroy();
  }
  get id() {
    var _a, _b;
    return this._get("id") ?? ((_a = this.widget) == null ? void 0 : _a.id) ?? ((_b = this.node) == null ? void 0 : _b.id);
  }
  set id(t22) {
    this._set("id", t22);
  }
  set node(t22) {
    const o25 = this._get("node");
    t22 !== o25 && (t22 && t22.classList.add(c17.component), o25 && o25.classList.remove(c17.component), this._set("node", t22));
  }
  castNode(t22) {
    var _a;
    return (_a = this.widget) == null ? void 0 : _a.destroy(), t22 ? "string" == typeof t22 || n27(t22) ? (this._set("widget", null), e5(t22)) : (d14(t22) && !t22.domNode && (t22.domNode = document.createElement("div")), this._set("widget", t22), t22.domNode) : (this._set("widget", null), null);
  }
};
e([y()], p17.prototype, "id", null), e([y()], p17.prototype, "node", null), e([s5("node")], p17.prototype, "castNode", null), e([y({ readOnly: true })], p17.prototype, "widget", void 0), p17 = e([c2("esri.views.ui.Component")], p17);
var l18 = p17;

// node_modules/@arcgis/core/views/ui/UI.js
var f12 = { left: 0, top: 0, bottom: 0, right: 0 };
var _8 = { bottom: 30, top: 15, right: 15, left: 15 };
var g8 = "esri-ui";
var y4 = { ui: g8, corner: `${g8}-corner`, innerContainer: `${g8}-inner-container`, manualContainer: `${g8}-manual-container`, cornerContainer: `${g8}-corner-container`, topLeft: `${g8}-top-left`, topRight: `${g8}-top-right`, bottomLeft: `${g8}-bottom-left`, bottomRight: `${g8}-bottom-right` };
function C4(t22) {
  return t22 && !t22._started && "function" == typeof t22.postMixInProperties && "function" == typeof t22.buildRendering && "function" == typeof t22.postCreate && "function" == typeof t22.startup;
}
function v8(t22) {
  return 0 === t22 ? "0" : `${t22}px`;
}
function b4(t22) {
  const o25 = "object" == typeof t22 && null !== t22 && Object.getPrototypeOf(t22);
  return (null === o25 || o25 === Object.prototype) && ("component" in t22 || "index" in t22 || "position" in t22) ? t22 : null;
}
function w5(t22, { top: o25, bottom: n30, left: i23, right: e22 }) {
  t22.style.top = o25, t22.style.bottom = n30, t22.style.left = i23, t22.style.right = e22;
}
var P3 = class extends o4.EventedAccessor {
  constructor(t22) {
    super(t22), this._cornerNameToContainerLookup = {}, this._positionNameToContainerLookup = {}, this._components = new Array(), this._componentMap = /* @__PURE__ */ new Map(), this._locale = c3(), this.view = null, this._applyViewPadding = () => {
      const t23 = this.container;
      t23 && w5(t23, this._toPixelPosition(this._getViewPadding()));
    }, this._applyUIPadding = () => {
      const t23 = this._innerContainer;
      t23 && w5(t23, this._toPixelPosition(this.padding));
    }, this._initContainers();
  }
  initialize() {
    this.addHandles([d3(() => {
      var _a;
      return [(_a = this.view) == null ? void 0 : _a.padding, this.container];
    }, this._applyViewPadding, P), d3(() => this.padding, this._applyUIPadding, P), d3(() => [this.container, this._locale], ([t22, o25]) => {
      t22 && t22.setAttribute("lang", o25);
    }, P), f2((t22) => {
      this._locale = t22;
    })]);
  }
  destroy() {
    this.container = null;
    for (const t22 of this._components)
      t22.destroy();
    this._components.length = 0, this._componentMap.clear();
  }
  set container(t22) {
    const o25 = this._get("container");
    t22 !== o25 && (t22 && (t22.classList.add(y4.ui), n6(t22), this._attachContainers(t22)), o25 && (o25.classList.remove(y4.ui), w5(o25, { top: "", bottom: "", left: "", right: "" }), n3(o25)), this._set("container", t22));
  }
  get height() {
    var _a;
    const t22 = ((_a = this.view) == null ? void 0 : _a.height) ?? 0;
    if (0 === t22)
      return t22;
    const o25 = this._getViewPadding(), { top: n30, bottom: i23 } = o25;
    return Math.max(t22 - n30 - i23, 0);
  }
  get padding() {
    return this._get("padding");
  }
  set padding(t22) {
    this._overrideIfSome("padding", t22);
  }
  castPadding(t22) {
    return "number" == typeof t22 ? { bottom: t22, top: t22, right: t22, left: t22 } : { ..._8, ...t22 };
  }
  get width() {
    var _a;
    const t22 = ((_a = this.view) == null ? void 0 : _a.width) ?? 0;
    if (0 === t22)
      return t22;
    const o25 = this._getViewPadding(), { left: n30, right: i23 } = o25;
    return Math.max(t22 - n30 - i23, 0);
  }
  add(t22, o25) {
    let n30, i23, e22;
    if (Array.isArray(t22))
      return void t22.forEach((t23) => this.add(t23, o25));
    const r24 = b4(t22);
    r24 && ({ index: n30, position: o25, component: t22, key: i23 } = r24), o25 && "object" == typeof o25 && ({ index: n30, key: i23, position: o25, internal: e22 } = o25), !t22 || o25 && !this._isValidPosition(o25) || this._add(t22, o25, n30, i23, e22);
  }
  remove(t22, o25) {
    var _a;
    if (!t22)
      return;
    if (Array.isArray(t22))
      return t22.map((t23) => this.remove(t23, o25));
    const n30 = this._find(t22);
    if (n30) {
      if (this._componentMap.has(n30) && ((_a = this._componentMap.get(n30)) == null ? void 0 : _a.key) !== o25)
        return;
      const t23 = this._components.indexOf(n30), i23 = n30.node.parentNode;
      return i23 == null ? void 0 : i23.removeChild(n30.node), this._componentMap.delete(n30), this._components.splice(t23, 1)[0];
    }
  }
  empty(t22, o25 = { removeInternal: false }) {
    if (Array.isArray(t22)) {
      for (const n31 of t22)
        this.empty(n31, o25);
      return;
    }
    const n30 = this._positionNameToContainerLookup[t22 ?? "manual"], i23 = Array.prototype.slice.call(n30.children).map((t23) => this._findByNode(t23)).filter((t23) => {
      var _a;
      if (null == t23)
        return false;
      return !(((_a = this._componentMap.get(t23)) == null ? void 0 : _a.internal) ?? false) || o25.removeInternal;
    });
    for (const e22 of i23)
      this.remove(e22);
  }
  move(t22, o25) {
    if (Array.isArray(t22) && t22.forEach((t23) => this.move(t23, o25)), !t22)
      return;
    let n30;
    const i23 = b4(t22) || b4(o25);
    if (i23 && (n30 = i23.index, o25 = i23.position, t22 = i23.component || t22), o25 && !this._isValidPosition(o25))
      return;
    const e22 = this.remove(t22);
    e22 && this.add(e22, { position: o25, index: n30 });
  }
  find(t22) {
    if (!t22)
      return null;
    const o25 = this._findById(t22);
    return o25 && (o25.widget || o25.node);
  }
  getComponents(t22, o25 = { includeInternal: false }) {
    return t22 ? Array.isArray(t22) ? t22.flatMap((t23) => this._getComponentsAtPosition(t23, o25)) : this._getComponentsAtPosition(t22, o25) : this._components.filter((t23) => {
      var _a;
      return o25.includeInternal || !((_a = this._componentMap.get(t23)) == null ? void 0 : _a.internal);
    }).map(({ widget: t23, node: o26 }) => t23 ?? o26);
  }
  getPosition(t22) {
    for (const o25 in this._positionNameToContainerLookup) {
      if (this._positionNameToContainerLookup[o25].contains(t22))
        return o25;
    }
    return null;
  }
  _add(t22, o25, n30, i23, e22) {
    t22 instanceof l18 || (t22 = new l18({ node: t22 })), this._place({ component: t22, position: o25, index: n30 }), this._components.push(t22), this._componentMap.set(t22, { key: i23, internal: e22 });
  }
  _find(t22) {
    return t22 ? t22 instanceof l18 ? this._findByComponent(t22) : "string" == typeof t22 ? this._findById(t22) : this._findByNode(t22.domNode || t22) : null;
  }
  _getViewPadding() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.padding) ?? f12;
  }
  _attachContainers(t22) {
    t22.appendChild(this._innerContainer), t22.appendChild(this._manualContainer);
  }
  _initContainers() {
    const t22 = document.createElement("div");
    t22.classList.add(y4.innerContainer, y4.cornerContainer);
    const o25 = document.createElement("div");
    o25.classList.add(y4.innerContainer, y4.manualContainer);
    const n30 = document.createElement("div");
    n30.classList.add(y4.topLeft, y4.corner), t22.appendChild(n30);
    const i23 = document.createElement("div");
    i23.classList.add(y4.topRight, y4.corner), t22.appendChild(i23);
    const e22 = document.createElement("div");
    e22.classList.add(y4.bottomLeft, y4.corner), t22.appendChild(e22);
    const r24 = document.createElement("div");
    r24.classList.add(y4.bottomRight, y4.corner), t22.appendChild(r24), this._innerContainer = t22, this._manualContainer = o25;
    const s19 = v4();
    this._cornerNameToContainerLookup = { "top-left": n30, "top-right": i23, "bottom-left": e22, "bottom-right": r24, "top-leading": s19 ? i23 : n30, "top-trailing": s19 ? n30 : i23, "bottom-leading": s19 ? r24 : e22, "bottom-trailing": s19 ? e22 : r24 }, this._positionNameToContainerLookup = { manual: o25, ...this._cornerNameToContainerLookup };
  }
  _isValidPosition(t22) {
    return !!this._positionNameToContainerLookup[t22];
  }
  _place(t22) {
    const o25 = t22.position ?? "manual", { component: n30, index: e22 } = t22, r24 = this._positionNameToContainerLookup[o25], s19 = null != e22 && e22 > -1;
    if (C4(n30.widget) && n30.widget.startup(), !s19)
      return void r24.appendChild(n30.node);
    const a23 = Array.from(r24.children);
    if (0 === e22)
      return void (r24.firstChild ? o6(n30.node, r24.firstChild) : r24.appendChild(n30.node));
    e22 >= a23.length ? r24.appendChild(n30.node) : o6(n30.node, a23[e22]);
  }
  _toPixelPosition(t22) {
    return { top: v8(t22.top), left: v8(t22.left), right: v8(t22.right), bottom: v8(t22.bottom) };
  }
  _findByComponent(t22) {
    return this._components.find((o25) => o25 === t22) ?? null;
  }
  _findById(t22) {
    return this._components.find(({ id: o25 }) => o25 === t22) ?? null;
  }
  _findByNode(t22) {
    return this._components.find(({ node: o25 }) => o25 === t22) ?? null;
  }
  _getComponentsAtPosition(t22, n30) {
    const i23 = this._positionNameToContainerLookup[t22];
    return Array.prototype.slice.call(i23.children).map((t23) => this._findByNode(t23)).filter(k).filter((t23) => {
      var _a;
      return n30.includeInternal || !((_a = this._componentMap.get(t23)) == null ? void 0 : _a.internal);
    }).map(({ widget: t23, node: o25 }) => t23 ?? o25);
  }
};
e([y()], P3.prototype, "_locale", void 0), e([y()], P3.prototype, "container", null), e([y()], P3.prototype, "height", null), e([y({ value: _8 })], P3.prototype, "padding", null), e([s5("padding")], P3.prototype, "castPadding", null), e([y()], P3.prototype, "view", void 0), e([y()], P3.prototype, "width", null), P3 = e([c2("esri.views.ui.UI")], P3);
var L2 = P3;

// node_modules/@arcgis/core/widgets/Attribution/AttributionViewModel.js
function m12(t22, e22) {
  return t22 && "copyright" in t22 && (!e22 || "function" == typeof t22.originOf && "user" === t22.originOf("copyright"));
}
function f13(t22, e22) {
  return t22.length !== e22.length || t22.some((t23, i23) => t23.text !== e22[i23].text);
}
function y5(t22, e22, i23) {
  if (!i23 || !e22)
    return;
  t22.find((t23) => t23.layerView === e22 && t23.text === i23) || t22.push({ text: i23, layerView: e22 });
}
function b5(t22) {
  return "bing-maps" === t22.type;
}
var g9 = [];
var A4 = class extends g {
  constructor(t22) {
    super(t22), this._clear = () => {
      this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.removeHandles("suspension"), this.notifyChange("state");
    }, this._pendingAttributions = /* @__PURE__ */ new Set(), this._fetchedAttributionData = /* @__PURE__ */ new Map(), this.items = new V(), this.view = null, this._allLayerViewsChange = (t23) => {
      var _a;
      this.removeHandles("suspension");
      const e22 = (_a = this.view) == null ? void 0 : _a.allLayerViews;
      e22 && this.addHandles(e22.map((t24) => d3(() => {
        var _a2;
        return [t24.suspended, (_a2 = t24.layer) == null ? void 0 : _a2.attributionVisible];
      }, () => this._updateAttributionItems())).toArray(), "suspension"), (t23 == null ? void 0 : t23.removed) && t23.removed.forEach((t24) => {
        this._pendingAttributions.delete(t24), this._fetchedAttributionData.delete(t24);
      }), this._updateAttributionItems();
    }, this.addHandles([v3(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.allLayerViews;
    }, "change", (t23) => this._allLayerViewsChange(t23), { onListenerAdd: () => this._allLayerViewsChange(), onListenerRemove: this._clear }), p(() => {
      var _a;
      return true === ((_a = this.view) == null ? void 0 : _a.stationary);
    }, () => this._updateAttributionItems())]);
  }
  destroy() {
    this.view = null, this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.items.removeAll();
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) ? this._pendingAttributions.size > 0 ? "loading" : "ready" : "disabled";
  }
  _updateAttributionItems() {
    const t22 = this.view, e22 = t22 == null ? void 0 : t22.allLayerViews;
    g9.length = 0, t22 && e22 ? (e22.forEach((e23) => {
      var _a, _b;
      if (e23.suspended || !((_a = e23.layer) == null ? void 0 : _a.attributionVisible))
        return;
      const i23 = e23.layer;
      if (m12(i23, "user"))
        return void y5(g9, e23, i23.copyright);
      if (i23.hasAttributionData) {
        if (this._fetchedAttributionData.has(e23)) {
          const r25 = this._fetchedAttributionData.get(e23);
          return void (r25 ? y5(g9, e23, this._getDynamicAttribution(r25, t22, i23)) : m12(i23) && y5(g9, e23, i23.copyright));
        }
        return void this._fetchAttributionData(e23);
      }
      const r24 = "portalItem" in i23 ? (_b = i23.portalItem) == null ? void 0 : _b.accessInformation : void 0;
      y5(g9, e23, r24 || i23.copyright);
    }), f13(this.items, g9) && (this.items.removeAll(), this.items.addMany(g9)), g9.length = 0, this.notifyChange("state")) : this._clear();
  }
  async _fetchAttributionData(t22) {
    if (this._pendingAttributions.has(t22))
      return;
    this._pendingAttributions.add(t22);
    const e22 = await _(t22.layer.fetchAttributionData());
    if (this._pendingAttributions.has(t22)) {
      const i23 = e22.ok ? this._createContributionIndex(e22.value, b5(t22.layer)) : null;
      this._pendingAttributions.delete(t22), this._fetchedAttributionData.set(t22, i23);
    }
    this._updateAttributionItems();
  }
  _createContributionIndex(t22, e22) {
    const i23 = t22.contributors, r24 = {};
    if (!i23)
      return r24;
    for (let o25 = 0; o25 < i23.length; o25++) {
      const t23 = i23[o25], s19 = t23.coverageAreas;
      if (!s19)
        return;
      for (const i24 of s19) {
        const s20 = i24.bbox, n30 = i24.zoomMin - (e22 && i24.zoomMin ? 1 : 0), a23 = i24.zoomMax - (e22 && i24.zoomMax ? 1 : 0), c24 = new M({ xmin: s20[1], ymin: s20[0], xmax: s20[3], ymax: s20[2], spatialReference: f4.WGS84 }), h12 = { extent: d5(c24), attribution: t23.attribution || "", score: null != i24.score ? i24.score : 100, id: o25 };
        for (let t24 = n30; t24 <= a23; t24++)
          r24[t24] ?? (r24[t24] = []), r24[t24].push(h12);
      }
    }
    return r24.maxKey = Math.max.apply(null, Object.keys(r24)), r24;
  }
  _getDynamicAttribution(t22, e22, i23) {
    var _a;
    const { extent: r24, scale: o25 } = e22;
    let s19 = ((_a = i23.tileInfo) == null ? void 0 : _a.scaleToZoom(o25)) ?? 0;
    if (s19 = Math.min(t22.maxKey ?? 0, Math.round(s19)), !r24 || null == s19 || s19 <= -1)
      return "";
    const n30 = t22[s19], a23 = g2(r24.center.clone().normalize(), e22.spatialReference), c24 = /* @__PURE__ */ new Set();
    return n30 ? n30.filter((t23) => {
      const e23 = t23.id, i24 = !c24.has(e23) && a23 && t23.extent && t4(t23.extent, a23);
      return i24 && c24.add(e23), i24;
    }).sort((t23, e23) => e23.score - t23.score || t23.objectId - e23.objectId).map((t23) => t23.attribution).join(", ") : "";
  }
};
e([y({ readOnly: true, type: V })], A4.prototype, "items", void 0), e([y({ readOnly: true })], A4.prototype, "state", null), e([y()], A4.prototype, "view", void 0), A4 = e([c2("esri.widgets.Attribution.AttributionViewModel")], A4);
var _9 = A4;

// node_modules/@arcgis/core/widgets/Attribution.js
var a21 = "esri-attribution";
var h8 = { base: a21, poweredBy: `${a21}__powered-by`, sources: `${a21}__sources`, open: `${a21}--open`, sourcesOpen: `${a21}__sources--open`, link: `${a21}__link`, widgetIcon: i3.description };
var u12 = class extends O {
  constructor(e22, t22) {
    super(e22, t22), this._isOpen = false, this._attributionTextOverflowed = false, this._prevSourceNodeHeight = 0, this._resizeObserver = new ResizeObserver((e23) => e23.forEach(({ target: e24 }) => this._checkSourceTextOverflow(e24))), this.iconClass = h8.widgetIcon, this.icon = null, this.itemDelimiter = " | ", this.messages = null, this.viewModel = new _9();
  }
  initialize() {
    this.addHandles(v3(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.items;
    }, "change", () => this.scheduleRender()));
  }
  destroy() {
    var _a;
    (_a = this._resizeObserver) == null ? void 0 : _a.disconnect();
  }
  get _isInteractive() {
    return this._isOpen || this._attributionTextOverflowed;
  }
  get attributionText() {
    return this.viewModel.items.reduce((e22, t22) => (e22.includes(t22.text) || e22.push(t22.text), e22), []).join(this.itemDelimiter);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e22) {
    this._overrideIfSome("label", e22);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e22) {
    this.viewModel.view = e22;
  }
  render() {
    const e22 = { [h8.open]: this._isOpen };
    return n5("div", { bind: this, class: this.classes(h8.base, e9.widget, e22), dir: "ltr", onclick: this._toggleState, onkeydown: this._toggleState }, this._renderSourcesNode(), this._renderPoweredBy());
  }
  _renderPoweredBy() {
    return n5("div", { class: h8.poweredBy }, "Powered by", " ", n5("a", { class: h8.link, href: "http://www.esri.com/", rel: "noreferrer", target: "_blank" }, "Esri"));
  }
  _renderSourcesNode() {
    const e22 = this._isOpen, t22 = this._isInteractive, i23 = t22 ? 0 : void 0, { attributionText: r24 } = this, s19 = { [h8.sourcesOpen]: e22, [e9.interactive]: t22 };
    return n5("div", { afterCreate: this._afterSourcesNodeCreate, bind: this, class: this.classes(h8.sources, s19), innerHTML: r24, tabIndex: i23 });
  }
  _afterSourcesNodeCreate(e22) {
    this._prevSourceNodeHeight = e22.clientWidth, this._resizeObserver.observe(e22);
  }
  _checkSourceTextOverflow(e22) {
    let t22 = false;
    const { clientHeight: i23, clientWidth: r24, scrollWidth: s19 } = e22, o25 = s19 > r24, n30 = this._attributionTextOverflowed !== o25;
    if (this._attributionTextOverflowed = o25, n30 && (t22 = true), this._isOpen) {
      const e23 = i23 < this._prevSourceNodeHeight;
      this._prevSourceNodeHeight = i23, e23 && (this._isOpen = false, t22 = true);
    }
    t22 && this.scheduleRender();
  }
  _toggleState() {
    this._isInteractive && (this._isOpen = !this._isOpen);
  }
};
e([y()], u12.prototype, "_isOpen", void 0), e([y()], u12.prototype, "_isInteractive", null), e([y()], u12.prototype, "_attributionTextOverflowed", void 0), e([y()], u12.prototype, "_prevSourceNodeHeight", void 0), e([y({ readOnly: true, dependsOn: ["viewModel.items.length", "itemDelimiter"] })], u12.prototype, "attributionText", null), e([y()], u12.prototype, "iconClass", void 0), e([y()], u12.prototype, "icon", void 0), e([y()], u12.prototype, "itemDelimiter", void 0), e([y()], u12.prototype, "label", null), e([y(), e6("esri/widgets/Attribution/t9n/Attribution")], u12.prototype, "messages", void 0), e([y()], u12.prototype, "view", null), e([y({ type: _9 })], u12.prototype, "viewModel", void 0), e([t3()], u12.prototype, "_toggleState", null), u12 = e([c2("esri.widgets.Attribution")], u12);
var _10 = u12;

// node_modules/@arcgis/core/widgets/Compass/utils.js
function e19(e22) {
  var _a, _b;
  return ((_a = e22 == null ? void 0 : e22.spatialReference) == null ? void 0 : _a.isWebMercator) || ((_b = e22 == null ? void 0 : e22.spatialReference) == null ? void 0 : _b.isGeographic) || false;
}

// node_modules/@arcgis/core/widgets/Compass/CompassViewModel.js
var p18 = "esri.widgets.CompassViewModel";
var d15 = class extends t8(g) {
  constructor(t22) {
    super(t22), this.orientation = { x: 0, y: 0, z: 0 }, this.view = null, this._updateForCamera = this._updateForCamera.bind(this), this._updateForRotation = this._updateForRotation.bind(this), this._updateRotationWatcher = this._updateRotationWatcher.bind(this);
  }
  initialize() {
    this.addHandles(d3(() => this.view, this._updateRotationWatcher, P));
  }
  destroy() {
    this.view = null;
  }
  get canShowNorth() {
    return e19(this.view);
  }
  get state() {
    var _a;
    return !((_a = this.view) == null ? void 0 : _a.ready) || "2d" === this.view.type && !this.view.constraints.rotationEnabled ? "disabled" : this.canShowNorth ? "compass" : "rotation";
  }
  reset() {
    var _a, _b;
    if (!((_a = this.view) == null ? void 0 : _a.ready))
      return;
    const t22 = {};
    "2d" === ((_b = this.view) == null ? void 0 : _b.type) ? t22.rotation = 0 : t22.heading = 0, this.callGoTo({ target: t22 });
  }
  _updateForRotation(t22) {
    null != t22 && (this.orientation = { z: t22 });
  }
  _updateForCamera(t22) {
    if (!t22)
      return;
    const o25 = -t22.heading;
    this.orientation = { x: 0, y: 0, z: o25 };
  }
  _updateRotationWatcher(t22) {
    this.removeAllHandles(), t22 && this.addHandles("2d" === t22.type ? d3(() => t22 == null ? void 0 : t22.rotation, this._updateForRotation, P) : d3(() => t22 == null ? void 0 : t22.camera, this._updateForCamera, P));
  }
};
e([y({ readOnly: true })], d15.prototype, "canShowNorth", null), e([y()], d15.prototype, "orientation", void 0), e([y({ readOnly: true })], d15.prototype, "state", null), e([y()], d15.prototype, "view", void 0), d15 = e([c2(p18)], d15);
var h9 = d15;

// node_modules/@arcgis/core/widgets/Compass/css.js
var c18 = "esri-compass";
var e20 = { base: c18, widgetIcon: i3.locateCircled, iconContainer: `${c18}__icon-container` };

// node_modules/@arcgis/core/widgets/Compass.js
var c19 = class extends O {
  constructor(e22, s19) {
    super(e22, s19), this.iconClass = e20.widgetIcon, this.icon = null, this.messages = null, this.viewModel = new h9(), this._reset = () => {
      this.viewModel.reset();
    }, this._toRotationTransform = (e23) => ({ transform: `rotateZ(${e23.z}deg)` });
  }
  loadDependencies() {
    return r4({ button: () => import("./calcite-button-EKBJ2D7K.js"), icon: () => import("./calcite-icon-XJ35OAWQ.js") });
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e22) {
    this.viewModel.goToOverride = e22;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e22) {
    this._overrideIfSome("label", e22);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e22) {
    this.viewModel.view = e22;
  }
  reset() {
    return this.viewModel.reset();
  }
  render() {
    const { orientation: e22, state: s19 } = this.viewModel, t22 = "rotation" === s19 ? "arrow-up" : "compass-needle", { messages: o25 } = this;
    return n5("div", { class: this.classes(e20.base, e9.widget) }, n5("calcite-button", { "aria-label": o25.reset, class: e9.widgetButton, disabled: "disabled" === s19, kind: "neutral", onclick: this._reset, round: true, scale: "s", title: o25.reset }, n5("div", { "aria-hidden": "true", class: e20.iconContainer, title: o25.reset }, n5("calcite-icon", { icon: t22, scale: "m", styles: this._toRotationTransform(e22) }))));
  }
};
e([y()], c19.prototype, "goToOverride", null), e([y()], c19.prototype, "iconClass", void 0), e([y()], c19.prototype, "icon", void 0), e([y()], c19.prototype, "label", null), e([y(), e6("esri/widgets/Compass/t9n/Compass")], c19.prototype, "messages", void 0), e([y()], c19.prototype, "view", null), e([y({ type: h9 })], c19.prototype, "viewModel", void 0), c19 = e([c2("esri.widgets.Compass")], c19);
var d16 = c19;

// node_modules/@arcgis/core/widgets/NavigationToggle/css.js
var o24 = "esri-navigation-toggle";
var n28 = { base: o24, widgetIcon: i3.pan2, button: `${o24}__button`, activeButton: `${o24}__button--active`, panButton: `${o24}__button--pan`, rotateButton: `${o24}__button--rotate`, isLayoutHorizontal: `${o24}--horizontal` };

// node_modules/@arcgis/core/widgets/NavigationToggle/NavigationToggleViewModel.js
var r22 = class extends g {
  constructor(t22) {
    super(t22), this.navigationMode = "pan", this.view = null;
  }
  initialize() {
    this.addHandles(p(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.inputManager;
    }, () => this._setNavigationMode()));
  }
  destroy() {
    this.view = null;
  }
  get state() {
    var _a, _b;
    return ((_a = this.view) == null ? void 0 : _a.ready) && "3d" === ((_b = this.view) == null ? void 0 : _b.type) ? "ready" : "disabled";
  }
  toggle() {
    "disabled" !== this.state && (this.navigationMode = "pan" !== this.navigationMode ? "pan" : "rotate", this._setNavigationMode());
  }
  _setNavigationMode() {
    var _a;
    const t22 = (_a = this.view) == null ? void 0 : _a.inputManager;
    t22 && (t22.primaryDragAction = "pan" === this.navigationMode ? "pan" : "rotate");
  }
};
e([y({ readOnly: true })], r22.prototype, "state", null), e([y()], r22.prototype, "navigationMode", void 0), e([y()], r22.prototype, "view", void 0), r22 = e([c2("esri.widgets.NavigationToggleViewModel")], r22);
var a22 = r22;

// node_modules/@arcgis/core/widgets/NavigationToggle.js
var c20 = class extends O {
  constructor(t22, o25) {
    super(t22, o25), this.iconClass = n28.widgetIcon, this.icon = null, this.messages = null, this.viewModel = new a22();
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(t22) {
    this._overrideIfSome("label", t22);
  }
  set layout(t22) {
    "horizontal" !== t22 && (t22 = "vertical"), this._set("layout", t22);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(t22) {
    this.viewModel.view = t22;
  }
  toggle() {
    return this.viewModel.toggle();
  }
  render() {
    var _a, _b;
    const t22 = "disabled" === ((_a = this.viewModel) == null ? void 0 : _a.state), o25 = "pan" === ((_b = this.viewModel) == null ? void 0 : _b.navigationMode), e22 = { [e9.disabled]: t22, [n28.isLayoutHorizontal]: "horizontal" === this.layout }, s19 = { [n28.activeButton]: o25 }, r24 = { [n28.activeButton]: !o25 }, p22 = t22 ? -1 : 0, n30 = this.messages.toggle;
    return n5("div", { "aria-label": n30, bind: this, class: this.classes(n28.base, e9.widget, e22), onclick: this._toggle, onkeydown: this._toggle, tabIndex: p22, title: n30 }, n5("div", { class: this.classes(n28.button, e9.widgetButton, n28.panButton, s19) }, n5("span", { class: i3.pan })), n5("div", { class: this.classes(n28.button, e9.widgetButton, n28.rotateButton, r24) }, n5("span", { class: i3.rotate })));
  }
  _toggle() {
    this.toggle();
  }
};
e([y()], c20.prototype, "iconClass", void 0), e([y()], c20.prototype, "icon", void 0), e([y()], c20.prototype, "label", null), e([y({ value: "vertical" })], c20.prototype, "layout", null), e([y(), e6("esri/widgets/NavigationToggle/t9n/NavigationToggle")], c20.prototype, "messages", void 0), e([y()], c20.prototype, "view", null), e([y({ type: a22 })], c20.prototype, "viewModel", void 0), e([t3()], c20.prototype, "_toggle", null), c20 = e([c2("esri.widgets.NavigationToggle")], c20);
var d17 = c20;

// node_modules/@arcgis/core/widgets/Zoom/IconButton.js
var n29 = class extends O {
  constructor() {
    super(...arguments), this.enabled = true, this.iconClass = null, this.icon = null, this.title = "";
  }
  render() {
    const t22 = this.enabled ? 0 : -1, o25 = { [e9.disabled]: !this.enabled, [e9.interactive]: this.enabled };
    return n5("div", { bind: this, class: this.classes(e9.widgetButton, e9.widget, o25), onclick: this._triggerAction, onkeydown: this._triggerAction, role: "button", tabIndex: t22, title: this.title }, n5("span", { "aria-hidden": "true", class: this.classes(t7.icon, this.iconClass ?? ""), role: "presentation" }), n5("span", { class: i3.fontFallbackText }, this.title));
  }
  _triggerAction() {
    this.action.call(this);
  }
};
e([y()], n29.prototype, "action", void 0), e([y()], n29.prototype, "enabled", void 0), e([y()], n29.prototype, "iconClass", void 0), e([y()], n29.prototype, "icon", void 0), e([y()], n29.prototype, "title", void 0), e([t3()], n29.prototype, "_triggerAction", null), n29 = e([c2("esri.widgets.IconButton")], n29);
var l19 = n29;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions2D.js
var r23 = class extends g {
  get canZoomIn() {
    var _a, _b, _c;
    const o25 = (_a = this.view) == null ? void 0 : _a.ready;
    if (!o25)
      return false;
    const e22 = (_c = (_b = this.view) == null ? void 0 : _b.constraints) == null ? void 0 : _c.effectiveMaxScale;
    return 0 === e22 || this._scale > e22;
  }
  get canZoomOut() {
    var _a;
    const { view: o25 } = this, e22 = o25 == null ? void 0 : o25.ready;
    if (!e22)
      return false;
    const t22 = (_a = o25.constraints) == null ? void 0 : _a.effectiveMinScale;
    return 0 === t22 || this._scale < t22;
  }
  get _scale() {
    var _a, _b, _c;
    const o25 = (_b = (_a = this.view) == null ? void 0 : _a.animation) == null ? void 0 : _b.target;
    return (o25 && "then" in o25 ? void 0 : o25 == null ? void 0 : o25.scale) ?? ((_c = this.view) == null ? void 0 : _c.scale) ?? 0;
  }
};
e([y({ readOnly: true })], r23.prototype, "canZoomIn", null), e([y({ readOnly: true })], r23.prototype, "canZoomOut", null), e([y()], r23.prototype, "view", void 0), e([y()], r23.prototype, "_scale", null), r23 = e([c2("esri.widgets.Zoom.ZoomConditions2D")], r23);
var c21 = r23;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions3D.js
var t21 = class extends g {
  get canZoomIn() {
    return !!this.view.ready;
  }
  get canZoomOut() {
    return !!this.view.ready;
  }
};
e([y({ readOnly: true })], t21.prototype, "canZoomIn", null), e([y({ readOnly: true })], t21.prototype, "canZoomOut", null), e([y()], t21.prototype, "view", void 0), t21 = e([c2("esri.widgets.Zoom.ZoomConditions3D")], t21);
var c22 = t21;

// node_modules/@arcgis/core/widgets/Zoom/ZoomViewModel.js
var m13 = class extends g {
  constructor(o25) {
    super(o25);
  }
  destroy() {
    this.view = null;
  }
  get canZoomIn() {
    return null != this._zoomConditions && this._zoomConditions.canZoomIn;
  }
  get canZoomOut() {
    var _a;
    return null != this._zoomConditions && ((_a = this._zoomConditions) == null ? void 0 : _a.canZoomOut);
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) ? "ready" : "disabled";
  }
  set view(o25) {
    o25 ? "2d" === o25.type ? this._zoomConditions = new c21({ view: o25 }) : "3d" === o25.type && (this._zoomConditions = new c22({ view: o25 })) : this._zoomConditions = null, this._set("view", o25);
  }
  zoomIn() {
    if (!this.canZoomIn)
      return;
    const o25 = this.view;
    "2d" === o25.type ? o25.mapViewNavigation.zoomIn() : d(o25.goTo({ zoomFactor: 2 }));
  }
  zoomOut() {
    if (!this.canZoomOut)
      return;
    const o25 = this.view;
    "2d" === o25.type ? o25.mapViewNavigation.zoomOut() : d(o25.goTo({ zoomFactor: 0.5 }));
  }
};
e([y()], m13.prototype, "_zoomConditions", void 0), e([y()], m13.prototype, "canZoomIn", null), e([y()], m13.prototype, "canZoomOut", null), e([y({ readOnly: true })], m13.prototype, "state", null), e([y()], m13.prototype, "view", null), m13 = e([c2("esri.widgets.Zoom.ZoomViewModel")], m13);
var p19 = m13;

// node_modules/@arcgis/core/widgets/Zoom.js
var p20 = { base: "esri-zoom", widgetIcon: i3.zoomInMagnifyingGlass, horizontalLayout: "esri-zoom--horizontal" };
var c23 = class extends O {
  constructor(o25, t22) {
    super(o25, t22), this.iconClass = p20.widgetIcon, this.icon = null, this.messages = null, this.viewModel = new p19();
  }
  initialize() {
    this._zoomInButton = new l19({ action: this.zoomIn.bind(this), iconClass: i3.plus }), this._zoomOutButton = new l19({ action: this.zoomOut.bind(this), iconClass: i3.minus });
  }
  destroy() {
    this._zoomInButton = u(this._zoomInButton), this._zoomOutButton = u(this._zoomOutButton);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(o25) {
    this._overrideIfSome("label", o25);
  }
  set layout(o25) {
    "horizontal" !== o25 && (o25 = "vertical"), this._set("layout", o25);
  }
  set view(o25) {
    this.viewModel.view = o25;
  }
  get view() {
    return this.viewModel.view;
  }
  render() {
    const o25 = this.viewModel, t22 = { [p20.horizontalLayout]: "horizontal" === this.layout }, { canZoomIn: s19, canZoomOut: e22 } = o25;
    this._zoomInButton.enabled = s19, this._zoomOutButton.enabled = e22;
    const { zoomIn: i23, zoomOut: n30 } = this.messages;
    return this._zoomInButton.title = i23, this._zoomOutButton.title = n30, n5("div", { class: this.classes(p20.base, e9.widget, t22) }, this._zoomInButton.render(), this._zoomOutButton.render());
  }
  zoomIn() {
    return this.viewModel.zoomIn();
  }
  zoomOut() {
    return this.viewModel.zoomOut();
  }
};
e([y()], c23.prototype, "iconClass", void 0), e([y()], c23.prototype, "icon", void 0), e([y()], c23.prototype, "label", null), e([y({ value: "vertical" })], c23.prototype, "layout", null), e([y(), e6("esri/widgets/Zoom/t9n/Zoom")], c23.prototype, "messages", void 0), e([y()], c23.prototype, "view", null), e([y({ type: p19 })], c23.prototype, "viewModel", void 0), c23 = e([c2("esri.widgets.Zoom")], c23);
var h10 = c23;

// node_modules/@arcgis/core/views/ui/DefaultUI.js
function m14(t22) {
  return void 0 !== (t22 == null ? void 0 : t22.view);
}
var u13 = class extends L2 {
  constructor(t22) {
    super(t22), this._defaultPositionLookup = { attribution: "manual", compass: "top-left", "navigation-toggle": "top-left", zoom: "top-left" }, this.components = [], this._updateViewAwareWidgets = (t23) => {
      this.components.forEach((o25) => {
        const e22 = this._find(o25), s19 = e22 == null ? void 0 : e22.widget;
        m14(s19) && (s19.view = t23);
      });
    }, this._componentsWatcher = (t23, o25) => {
      this._removeComponents(o25), this._addComponents(t23), this._adjustPadding(t23);
    };
  }
  initialize() {
    this.addHandles([d3(() => this.components, this._componentsWatcher, P), d3(() => this.view, this._updateViewAwareWidgets, P)]);
  }
  _add(t22, o25, e22, s19, i23) {
    let r24 = t22;
    if ("string" == typeof t22 && this._defaultPositionLookup[t22]) {
      if (this._find(t22))
        return;
      r24 = this._createComponent(t22);
    }
    super._add(r24, o25, e22, s19, i23);
  }
  _removeComponents(t22) {
    t22.forEach((t23) => {
      const o25 = this._find(t23);
      o25 && (this.remove(o25), o25.destroy());
    });
  }
  _adjustPadding(t22) {
    if (!t22.includes("attribution") && !this._isOverridden("padding")) {
      const { top: t23 } = this.padding;
      this.padding = t23;
    }
  }
  _addComponents(t22) {
    this.constructed && t22.forEach((t23) => this.add(this._createComponent(t23), this._defaultPositionLookup[t23]));
  }
  _createComponent(t22) {
    const o25 = this._createWidget(t22);
    return new l18({ id: t22, node: o25 });
  }
  _createWidget(t22) {
    const { view: o25 } = this;
    switch (t22) {
      case "attribution":
        return new _10({ view: o25 });
      case "compass":
        return new d16({ view: o25 });
      case "navigation-toggle":
        return new d17({ view: o25 });
      case "zoom":
        return new h10({ view: o25 });
    }
  }
};
e([y()], u13.prototype, "components", void 0), u13 = e([c2("esri.views.ui.DefaultUI")], u13);
var h11 = u13;

// node_modules/@arcgis/core/views/ui/2d/DefaultUI2D.js
var e21 = class extends h11 {
  constructor(o25) {
    super(o25), this.components = ["attribution", "zoom"];
  }
};
e([y()], e21.prototype, "components", void 0), e21 = e([c2("esri.views.ui.2d.DefaultUI2D")], e21);
var p21 = e21;

// node_modules/@arcgis/core/views/MapView.js
var W4;
var $2;
var H2;
var B;
var Z;
var J;
async function K() {
  const [, { GraphicsView2D: e22, GraphicContainer: t22, LabelManager: i23, MapViewNavigation: r24, MagnifierView2D: s19, Stage: a23 }] = await Promise.all([import("./webglDeps-5SSGCC46.js"), import("./mapViewDeps-ZRXADAPS.js")]);
  $2 = e22, H2 = t22, B = i23, Z = r24, J = s19, W4 = a23;
}
var Q = class extends o9(w3(z2(W2))) {
  constructor(e22) {
    super(e22), this._magnifierView = null, this.stage = null, this._resolveWhenReady = [], this.rootLayerViews = new l2({ getCollections: () => {
      var _a, _b;
      return [(_a = this.basemapView) == null ? void 0 : _a.baseLayerViews, this.layerViews, (_b = this.basemapView) == null ? void 0 : _b.referenceLayerViews];
    }, getChildrenFunction: () => null }), this.featuresTilingScheme = null, this.fullOpacity = 1, this.goToManager = new p12({ view: this }), this.graphicsView = null, this.stateManager = new z4({ constraints: new f10({ view: this }) }), this.stationaryManager = new i21(), this.labelManager = null, this.mapViewNavigation = null, this.renderingOptions = { samplingMode: "dynamic", edgeLabelsVisible: true, labelsAnimationTime: 125, labelCollisionsEnabled: true }, this.supersampleScreenshotsEnabled = true, this.supportsGround = false, this.frameTask = new a10(this), this.floors = new V(), this.highlightOptions = new c8(), this.inputManager = new k3({ view: this }), this.map = null, this.spatialReferenceLocked = false, this.timeline = new e11(), this.type = "2d", this.ui = new p21(), this.test = { takeScreenshot: async (e23) => r21(this._getScreenshotView(e23), e23) }, this.padding = { top: 0, right: 0, bottom: 0, left: 0 }, this.addHandles([d3(() => this.viewpoint, () => this.stationaryManager.flip(), C2), this.on("resize", (e23) => this.stateManager.resize(e23.width, e23.height)), d3(() => {
      var _a;
      return (_a = this.animationManager) == null ? void 0 : _a.animation;
    }, (e23) => {
      this.animation = e23;
    })]), m6();
  }
  destroy() {
    this._set("preconditionsReady", false), this.frameTask = u(this.frameTask), this.goToManager.destroy(), this.rootLayerViews.destroy(), this.inputManager.destroy(), this._set("inputManager", null);
  }
  get graphicsTileStore() {
    return new d6(this.featuresTilingScheme);
  }
  get constraintsInfo() {
    var _a, _b;
    const e22 = (_a = this.defaultsFromMap) == null ? void 0 : _a.tileInfo, t22 = this.spatialReference;
    return { lods: ((_b = e22 == null ? void 0 : e22.spatialReference) == null ? void 0 : _b.equals(t22)) ? e22.lods : null, spatialReference: t22 };
  }
  get state() {
    return this.stateManager.state;
  }
  get initialExtentRequired() {
    var _a;
    if (!this.stateManager)
      return false;
    const { scale: e22, constraints: t22, center: i23, viewpoint: r24, extent: s19 } = this;
    let a23 = this.zoom;
    return !(this.map && "initialViewProperties" in this.map && ((_a = this.map.initialViewProperties) == null ? void 0 : _a.viewpoint)) && (!s19 && ((t22 == null ? void 0 : t22.effectiveLODs) || (a23 = -1), (!i23 || 0 === e22 && -1 === a23) && (null == (r24 == null ? void 0 : r24.targetGeometry) || "extent" !== r24.targetGeometry.type && !r24.scale)));
  }
  get _defaultsFromMapSettings() {
    return { required: { tileInfo: true, heightModelInfo: false, extent: false }, requiresExtentInSpatialReference: this.spatialReferenceLocked };
  }
  get typeSpecificPreconditionsReady() {
    const e22 = this._getDefaultViewpoint();
    if (!e22)
      return false;
    const t22 = this.spatialReference, i23 = e22.targetGeometry;
    return !!D(i23.spatialReference, t22) || T();
  }
  set animation(e22) {
    const t22 = this._get("animation");
    if (e22 === t22)
      return;
    if (t22 && t22.stop(), !e22 || e22.isFulfilled())
      return this._set("animation", null), void (this.frameTask.animationInProgress = false);
    this._set("animation", e22), this.frameTask.animationInProgress = true;
    const i23 = () => {
      var _a;
      e22 === this._get("animation") && (this._set("animation", null), (_a = this.frameTask) == null ? void 0 : _a.requestFrame()), this.frameTask.animationInProgress = false;
    };
    e22.when(i23, i23);
  }
  get background() {
    return Y2(this.map) ? this.map.initialViewProperties.background : null;
  }
  set background(e22) {
    this._override("background", e22);
  }
  get center() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.center) ?? null;
  }
  set center(e22) {
    this.stateManager.center = e22;
  }
  get constraints() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.constraints;
  }
  set constraints(e22) {
    e22.view = this;
    const t22 = this.stateManager.constraints;
    this.stateManager.constraints = e22, t22 == null ? void 0 : t22.destroy();
  }
  get extent() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.extent) ?? null;
  }
  set extent(e22) {
    this.stateManager.extent = e22;
  }
  get padding() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.padding;
  }
  set padding(e22) {
    this.stateManager && (this.stateManager.padding = e22);
  }
  get rendering() {
    var _a;
    return ((_a = this.stage) == null ? void 0 : _a.renderRequested) ?? false;
  }
  get resizeAlign() {
    return this.stateManager.resizeAlign;
  }
  set resizeAlign(e22) {
    this.stateManager.resizeAlign = e22;
  }
  get resolution() {
    return this.stateManager.resolution ?? 0;
  }
  get rotation() {
    return this.stateManager.rotation ?? 0;
  }
  set rotation(e22) {
    const { rotationEnabled: t22 } = this.constraints;
    this.constraints.rotationEnabled = true, this.stateManager.rotation = e22, this.constraints.rotationEnabled = t22;
  }
  get scale() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.scale) ?? 0;
  }
  set scale(e22) {
    this.stateManager && (this.stateManager.scale = e22);
  }
  get stationary() {
    return !this.animation && !this.navigating && !this.resizing && this.stationaryManager.stationary;
  }
  get updating() {
    var _a, _b, _c;
    const e22 = !this.destroyed && (!this.layerViewManager || !this.labelManager || !this.graphicsView || true === this.layerViewManager.updating || true === this.labelManager.updating || true === this.graphicsView.updating || this.allLayerViews.some((e23) => !e23.destroyed && !("layerViews" in e23) && true === e23.updating));
    if (has("esri-2d-log-updating")) {
      const t22 = this.allLayerViews.reduce((e23, t23) => ({ ...e23, [t23.layer.id]: !t23.destroyed && !("layerViews" in t23) && t23.updating }), {});
      console.log(`Updating MapView: ${e22}
-> Null LayerViewManager: ${!this.layerViewManager}
-> Null LabelManager: ${!this.labelManager}
-> Null GraphicsView: ${!this.graphicsView}
-> layerViewManager.updating: ${(_a = this.layerViewManager) == null ? void 0 : _a.updating}
-> labelManager.updating: ${(_b = this.labelManager) == null ? void 0 : _b.updating}
-> graphicsView.updating: ${(_c = this.graphicsView) == null ? void 0 : _c.updating}
-> allLayerViews: ${JSON.stringify(t22)}
`);
    }
    return e22;
  }
  get viewpoint() {
    return this.stateManager.viewpoint ?? null;
  }
  set viewpoint(e22) {
    this.stateManager.viewpoint = e22, this.frameTask.requestFrame();
  }
  get zoom() {
    return this.stateManager.zoom ?? -1;
  }
  set zoom(e22) {
    this.stateManager.zoom = e22;
  }
  get navigating() {
    var _a;
    return ((_a = this.mapViewNavigation) == null ? void 0 : _a.interacting) ?? false;
  }
  goTo(e22, t22) {
    return this.goToManager.goTo(e22, t22);
  }
  async hitTest(e22, t22) {
    return l16(this, e22, t22);
  }
  async takeScreenshot(e22) {
    return o22(this._getScreenshotView(e22), e22);
  }
  toMap(e22) {
    if (!this.ready)
      return null;
    const t22 = o13(e22) ? r12(this, e22) : e22;
    return this.stateManager.toMap(t22);
  }
  toScreen(e22, t22) {
    return this.stateManager.toScreen(e22, t22);
  }
  on(e22, t22, i23, r24) {
    const s19 = this.inputManager && this.viewEvents.on(e22, t22, i23, r24);
    return s19 || super.on(e22, t22);
  }
  hasEventListener(e22) {
    return super.hasEventListener(e22) || this.viewEvents.hasHandler(e22);
  }
  whenLayerView(e22) {
    return super.whenLayerView(e22);
  }
  graphicChanged(e22) {
    if (this.graphicsView) {
      this.graphicsView.graphicUpdateHandler(e22);
    }
  }
  whenReady() {
    return new Promise((e22) => {
      this.ready ? e22(this) : this._resolveWhenReady.push(e22);
    });
  }
  forceDOMReadyCycle() {
    this.forceReadyCycle();
  }
  getDefaultSpatialReference() {
    var _a, _b, _c;
    return this.map && "initialViewProperties" in this.map && ((_b = (_a = this.map) == null ? void 0 : _a.initialViewProperties) == null ? void 0 : _b.spatialReference) || ((_c = this.defaultsFromMap) == null ? void 0 : _c.spatialReference) || null;
  }
  getDefaultTimeZone() {
    return Y2(this.map) ? this.map.initialViewProperties.timeZone : null;
  }
  hasLayerViewModule(e22) {
    return l12.hasLayerViewModule(e22);
  }
  importLayerView(e22) {
    return l12.importLayerView(e22);
  }
  pixelSizeAt() {
    return this.ready ? this.resolution : (s.getLogger(this).error("#pixelSizeAt()", "Map view cannot be used before it is ready"), null);
  }
  popupHitTest(e22) {
    return this.hitTest(e22).then((t22) => ({ ...t22, mapPoint: this.toMap(e22) }));
  }
  requestUpdate() {
    this.ready && this.frameTask.requestUpdate();
  }
  async validate() {
    let e22 = i22(this.type);
    if (has("safari") && has("safari") < 9 && (e22 = new s2("mapview:browser-not-supported", "This browser is not supported by MapView (Safari < 9)", { type: "safari", requiredVersion: 9, detectedVersion: has("safari") })), null != e22)
      throw s.getLogger(this).warn("#validate()", e22.message), e22;
  }
  loadAsyncDependencies() {
    return K();
  }
  _getDefaultViewpoint() {
    var _a;
    const { constraints: e22, initialExtent: i23, map: r24, padding: s19, size: a23 } = this;
    if (!e22)
      return null;
    const n30 = r24 && "initialViewProperties" in r24 ? r24.initialViewProperties : void 0, o25 = this.stateManager.getUserStartupOptions(this.size), p22 = n30 == null ? void 0 : n30.viewpoint, l20 = ((_a = p22 == null ? void 0 : p22.targetGeometry) == null ? void 0 : _a.extent) ?? i23, h12 = l20 == null ? void 0 : l20.center, g10 = (p22 == null ? void 0 : p22.rotation) ?? 0, d18 = (p22 == null ? void 0 : p22.scale) || l20 && W(l20, [a23[0] - s19.left - s19.right, a23[1] - s19.top - s19.bottom]), u14 = o25.center ?? h12, c24 = o25.rotation ?? g10, m15 = o25.scale ?? d18;
    return u14 && m15 ? new l5({ targetGeometry: u14, scale: m15, rotation: c24 }) : null;
  }
  _startup() {
    var _a;
    this.timeline.begin("MapView Startup");
    const e22 = this._getDefaultViewpoint();
    this.stateManager.startup(e22, this.size, this.spatialReference, (_a = this.defaultsFromMap.extent) == null ? void 0 : _a.center), this.graphics.owner = this;
    const t22 = new W4(this.surface, { canvas: this.renderCanvas, contextOptions: { disabledExtensions: this.deactivatedWebGLExtensions, debugWebGLExtensions: this.debugWebGLExtensions }, renderingOptions: this.renderingOptions, timeline: this.timeline });
    this.stage = t22, this._magnifierView = new J(), this._magnifierView.magnifier = this.magnifier;
    const i23 = new B({ view: this });
    this._set("labelManager", i23);
    const r24 = new l11({ view: this });
    this._set("animationManager", r24);
    const s19 = new Z({ view: this, animationManager: r24 });
    this._set("mapViewNavigation", s19), this._setupSpatialReferenceDependentProperties(), this.addHandles([this.rootLayerViews.on("change", () => this._updateStageChildren()), t22.on("webgl-error", (e23) => this.fatalError = e23.error), d3(() => this.stationary, (e23) => t22.stationary = e23, A2), d3(() => this.background, (e23) => {
      t22.backgroundColor = e23 == null ? void 0 : e23.color, this._magnifierView.backgroundColor = e23 == null ? void 0 : e23.color;
    }, A2), d3(() => this.magnifier, (e23) => this._magnifierView.magnifier = e23, A2), d3(() => this.renderingOptions, (e23) => t22.renderingOptions = e23, A2), d3(() => this.highlightOptions, (e23) => t22.highlightOptions = e23, A2), d3(() => this.state.id, () => t22.state = this.state, A2)], "map-view"), this._updateStageChildren();
    const a23 = this._resolveWhenReady;
    this._resolveWhenReady = [], a23.forEach((e23) => e23(this)), this.timeline.end("MapView Startup"), this.frameTask.start(), this._set("ready", true);
  }
  _teardown() {
    this._destroySpatialReferenceDependentProperties(), this.removeHandles("map-view"), this.mapViewNavigation.destroy(), this._set("mapViewNavigation", null), this.animationManager.destroy(), this._set("animationManager", null), this.layerViewManager.clear(), this.labelManager.destroy(), this._magnifierView.destroy(), this.stage.destroy(), this.stage = null, this._set("graphicsView", null), this._magnifierView = null, this._set("labelManager", null), this._set("mapViewNavigation", null), this.graphics.owner = null, this.frameTask.stop(), this.stationaryManager.clear(), this._set("ready", false), this.stateManager.teardown(), this.animation = null;
  }
  _updateStageChildren() {
    this.stage.removeAllChildren(), this.rootLayerViews.forEach((e23) => {
      this.stage.addChild(e23.container);
    });
    const e22 = this.graphicsView;
    this.stage.addChild(e22.container), this.stage.addChild(this._magnifierView);
  }
  _setupSpatialReferenceDependentProperties() {
    const e22 = new h3(j3.create({ spatialReference: this.spatialReference, size: 512, numLODs: 36 }));
    this._set("featuresTilingScheme", e22);
    const t22 = new $2({ view: this, graphics: this.graphics, requestUpdateCallback: () => this.requestUpdate(), container: new H2(e22) });
    this._set("graphicsView", t22);
  }
  _destroySpatialReferenceDependentProperties() {
    const e22 = this.graphicsView;
    this._set("graphicsView", null), e22.destroy(), this._set("featuresTilingScheme", null);
  }
  _getScreenshotView(e22) {
    var _a;
    const { allLayerViews: t22, padding: i23, size: r24, stage: s19 } = this;
    return { allLayerViews: t22, backgroundColor: (e22 == null ? void 0 : e22.ignoreBackground) ? null : (_a = this.background) == null ? void 0 : _a.color, padding: i23, size: r24, stage: s19 };
  }
  _spatialReferenceChanged(e22) {
    if (this.ready) {
      this.frameTask.stop();
      for (const e23 of this.allLayerViews)
        e23.processDetach();
      this._destroySpatialReferenceDependentProperties(), this.stateManager.changeSpatialReference(e22), this.stage.state = this.state, this._setupSpatialReferenceDependentProperties();
      for (const e23 of this.allLayerViews)
        e23.processAttach();
      this.frameTask.requestFrame(), this.frameTask.start(), this._updateStageChildren();
    }
  }
};
Q.type = "2d", e([y({ readOnly: true })], Q.prototype, "animationManager", void 0), e([y({ constructOnly: true })], Q.prototype, "deactivatedWebGLExtensions", void 0), e([y({ constructOnly: true })], Q.prototype, "debugWebGLExtensions", void 0), e([y({ readOnly: true })], Q.prototype, "featuresTilingScheme", void 0), e([y({ readOnly: true })], Q.prototype, "fullOpacity", void 0), e([y()], Q.prototype, "goToManager", void 0), e([y({ readOnly: true })], Q.prototype, "graphicsTileStore", null), e([y()], Q.prototype, "graphicsView", void 0), e([y()], Q.prototype, "stateManager", void 0), e([y()], Q.prototype, "constraintsInfo", null), e([y({ readOnly: true })], Q.prototype, "state", null), e([y()], Q.prototype, "initialExtentRequired", null), e([y()], Q.prototype, "labelManager", void 0), e([y({ readOnly: true })], Q.prototype, "mapViewNavigation", void 0), e([y({ constructOnly: true })], Q.prototype, "renderCanvas", void 0), e([y()], Q.prototype, "renderingOptions", void 0), e([y({ constructOnly: true })], Q.prototype, "supersampleScreenshotsEnabled", void 0), e([y({ readOnly: true })], Q.prototype, "supportsGround", void 0), e([y()], Q.prototype, "_defaultsFromMapSettings", null), e([y({ readOnly: true })], Q.prototype, "typeSpecificPreconditionsReady", null), e([y()], Q.prototype, "animation", null), e([y({ type: m7 })], Q.prototype, "background", null), e([y()], Q.prototype, "center", null), e([y({ type: f10 })], Q.prototype, "constraints", null), e([y()], Q.prototype, "extent", null), e([y()], Q.prototype, "floors", void 0), e([y({ type: c8 })], Q.prototype, "highlightOptions", void 0), e([y({ readOnly: true })], Q.prototype, "inputManager", void 0), e([y()], Q.prototype, "map", void 0), e([y()], Q.prototype, "padding", null), e([y({ readOnly: true })], Q.prototype, "rendering", null), e([y()], Q.prototype, "resizeAlign", null), e([y({ readOnly: true })], Q.prototype, "resolution", null), e([y()], Q.prototype, "rotation", null), e([y()], Q.prototype, "scale", null), e([y({ constructOnly: true })], Q.prototype, "spatialReferenceLocked", void 0), e([y()], Q.prototype, "stationary", null), e([y({ type: e11, readOnly: true })], Q.prototype, "timeline", void 0), e([y({ readOnly: true })], Q.prototype, "type", void 0), e([y({ readOnly: true })], Q.prototype, "updating", null), e([y()], Q.prototype, "viewpoint", null), e([y()], Q.prototype, "zoom", null), e([y({ readOnly: true })], Q.prototype, "navigating", null), e([y(), s5((e22) => e22 instanceof h11 ? e22 : v2(p21, e22))], Q.prototype, "ui", void 0), Q = e([c2("esri.views.MapView")], Q);
var X2 = Q;
function Y2(e22) {
  return "esri.WebMap" === (e22 == null ? void 0 : e22.declaredClass);
}
export {
  X2 as default
};
//# sourceMappingURL=@arcgis_core_views_MapView.js.map
