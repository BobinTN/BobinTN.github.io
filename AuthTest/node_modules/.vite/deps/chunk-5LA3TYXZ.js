import {
  c as c2,
  d as d2,
  e as e2,
  e2 as e3,
  f as f5,
  g,
  n as n3,
  o as o3,
  t as t3,
  t2 as t4,
  x
} from "./chunk-L7F73IMH.js";
import {
  autoMode,
  darkMode
} from "./chunk-SF4VUK6B.js";
import {
  getAssetPath,
  setAssetPath
} from "./chunk-UUFM7UDX.js";
import {
  n as n2
} from "./chunk-APYNYYQC.js";
import {
  A,
  d,
  p
} from "./chunk-TBSVVR6M.js";
import {
  f as f4
} from "./chunk-K6C6RVSV.js";
import {
  o as o2
} from "./chunk-423VNHLR.js";
import {
  n
} from "./chunk-N2K4VRZH.js";
import {
  f as f3
} from "./chunk-WL4VPODY.js";
import {
  s as s2
} from "./chunk-OMPEZIP5.js";
import {
  a as a2
} from "./chunk-SJZIFARA.js";
import {
  _
} from "./chunk-R5DM4YAB.js";
import {
  o,
  t6 as t2,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c,
  f
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  f as f2,
  k,
  r,
  t2 as t
} from "./chunk-RFPH3ZTZ.js";
import {
  u
} from "./chunk-WGO3VFQP.js";
import {
  a,
  s2 as s
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/core/domUtils.js
function e4(e11) {
  return "string" == typeof e11 ? document.getElementById(e11) : e11 ?? null;
}
function n4(e11) {
  for (; e11.hasChildNodes(); )
    e11.removeChild(e11.firstChild);
}
function o4(e11, n9) {
  const t7 = n9.parentNode;
  t7 && t7.insertBefore(e11, n9);
}
function i(e11, n9) {
  for (; ; ) {
    const t7 = e11.firstChild;
    if (!t7)
      break;
    n9.appendChild(t7);
  }
}
var l = "function" == typeof Element.prototype.closest ? (e11, n9) => e11.closest(n9) : (e11, n9) => {
  let t7 = e11;
  do {
    if (t7.matches(n9))
      return t7;
    t7 = t7.parentElement;
  } while (null !== t7 && 1 === t7.nodeType);
  return null;
};

// node_modules/@arcgis/core/libs/maquette-advanced-projector/advanced-projector-options.js
var e5 = { handleInterceptedEvent: (e11, p2, t7, n9) => (e11.scheduleRender(), p2.properties[`on${n9.type}`].apply(p2.properties.bind || t7, [n9])) };

// node_modules/@arcgis/core/libs/maquette-advanced-projector/utils.js
var e6 = { namespace: void 0, performanceLogger: () => {
}, eventHandlerInterceptor: void 0, styleApplyer: (e11, r6, t7) => {
  "-" === r6.charAt(0) ? e11.style.setProperty(r6, t7) : e11.style[r6] = t7;
} };
var r2 = (r6) => ({ ...e6, ...r6 });

// node_modules/@arcgis/core/libs/maquette-advanced-projector/projector.js
var o5 = (e11, t7) => {
  const r6 = [];
  for (; e11 && e11 !== t7; )
    r6.push(e11), e11 = e11.parentNode;
  return r6;
};
var n5 = (e11, t7) => e11.find(t7);
var d3 = (e11, t7, r6 = false) => {
  let o7 = e11;
  return t7.forEach((e12, d4) => {
    const s4 = (o7 == null ? void 0 : o7.children) ? n5(o7.children, (t8) => t8.domNode === e12) : void 0;
    r6 && !s4 && d4 !== t7.length - 1 || (o7 = s4);
  }), o7;
};
var s3 = (n9) => {
  let s4;
  const i3 = { ...e5, ...n9 }, c5 = r2(i3), a3 = c5.performanceLogger;
  let m, p2 = true, l2 = false;
  const f6 = [], u2 = [], h = (e11, t7, r6) => {
    var _a;
    let n10;
    c5.eventHandlerInterceptor = (e12, t8, r7, c6) => function(e13) {
      let t9;
      a3("domEvent", e13);
      const r8 = o5(e13.currentTarget, n10.domNode), c7 = r8.some((e14) => {
        var _a2;
        return customElements.get((_a2 = e14 == null ? void 0 : e14.tagName) == null ? void 0 : _a2.toLowerCase());
      });
      if (e13.eventPhase === Event.CAPTURING_PHASE || !c7)
        r8.reverse(), t9 = d3(n10.getLastRender(), r8);
      else {
        const r9 = e13.composedPath(), o7 = r9.slice(r9.indexOf(e13.currentTarget), r9.indexOf(n10.domNode)).reverse();
        t9 = d3(n10.getLastRender(), o7, true);
      }
      let m3;
      return t9 && (m3 = i3.handleInterceptedEvent(s4, t9, this, e13)), a3("domEventProcessed", e13), m3;
    }, (_a = i3.postProcessProjectionOptions) == null ? void 0 : _a.call(i3, c5);
    const m2 = r6();
    n10 = e11(t7, m2, c5), c5.eventHandlerInterceptor = void 0, f6.push(n10), u2.push(r6), i3.afterFirstVNodeRendered && i3.afterFirstVNodeRendered(n10, m2);
  };
  let v = () => {
    if (m = void 0, p2) {
      p2 = false, a3("renderStart", void 0);
      for (let e11 = 0; e11 < f6.length; e11++) {
        const t7 = u2[e11]();
        a3("rendered", void 0), f6[e11].update(t7), a3("patched", void 0);
      }
      a3("renderDone", void 0), p2 = true;
    }
  };
  return i3.modifyDoRenderImplementation && (v = i3.modifyDoRenderImplementation(v, f6, u2)), s4 = { renderNow: v, scheduleRender: () => {
    m || l2 || (m = requestAnimationFrame(v));
  }, stop: () => {
    m && (cancelAnimationFrame(m), m = void 0), l2 = true;
  }, resume: () => {
    l2 = false, p2 = true, s4.scheduleRender();
  }, append: (t7, r6) => {
    h(n3.append, t7, r6);
  }, insertBefore: (t7, r6) => {
    h(n3.insertBefore, t7, r6);
  }, merge: (t7, r6) => {
    h(n3.merge, t7, r6);
  }, replace: (t7, r6) => {
    h(n3.replace, t7, r6);
  }, detach: (e11) => {
    for (let t7 = 0; t7 < u2.length; t7++)
      if (u2[t7] === e11)
        return u2.splice(t7, 1), f6.splice(t7, 1)[0];
    throw new Error("renderFunction was not found");
  } }, s4;
};

// node_modules/@esri/calcite-components/dist/components/index.js
function initModeChangeEvent() {
  const { classList } = document.body;
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
  const getMode = () => classList.contains(darkMode) || classList.contains(autoMode) && prefersDark ? "dark" : "light";
  const emitModeChange = (mode) => document.body.dispatchEvent(new CustomEvent("calciteModeChange", { bubbles: true, detail: { mode } }));
  const modeChangeHandler = (newMode) => {
    currentMode !== newMode && emitModeChange(newMode);
    currentMode = newMode;
  };
  let currentMode = getMode();
  emitModeChange(currentMode);
  window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (event) => modeChangeHandler(event.matches ? "dark" : "light"));
  new MutationObserver(() => modeChangeHandler(getMode())).observe(document.body, {
    attributes: true,
    attributeFilter: ["class"]
  });
}
function appGlobalScript() {
  const isBrowser = typeof window !== "undefined" && typeof location !== "undefined" && typeof document !== "undefined" && window.location === location && window.document === document;
  if (isBrowser) {
    if (document.readyState === "interactive") {
      initModeChangeEvent();
    } else {
      document.addEventListener("DOMContentLoaded", () => initModeChangeEvent(), { once: true });
    }
  }
}
var globalScripts = appGlobalScript;
globalScripts();

// node_modules/@arcgis/core/widgets/support/componentsUtils.js
var c3;
function n6() {
  try {
    getAssetPath(".");
  } catch {
    setAssetPath(_(a2(c3)));
  }
}
function r3(t7) {
  var _a;
  const o7 = [];
  for (const s4 of Object.keys(t7))
    customElements.get(`calcite-${s4}`) || o7.push((_a = t7[s4]) == null ? void 0 : _a.call(t7));
  return o7.length > 0 ? Promise.all(o7) : null;
}
c3 = "components/assets";

// node_modules/@arcgis/core/widgets/support/legacyIcon.js
var i2 = { arrowDown: "esri-icon-arrow-down", arrowUp: "esri-icon-arrow-up", basemap: "esri-icon-basemap", bookmark: "esri-icon-bookmark", calendar: "esri-icon-calendar", checkMark: "esri-icon-check-mark", checkboxUnchecked: "esri-icon-checkbox-unchecked", close: "esri-icon-close", collapse: "esri-icon-collapse", defaultAction: "esri-icon-default-action", description: "esri-icon-description", directions: "esri-icon-directions", dockBottom: "esri-icon-dock-bottom", dockLeft: "esri-icon-dock-left", dockRight: "esri-icon-dock-right", down: "esri-icon-down", downArrow: "esri-icon-down-arrow", download: "esri-icon-download", dragHorizontal: "esri-icon-drag-horizontal", dragVertical: "esri-icon-drag-vertical", duplicate: "esri-icon-duplicate", edit: "esri-icon-edit", elevationProfile: "esri-icon-elevation-profile", environmentSettings: "esri-icon-environment-settings", erase: "esri-icon-erase", error: "esri-icon-error", expand: "esri-icon-expand", fontFallbackText: "esri-icon-font-fallback-text", forward: "esri-icon-forward", gear: "esri-icon-gear", handleHorizontal: "esri-icon-handle-horizontal", handleVertical: "esri-icon-handle-vertical", home: "esri-icon-home", icon: "esri-icon", launchLinkExternal: "esri-icon-launch-link-external", layerList: "esri-icon-layer-list", layers: "esri-icon-layers", left: "esri-icon-left", leftArrows: "esri-icon-left-arrow", leftTriangleArrow: "esri-icon-left-triangle-arrow", lineOfSight: "esri-icon-line-of-sight", link: "esri-icon-link", linkExternal: "esri-icon-link-external", linkHorizontal: "esri-icon-link-horizontal", loadingIndicator: "esri-icon-loading-indicator", locate: "esri-icon-locate", locateCircled: "esri-icon-locate-circled", locked: "esri-icon-locked", mapPin: "esri-icon-map-pin", maximize: "esri-icon-maximize", measure: "esri-icon-measure", measureArea: "esri-icon-measure-area", measureBuildingHeightShadow: "esri-icon-measure-building-height-shadow", measureLine: "esri-icon-measure-line", menu: "esri-icon-menu", minimize: "esri-icon-minimize", minus: "esri-icon-minus", nonVisible: "esri-icon-non-visible", northNavigation: "esri-icon-north-navigation", noticeTriangle: "esri-icon-notice-triangle", organization: "esri-icon-organization", pan: "esri-icon-pan", pan2: "esri-icon-pan2", partlyCloudy: "esri-icon-partly-cloudy", pause: "esri-icon-pause", play: "esri-icon-play", playCircled: "esri-icon-play-circled", plus: "esri-icon-plus", polyline: "esri-icon-polyline", printer: "esri-icon-printer", radioChecked: "esri-icon-radio-checked", radioUnchecked: "esri-icon-radio-unchecked", refresh: "esri-icon-refresh", reverse: "esri-icon-reverse", right: "esri-icon-right", rightArrow: "esri-icon-right-arrow", rightTriangleArrow: "esri-icon-right-triangle-arrow", rotate: "esri-icon-rotate", save: "esri-icon-save", search: "esri-icon-search", settings2: "esri-icon-settings2", slice: "esri-icon-slice", swap: "esri-icon-swap", table: "esri-icon-table", timeClock: "esri-icon-time-clock", tracking: "esri-icon-tracking", trash: "esri-icon-trash", unlockedLinkHorizontal: "esri-icon-unlocked-link-horizontal", up: "esri-icon-up", upArrow: "esri-icon-up-arrow", upDownArrows: "esri-icon-up-down-arrows", urbanModel: "esri-icon-urban-model", vertexGps: "esri-icon-vertex-gps", visible: "esri-icon-visible", zoomInFixed: "esri-icon-zoom-in-fixed", zoomInMagnifyingGlass: "esri-icon-zoom-in-magnifying-glass", zoomOutFixed: "esri-icon-zoom-out-fixed", zoomToObject: "esri-icon-zoom-to-object" };

// node_modules/@arcgis/core/widgets/support/tests.js
var e7 = /* @__PURE__ */ new Set();
function n7(n9) {
  e7.add(n9), n9.finally(() => e7.delete(n9));
}

// node_modules/@arcgis/core/widgets/Widget.js
var $;
var z = "esri.widgets.Widget";
var x2 = 0;
var W = { widgetIcon: i2.checkboxUnchecked };
function A2(e11, t7) {
  for (const r6 in t7)
    null != e11[r6] && ("object" == typeof e11[r6] && "object" == typeof t7[r6] ? A2(e11[r6], t7 == null ? void 0 : t7[r6]) : e11[r6] = t7[r6]);
  return e11;
}
var B = s3({ postProcessProjectionOptions(e11) {
  const t7 = e11.eventHandlerInterceptor, r6 = /capture$/i;
  e11.eventHandlerInterceptor = (e12, s4, o7, i3) => {
    const n9 = t7 == null ? void 0 : t7(e12, s4, o7, i3), a3 = r6.test(e12);
    if (!((e12 = e12.replace(r6, "")).toLowerCase() in o7) || a3) {
      const t8 = e12[2].toLowerCase() + e12.slice(3), r7 = (e13) => n9 == null ? void 0 : n9.call(o7, e13);
      o7.addEventListener(t8, r7, a3);
      const s5 = () => o7.removeEventListener(t8, r7, a3), d4 = i3.afterRemoved;
      i3.afterRemoved = (e13) => {
        d4 == null ? void 0 : d4(e13), s5();
      };
    }
    return n9;
  };
}, handleInterceptedEvent(e11, t7, r6, s4) {
  const { eventPhase: o7, type: i3 } = s4, n9 = o7 === Event.CAPTURING_PHASE;
  let a3 = `on${i3}${n9 ? "capture" : ""}`;
  const d4 = t7.properties;
  (d4 && a3 in d4 || (a3 = `on${i3[0].toUpperCase()}${i3.slice(1)}${n9 ? "Capture" : ""}`, d4 && a3 in d4)) && (t3(), e11.scheduleRender(), d4[a3].call(d4.bind || r6, s4));
} });
var D = false;
var M = class extends n(o2.EventedAccessor) {
  constructor(e11, t7) {
    super(e11, t7), this._attached = false, this._projector = B, this._readyForTrueRender = false, this.iconClass = W.widgetIcon, this.icon = null, this.key = this, this._loadLocale = k(async () => {
      var _a;
      if ((_a = this._messageBundleProps) == null ? void 0 : _a.length) {
        const e12 = await Promise.allSettled(this._messageBundleProps.map(async ({ bundlePath: e13, propertyName: t8 }) => {
          if (this.destroyed)
            return;
          let r7 = await f4(e13);
          this.uiStrings && Object.keys(this.uiStrings) && (r7 = A2(a(r7), this.uiStrings)), this[t8] = r7;
        }));
        if (this.destroyed)
          return;
        for (const t8 of e12)
          "rejected" === t8.status && s.getLogger(this).error("widget-intl:locale-error", this.declaredClass, t8.reason);
      }
      await this.loadLocale();
    }), n6();
    const r6 = "esri-widget-uid-" + n2(), s4 = this.render.bind(this);
    this._trackingTarget = new t2(() => this.scheduleRender());
    const o7 = () => {
      var _a;
      if (!this._readyForTrueRender || this.destroyed)
        return null;
      const e12 = s4();
      let { properties: t8 } = e12;
      t8 || (e12.properties = t8 = {});
      const { key: o8 } = t8;
      if (o8 || (t8.key = r6), f5(e12.vnodeSelector)) {
        if (!this.visible)
          return { vnodeSelector: "div", properties: { key: `${r6}-hidden`, class: "", styles: { display: "none" } }, domNode: null, children: void 0, text: void 0 };
      } else
        this.visible ? t8.styles || (t8.styles = {}) : (t8.class = "", t8.styles = { display: "none" }), t8.styles.display || (t8.styles.display = "");
      let i4 = 0;
      return (_a = e12.children) == null ? void 0 : _a.forEach((e13) => {
        if (f5(e13.vnodeSelector))
          return;
        let { properties: t9 } = e13;
        t9 || (e13.properties = t9 = {}), t9.key || (t9.key = `${this.id}--${i4++}`);
      }), d2(this, e12);
    };
    this.render = () => {
      if (D)
        return o7();
      let e12 = e2(this) ?? null;
      if (e12)
        return e12;
      this._trackingTarget.clear(), D = true;
      try {
        e12 = f(this._trackingTarget, o7);
      } catch (t8) {
        throw console.error(t8), t8;
      } finally {
        D = false;
      }
      return e12 && c2(this, e12), e12;
    };
    const i3 = this.beforeFirstRender();
    i3 ? this._resourcesFetch = i3.then(() => {
      this._readyForTrueRender = true, this._postInitialize();
    }) : (this._resourcesFetch = Promise.resolve().then(() => {
      this._postInitialize();
    }), this._readyForTrueRender = true), this.addResolvingPromise(this._resourcesFetch), n7(this._resourcesFetch);
  }
  normalizeCtorArgs(e11, t7) {
    const r6 = { ...e11 };
    return t7 && (r6.container = t7), r6;
  }
  postInitialize() {
  }
  beforeFirstRender() {
    var _a;
    const e11 = this.loadDependencies();
    return ((_a = this._messageBundleProps) == null ? void 0 : _a.length) || e11 ? Promise.all([e11, this._loadLocale()]).then(() => {
    }).catch(f2) : null;
  }
  loadDependencies() {
    return null;
  }
  loadLocale() {
    return null;
  }
  destroy() {
    this.destroyed || (u(this._trackingTarget), u(this.viewModel), this._detach(this.container), this._set("container", null), this._emitter.clear(), this.render = () => null, this._projector = null, o3(this));
  }
  set container(e11) {
    this._get("container") || this._set("container", e11);
  }
  castContainer(e11) {
    return e4(e11);
  }
  get domNode() {
    return this.container;
  }
  set domNode(e11) {
    this.container = e11;
  }
  get id() {
    var _a;
    return this._get("id") || ((_a = this.container) == null ? void 0 : _a.id) || Date.now().toString(16) + "-widget-" + x2++;
  }
  set id(e11) {
    e11 && this._set("id", e11);
  }
  get label() {
    return this.declaredClass.split(".").pop();
  }
  set label(e11) {
    this._overrideIfSome("label", e11);
  }
  get renderable() {
    return this._resourcesFetch;
  }
  get visible() {
    return this._get("visible");
  }
  set visible(e11) {
    this._set("visible", e11);
  }
  get [($ = t4, e3)]() {
    return { projector: this._projector };
  }
  render() {
    throw new Error("not implemented");
  }
  scheduleRender() {
    this.destroyed || (o3(this), this._projector.scheduleRender());
  }
  own(e11) {
    o(s.getLogger(this.declaredClass), "`Widget.own()` is deprecated in favor of Widget.addHandles()'", { replacement: "Widget.addHandles()", version: "4.28" }), this.addHandles(e11);
  }
  classes(...e11) {
    return g.apply(this, e11);
  }
  renderNow() {
    o3(this), this._projector.renderNow();
  }
  _postInitialize() {
    var _a;
    if (this.destroyed)
      return;
    this.scheduleRender(), ((_a = this._delegatedEventNames) == null ? void 0 : _a.length) && this.addHandles(d(() => this.viewModel, (e12, t7) => {
      t7 && this.removeHandles("delegated-events"), e12 && t(e12) && this.addHandles(this._delegatedEventNames.map((t8) => r(e12, t8, (e13) => {
        this.emit(t8, e13);
      })), "delegated-events");
    }, A)), this.postInitialize();
    const e11 = async () => {
      await this._loadLocale().catch(f2), this.scheduleRender();
    };
    this.addHandles([f3(e11), d(() => this.uiStrings, e11), p(() => this.container, (e12) => {
      this.destroyed || this._attach(e12);
    }, { initial: true, once: true })]);
  }
  _attach(e11) {
    e11 && (this._projector.merge(e11, this.render), this._attached = true);
  }
  _detach(e11) {
    var _a;
    this._attached && (this._projector.detach(this.render), this._attached = false), (_a = e11 == null ? void 0 : e11.parentNode) == null ? void 0 : _a.removeChild(e11);
  }
};
M[$] = true, e([y()], M.prototype, "_readyForTrueRender", void 0), e([y({ value: null })], M.prototype, "container", null), e([s2("container")], M.prototype, "castContainer", null), e([y()], M.prototype, "iconClass", void 0), e([y()], M.prototype, "icon", void 0), e([y()], M.prototype, "id", null), e([y()], M.prototype, "label", null), e([y()], M.prototype, "renderable", null), e([y()], M.prototype, "uiStrings", void 0), e([y()], M.prototype, "viewModel", void 0), e([y({ value: true })], M.prototype, "visible", null), e([y()], M.prototype, "key", void 0), e([y()], M.prototype, "children", void 0), e([y()], M.prototype, "afterCreate", void 0), e([y()], M.prototype, "afterUpdate", void 0), e([y()], M.prototype, "afterRemoved", void 0), M = e([c(z)], M);
var O = M;

// node_modules/@arcgis/core/widgets/support/decorators/messageBundle.js
function e8(e11) {
  return (s4, r6) => {
    s4.hasOwnProperty("_messageBundleProps") || (s4._messageBundleProps = s4._messageBundleProps ? s4._messageBundleProps.slice() : []);
    s4._messageBundleProps.push({ bundlePath: e11, propertyName: r6 });
  };
}

// node_modules/@arcgis/core/widgets/support/decorators/accessibleHandler.js
function t5() {
  return function(n9, t7) {
    if (!n9[t7])
      throw new TypeError(`Cannot auto bind undefined function '${String(t7)}'`);
    return { value: r4(n9[t7]) };
  };
}
function e9(n9) {
  const t7 = n9 == null ? void 0 : n9.type;
  return n9 instanceof KeyboardEvent || "keyup" === t7 || "keydown" === t7 || "keypress" === t7;
}
function r4(t7) {
  return function(r6, ...o7) {
    e9(r6) ? x(r6.key) && (r6.preventDefault(), r6.stopPropagation(), r6.target.click()) : t7.call(this, r6, ...o7);
  };
}

// node_modules/@arcgis/core/support/themeUtils.js
var t6 = "calcite-mode-";
function e10() {
  return getComputedStyle(document.body).getPropertyValue("--esri-calcite-mode-name").replaceAll(/\s|'|"/g, "");
}
function r5() {
  return e10().startsWith("dark");
}
function c4() {
  return `${t6}${r5() ? "dark" : "light"}`;
}
function n8(t7) {
  o6(t7), t7.classList.add(c4());
}
function o6(e11) {
  Array.from(e11.classList).forEach((r6) => {
    r6.startsWith(t6) && e11.classList.remove(r6);
  });
}

export {
  e4 as e,
  n4 as n,
  o4 as o,
  i,
  r3 as r,
  i2,
  O,
  e8 as e2,
  t5 as t,
  r5 as r2,
  n8 as n2
};
/*! Bundled license information:

@esri/calcite-components/dist/components/index.js:
  (*!
   * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
   * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
   * v1.10.0
   *)
*/
//# sourceMappingURL=chunk-5LA3TYXZ.js.map
