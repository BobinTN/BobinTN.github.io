import {
  k
} from "./chunk-DCYI44X2.js";
import {
  j2 as j
} from "./chunk-4NU7FZD7.js";
import {
  n
} from "./chunk-ZZYUEH57.js";
import {
  p
} from "./chunk-IPCIO3PX.js";
import {
  i
} from "./chunk-WJ4LS3YG.js";
import {
  a,
  f
} from "./chunk-NSRXJNTS.js";
import {
  e4 as e2,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";

// node_modules/@arcgis/core/Graphic.js
var y2;
function m(t) {
  if (!t)
    return null;
  const e3 = {};
  for (const r in t) {
    const s = p(t[r]);
    s && (e3[r] = s);
  }
  return 0 !== Object.keys(e3).length ? e3 : null;
}
function g(t) {
  if (null == t)
    return null;
  const e3 = {};
  for (const r in t) {
    const s = t[r];
    s && (e3[r] = s.toJSON());
  }
  return 0 !== Object.keys(e3).length ? e3 : null;
}
var h = y2 = class extends i(f) {
  constructor(...t) {
    super(...t), this.isAggregate = false, this.layer = null, this.popupTemplate = null, this.sourceLayer = null, Object.defineProperty(this, "uid", { value: e2(), configurable: true });
  }
  normalizeCtorArgs(t, e3, r, s) {
    return t && !t.declaredClass ? t : { geometry: t, symbol: e3, attributes: r, popupTemplate: s };
  }
  set aggregateGeometries(t) {
    const e3 = this._get("aggregateGeometries");
    JSON.stringify(e3) !== JSON.stringify(t) && this._set("aggregateGeometries", t);
  }
  set attributes(t) {
    const e3 = this._get("attributes");
    e3 !== t && (this._set("attributes", t), this._notifyLayer("attributes", e3, t));
  }
  set geometry(t) {
    const e3 = this._get("geometry");
    e3 !== t && (this._set("geometry", t), this._notifyLayer("geometry", e3, t));
  }
  set symbol(t) {
    const e3 = this._get("symbol");
    e3 !== t && (this._set("symbol", t), this._notifyLayer("symbol", e3, t));
  }
  set visible(t) {
    const e3 = this._get("visible");
    e3 !== t && (this._set("visible", t), this._notifyLayer("visible", e3, t));
  }
  cloneShallow() {
    return new y2({ aggregateGeometries: this.aggregateGeometries, attributes: this.attributes, geometry: this.geometry, isAggregate: this.isAggregate, layer: this.layer, popupTemplate: this.popupTemplate, sourceLayer: this.sourceLayer, symbol: this.symbol, visible: this.visible });
  }
  getEffectivePopupTemplate(t = false) {
    if (this.popupTemplate)
      return this.popupTemplate;
    for (const e3 of [this.sourceLayer, this.layer])
      if (e3) {
        if ("popupTemplate" in e3 && e3.popupTemplate)
          return e3.popupTemplate;
        if (t && "defaultPopupTemplate" in e3 && null != e3.defaultPopupTemplate)
          return e3.defaultPopupTemplate;
      }
    return null;
  }
  getAttribute(t) {
    var _a;
    return (_a = this.attributes) == null ? void 0 : _a[t];
  }
  setAttribute(t, e3) {
    if (this.attributes) {
      const r = this.getAttribute(t);
      this.attributes[t] = e3, this._notifyLayer("attributes", r, e3, t);
    } else
      this.attributes = { [t]: e3 }, this._notifyLayer("attributes", void 0, e3, t);
  }
  getObjectId() {
    return this.sourceLayer && "objectIdField" in this.sourceLayer && this.sourceLayer.objectIdField ? this.getAttribute(this.sourceLayer.objectIdField) : null;
  }
  toJSON() {
    var _a;
    return { aggregateGeometries: g(this.aggregateGeometries), geometry: null != this.geometry ? this.geometry.toJSON() : null, symbol: null != this.symbol ? this.symbol.toJSON() : null, attributes: a(this.attributes) ? this.attributes.toJSON() : { ...this.attributes }, popupTemplate: ((_a = this.popupTemplate) == null ? void 0 : _a.toJSON()) ?? null };
  }
  notifyGeometryChanged() {
    this._notifyLayer("geometry", this.geometry, this.geometry);
  }
  notifyMeshTransformChanged(t = {}) {
    const { geometry: e3 } = this;
    if ("mesh" === (e3 == null ? void 0 : e3.type)) {
      const r = { origin: e3.origin, transform: e3.transform };
      this._notifyLayer("origin-transform", r, r, t.action);
    }
  }
  _notifyLayer(t, e3, r, s) {
    if (!this.layer || !("graphicChanged" in this.layer))
      return;
    const o = { graphic: this, property: t, oldValue: e3, newValue: r };
    "origin-transform" === t && (o.action = s), "attributes" === t && (o.attributeName = s), this.layer.graphicChanged(o);
  }
};
e([y({ value: null, json: { read: m } })], h.prototype, "aggregateGeometries", null), e([y({ value: null })], h.prototype, "attributes", null), e([y({ value: null, types: n, json: { read: p } })], h.prototype, "geometry", null), e([y({ type: Boolean })], h.prototype, "isAggregate", void 0), e([y({ clonable: "reference" })], h.prototype, "layer", void 0), e([y({ type: k })], h.prototype, "popupTemplate", void 0), e([y({ clonable: "reference" })], h.prototype, "sourceLayer", void 0), e([y({ value: null, types: j })], h.prototype, "symbol", null), e([y({ type: Boolean, value: true })], h.prototype, "visible", null), h = y2 = e([c("esri.Graphic")], h), function(t) {
  t.generateUID = e2;
}(h || (h = {}));
var c2 = h;

export {
  c2 as c
};
//# sourceMappingURL=chunk-B3RXTW72.js.map
