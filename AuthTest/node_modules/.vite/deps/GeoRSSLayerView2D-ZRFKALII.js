import {
  i
} from "./chunk-2F5TFI3V.js";
import "./chunk-FRDRZ2UD.js";
import {
  re
} from "./chunk-FK3SCHPC.js";
import "./chunk-BSLKLRMY.js";
import "./chunk-FBWFFZ74.js";
import "./chunk-3Y5JS6MU.js";
import "./chunk-MPQZTJY3.js";
import "./chunk-GPOJ5GQM.js";
import "./chunk-VLDVHSJX.js";
import {
  m,
  u
} from "./chunk-TXY7QCH7.js";
import "./chunk-ULPUCHVC.js";
import "./chunk-BV5PCIP6.js";
import "./chunk-BXZIEADJ.js";
import "./chunk-L7TO2DFS.js";
import "./chunk-A6KO3R3G.js";
import "./chunk-T56C4ORZ.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-ST3TBFQ6.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-NI23WAWZ.js";
import "./chunk-GBFYGM27.js";
import "./chunk-7PBKZJWC.js";
import "./chunk-JNWIDZDW.js";
import "./chunk-3XN3CFM5.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-MUSQVDUI.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-GSATUKJ4.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-HR42LBYN.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-46VITINB.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import "./chunk-RCLKRKWR.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-KXF4D4TD.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-MJTRXEE4.js";
import "./chunk-2XWWTLSJ.js";
import {
  t
} from "./chunk-LVN3FGME.js";
import "./chunk-F3LMPTMS.js";
import "./chunk-P3R45ANF.js";
import {
  p
} from "./chunk-SHFNNIVW.js";
import "./chunk-IYYYQK4Y.js";
import "./chunk-QN7I7LNY.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-HKYMYCLL.js";
import "./chunk-ICVVQFO6.js";
import {
  d as d2
} from "./chunk-O3E2OZKN.js";
import "./chunk-EA6ZJZL6.js";
import "./chunk-VKTTTBW2.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-3RBII4KE.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-7YZ4X2DS.js";
import "./chunk-UPGPT5OX.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-XN6LAULS.js";
import "./chunk-CKGVKMVG.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-RP5SAUAF.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-JLSYG6MV.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import "./chunk-ZBT4RUU7.js";
import "./chunk-DZE6ZO7Z.js";
import "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import "./chunk-EY7PGBJG.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-B3RXTW72.js";
import {
  k
} from "./chunk-DCYI44X2.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-4NU7FZD7.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-MLRHWRJQ.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  P,
  d
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import {
  V
} from "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/GeoRSSLayerView2D.js
var y = class extends m(u) {
  constructor() {
    super(...arguments), this._graphicsViewMap = {}, this._popupTemplates = /* @__PURE__ */ new Map(), this.graphicsViews = [];
  }
  async hitTest(e2, r) {
    if (!this.graphicsViews.length)
      return null;
    const s = this.layer;
    return this.graphicsViews.reverse().flatMap((r2) => {
      const i2 = this._popupTemplates.get(r2), t2 = r2.hitTest(e2);
      for (const e3 of t2)
        e3.layer = s, e3.sourceLayer = s, e3.popupTemplate = i2;
      return t2;
    }).map((r2) => ({ type: "graphic", graphic: r2, layer: s, mapPoint: e2 }));
  }
  update(e2) {
    if (this.graphicsViews)
      for (const r of this.graphicsViews)
        r.processUpdate(e2);
  }
  attach() {
    this.addAttachHandles([d(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.featureCollections;
    }, (e2) => {
      this._clear();
      for (const { popupInfo: i2, featureSet: t2, layerDefinition: o } of e2) {
        const e3 = d2.fromJSON(t2), p2 = new V(e3.features), n = o.drawingInfo, m2 = i2 ? k.fromJSON(i2) : null, y2 = t(n.renderer), g2 = new re({ requestUpdateCallback: () => this.requestUpdate(), view: this.view, graphics: p2, renderer: y2, container: new i(this.view.featuresTilingScheme) });
        this._graphicsViewMap[e3.geometryType] = g2, this._popupTemplates.set(g2, m2), "polygon" !== e3.geometryType || this.layer.polygonSymbol ? "polyline" !== e3.geometryType || this.layer.lineSymbol ? "point" !== e3.geometryType || this.layer.pointSymbol || (this.layer.pointSymbol = y2.symbol) : this.layer.lineSymbol = y2.symbol : this.layer.polygonSymbol = y2.symbol, this.graphicsViews.push(g2), this.container.addChild(g2.container);
      }
    }, P), d(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.polygonSymbol;
    }, (e2) => {
      this._graphicsViewMap.polygon.renderer = new p({ symbol: e2 });
    }, P), d(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.lineSymbol;
    }, (e2) => {
      this._graphicsViewMap.polyline.renderer = new p({ symbol: e2 });
    }, P), d(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.pointSymbol;
    }, (e2) => {
      this._graphicsViewMap.point.renderer = new p({ symbol: e2 });
    }, P)]);
  }
  detach() {
    this._clear();
  }
  moveStart() {
  }
  moveEnd() {
  }
  viewChange() {
    for (const e2 of this.graphicsViews)
      e2.viewChange();
  }
  _clear() {
    this.container.removeAllChildren();
    for (const e2 of this.graphicsViews)
      e2.destroy();
    this._graphicsViewMap = {}, this._popupTemplates.clear(), this.graphicsViews.length = 0;
  }
};
y = e([c("esri.views.2d.layers.GeoRSSLayerView2D")], y);
var g = y;
export {
  g as default
};
//# sourceMappingURL=GeoRSSLayerView2D-ZRFKALII.js.map
