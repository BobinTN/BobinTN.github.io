import {
  p as p2,
  u
} from "./chunk-ZKKM4KJT.js";
import {
  i as i2
} from "./chunk-LXYMQMWX.js";
import {
  i
} from "./chunk-XJLKESB7.js";
import {
  I as I2,
  d
} from "./chunk-WDO2BXGR.js";
import {
  v
} from "./chunk-BADPOP5P.js";
import {
  S as S2,
  g,
  h,
  m,
  p
} from "./chunk-AOJ6OCPK.js";
import {
  S
} from "./chunk-2D3PORS4.js";
import {
  j as j2
} from "./chunk-WZPOQGKL.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import {
  o
} from "./chunk-WURET5CW.js";
import {
  f,
  r
} from "./chunk-QWPLZ3QH.js";
import {
  I,
  j
} from "./chunk-R5DM4YAB.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  k
} from "./chunk-RFPH3ZTZ.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/layers/support/I3SIndexInfo.js
async function r2(r3, n2, t, s3, a, i3) {
  let l = null;
  if (null != t) {
    const o2 = `${r3}/nodepages/`, n3 = o2 + Math.floor(t.rootIndex / t.nodesPerPage);
    try {
      return { type: "page", rootPage: (await j(n3, { query: { f: "json", token: s3 }, responseType: "json", signal: i3 })).data, rootIndex: t.rootIndex, pageSize: t.nodesPerPage, lodMetric: t.lodSelectionMetricType, urlPrefix: o2 };
    } catch (u3) {
      null != a && a.warn("#fetchIndexInfo()", "Failed to load root node page. Falling back to node documents.", n3, u3), l = u3;
    }
  }
  if (!n2)
    return null;
  const d2 = n2 == null ? void 0 : n2.split("/").pop(), p3 = `${r3}/nodes/`, c2 = p3 + d2;
  try {
    return { type: "node", rootNode: (await j(c2, { query: { f: "json", token: s3 }, responseType: "json", signal: i3 })).data, urlPrefix: p3 };
  } catch (u3) {
    throw new s2("sceneservice:root-node-missing", "Root node missing.", { pageError: l, nodeError: u3, url: c2 });
  }
}

// node_modules/@arcgis/core/layers/support/schemaValidatorLoader.js
var n = null;
function u2() {
  return n;
}

// node_modules/@arcgis/core/layers/mixins/SceneService.js
var N = "esri.layers.mixins.SceneService";
var U = s.getLogger(N);
var E = (o2) => {
  let E2 = class extends o2 {
    constructor() {
      super(...arguments), this.spatialReference = null, this.fullExtent = null, this.heightModelInfo = null, this.minScale = 0, this.maxScale = 0, this.version = { major: Number.NaN, minor: Number.NaN, versionString: "" }, this.copyright = null, this.sublayerTitleMode = "item-title", this.title = null, this.layerId = null, this.indexInfo = null, this._debouncedSaveOperations = k(async (e2, t, r3) => {
        switch (e2) {
          case P.SAVE:
            return this._save(t);
          case P.SAVE_AS:
            return this._saveAs(r3, t);
        }
      });
    }
    readSpatialReference(e2, t) {
      return this._readSpatialReference(t);
    }
    _readSpatialReference(e2) {
      if (null != e2.spatialReference)
        return f.fromJSON(e2.spatialReference);
      {
        const t = e2.store, r3 = t.indexCRS || t.geographicCRS, o3 = r3 && parseInt(r3.substring(r3.lastIndexOf("/") + 1, r3.length), 10);
        return null != o3 ? new f(o3) : null;
      }
    }
    readFullExtent(e2, t, r3) {
      if (null != e2 && "object" == typeof e2) {
        const o4 = null == e2.spatialReference ? { ...e2, spatialReference: this._readSpatialReference(t) } : e2;
        return M.fromJSON(o4, r3);
      }
      const o3 = t.store, i3 = this._readSpatialReference(t);
      return null == i3 || null == (o3 == null ? void 0 : o3.extent) || !Array.isArray(o3.extent) || o3.extent.some((e3) => e3 < T) ? null : new M({ xmin: o3.extent[0], ymin: o3.extent[1], xmax: o3.extent[2], ymax: o3.extent[3], spatialReference: i3 });
    }
    parseVersionString(e2) {
      const t = { major: Number.NaN, minor: Number.NaN, versionString: e2 }, r3 = e2.split(".");
      return r3.length >= 2 && (t.major = parseInt(r3[0], 10), t.minor = parseInt(r3[1], 10)), t;
    }
    readVersion(e2, t) {
      const r3 = t.store, o3 = null != r3.version ? r3.version.toString() : "";
      return this.parseVersionString(o3);
    }
    readTitlePortalItem(e2) {
      return "item-title" !== this.sublayerTitleMode ? void 0 : e2;
    }
    readTitleService(e2, t) {
      var _a;
      const r3 = (_a = this.portalItem) == null ? void 0 : _a.title;
      if ("item-title" === this.sublayerTitleMode)
        return h(this.url, t.name);
      let o3 = t.name;
      if (!o3 && this.url) {
        const e3 = p(this.url);
        null != e3 && (o3 = e3.title);
      }
      return "item-title-and-service-name" === this.sublayerTitleMode && r3 && (o3 = r3 + " - " + o3), m(o3);
    }
    set url(e2) {
      const t = g({ layer: this, url: e2, nonStandardUrlAllowed: false, logger: U });
      this._set("url", t.url), null != t.layerId && this._set("layerId", t.layerId);
    }
    writeUrl(e2, t, r3, o3) {
      S2(this, e2, "layers", t, o3);
    }
    get parsedUrl() {
      const e2 = this._get("url"), t = I(e2);
      return null != this.layerId && (t.path = `${t.path}/layers/${this.layerId}`), t;
    }
    async _fetchIndexAndUpdateExtent(e2, t) {
      this.indexInfo = r2(this.parsedUrl.path, this.rootNode, e2, this.apiKey, U, t), null == this.fullExtent || this.fullExtent.hasZ || this._updateExtent(await this.indexInfo);
    }
    _updateExtent(e2) {
      var _a, _b, _c, _d;
      if ("page" === (e2 == null ? void 0 : e2.type)) {
        const t = e2.rootIndex % e2.pageSize, o3 = (_b = (_a = e2.rootPage) == null ? void 0 : _a.nodes) == null ? void 0 : _b[t];
        if (null == ((_c = o3 == null ? void 0 : o3.obb) == null ? void 0 : _c.center) || null == o3.obb.halfSize)
          throw new s2("sceneservice:invalid-node-page", "Invalid node page.");
        if (o3.obb.center[0] < T || null == this.fullExtent || this.fullExtent.hasZ)
          return;
        const i3 = o3.obb.halfSize, s3 = o3.obb.center[2], a = Math.sqrt(i3[0] * i3[0] + i3[1] * i3[1] + i3[2] * i3[2]);
        this.fullExtent.zmin = s3 - a, this.fullExtent.zmax = s3 + a;
      } else if ("node" === (e2 == null ? void 0 : e2.type)) {
        const t = (_d = e2.rootNode) == null ? void 0 : _d.mbs;
        if (!Array.isArray(t) || 4 !== t.length || t[0] < T)
          return;
        const r3 = t[2], o3 = t[3], { fullExtent: i3 } = this;
        i3 && (i3.zmin = r3 - o3, i3.zmax = r3 + o3);
      }
    }
    async _fetchService(e2) {
      if (null == this.url)
        throw new s2("sceneservice:url-not-set", "Scene service can not be loaded without valid portal item or url");
      if (null == this.layerId && /SceneServer\/*$/i.test(this.url)) {
        const t = await this._fetchFirstLayerId(e2);
        null != t && (this.layerId = t);
      }
      return this._fetchServiceLayer(e2);
    }
    async _fetchFirstLayerId(e2) {
      const r3 = await j(this.url, { query: { f: "json", token: this.apiKey }, responseType: "json", signal: e2 });
      if (r3.data && Array.isArray(r3.data.layers) && r3.data.layers.length > 0)
        return r3.data.layers[0].id;
    }
    async _fetchServiceLayer(e2) {
      var _a;
      const r3 = await j(((_a = this.parsedUrl) == null ? void 0 : _a.path) ?? "", { query: { f: "json", token: this.apiKey }, responseType: "json", signal: e2 });
      r3.ssl && (this.url = this.url.replace(/^http:/i, "https:"));
      let o3 = false;
      if (r3.data.layerType && "Voxel" === r3.data.layerType && (o3 = true), o3)
        return this._fetchVoxelServiceLayer();
      const i3 = r3.data;
      this.read(i3, this._getServiceContext()), this.validateLayer(i3);
    }
    async _fetchVoxelServiceLayer(e2) {
      var _a;
      const r3 = (await j(((_a = this.parsedUrl) == null ? void 0 : _a.path) + "/layer", { query: { f: "json", token: this.apiKey }, responseType: "json", signal: e2 })).data;
      this.read(r3, this._getServiceContext()), this.validateLayer(r3);
    }
    _getServiceContext() {
      var _a;
      return { origin: "service", portalItem: this.portalItem, portal: (_a = this.portalItem) == null ? void 0 : _a.portal, url: this.parsedUrl };
    }
    async _ensureLoadBeforeSave() {
      await this.load(), "beforeSave" in this && "function" == typeof this.beforeSave && await this.beforeSave();
    }
    validateLayer(e2) {
    }
    _updateTypeKeywords(e2, t, r3) {
      e2.typeKeywords || (e2.typeKeywords = []);
      const o3 = t.getTypeKeywords();
      for (const i3 of o3)
        e2.typeKeywords.push(i3);
      e2.typeKeywords && (e2.typeKeywords = e2.typeKeywords.filter((e3, t2, r4) => r4.indexOf(e3) === t2), r3 === O.newItem && (e2.typeKeywords = e2.typeKeywords.filter((e3) => "Hosted Service" !== e3)));
    }
    async _saveAs(e2, t) {
      var _a;
      const o3 = { ...L, ...t };
      let i3 = S.from(e2);
      if (!i3)
        throw new s2("sceneservice:portal-item-required", "_saveAs() requires a portal item to save to");
      i2(i3), i3.id && (i3 = i3.clone(), i3.id = null);
      const s3 = i3.portal || j2.getDefault();
      await this._ensureLoadBeforeSave(), i3.type = K, i3.portal = s3;
      const a = { origin: "portal-item", url: null, messages: [], portal: s3, portalItem: i3, writtenProperties: [], blockedRelativeUrls: [], resources: { toAdd: [], toUpdate: [], toKeep: [], pendingOperations: [] } }, n2 = { layers: [this.write({}, a)] };
      return await Promise.all(a.resources.pendingOperations ?? []), await this._validateAgainstJSONSchema(n2, a, o3), i3.url = this.url, i3.title || (i3.title = this.title), this._updateTypeKeywords(i3, o3, O.newItem), await s3.signIn(), await ((_a = s3.user) == null ? void 0 : _a.addItem({ item: i3, folder: o3 == null ? void 0 : o3.folder, data: n2 })), await u(this.resourceReferences, a, null), this.portalItem = i3, i(a), a.portalItem = i3, i3;
    }
    async _save(e2) {
      const t = { ...L, ...e2 };
      if (!this.portalItem)
        throw new s2("sceneservice:portal-item-not-set", "Portal item to save to has not been set on this SceneService");
      if (i2(this.portalItem), this.portalItem.type !== K)
        throw new s2("sceneservice:portal-item-wrong-type", `Portal item needs to have type "${K}"`);
      await this._ensureLoadBeforeSave();
      const o3 = { origin: "portal-item", url: this.portalItem.itemUrl && I(this.portalItem.itemUrl), messages: [], portal: this.portalItem.portal || j2.getDefault(), portalItem: this.portalItem, writtenProperties: [], blockedRelativeUrls: [], resources: { toAdd: [], toUpdate: [], toKeep: [], pendingOperations: [] } }, i3 = { layers: [this.write({}, o3)] };
      return await Promise.all(o3.resources.pendingOperations ?? []), await this._validateAgainstJSONSchema(i3, o3, t), this.portalItem.url = this.url, this.portalItem.title || (this.portalItem.title = this.title), this._updateTypeKeywords(this.portalItem, t, O.existingItem), await p2(this.portalItem, i3, this.resourceReferences, o3, null), i(o3), this.portalItem;
    }
    async _validateAgainstJSONSchema(e2, t, o3) {
      var _a, _b;
      let i3 = ((_a = t.messages) == null ? void 0 : _a.filter((e3) => "error" === e3.type).map((e3) => new s2(e3.name, e3.message, e3.details))) ?? [];
      ((_b = o3 == null ? void 0 : o3.validationOptions) == null ? void 0 : _b.ignoreUnsupported) && (i3 = i3.filter((e3) => "layer:unsupported" !== e3.name && "symbol:unsupported" !== e3.name && "symbol-layer:unsupported" !== e3.name && "property:unsupported" !== e3.name && "url:unsupported" !== e3.name && "scenemodification:unsupported" !== e3.name));
      const s3 = o3 == null ? void 0 : o3.validationOptions, a = s3 == null ? void 0 : s3.enabled, n2 = u2();
      if (a && n2) {
        const t2 = (await n2()).validate(e2, o3.portalItemLayerType);
        if (t2.length > 0) {
          const e3 = `Layer item did not validate:
${t2.join("\n")}`;
          if (U.error(`_validateAgainstJSONSchema(): ${e3}`), "throw" === s3.failPolicy) {
            const e4 = t2.map((e5) => new s2("sceneservice:schema-validation", e5)).concat(i3);
            throw new s2("sceneservice-validate:error", "Failed to save layer item due to schema validation, see `details.errors`.", { combined: e4 });
          }
        }
      }
      if (i3.length > 0)
        throw new s2("sceneservice:save", "Failed to save SceneService due to unsupported or invalid content. See 'details.errors' for more detailed information", { errors: i3 });
    }
  };
  return e([y(I2)], E2.prototype, "id", void 0), e([y({ type: f })], E2.prototype, "spatialReference", void 0), e([o("spatialReference", ["spatialReference", "store.indexCRS", "store.geographicCRS"])], E2.prototype, "readSpatialReference", null), e([y({ type: M })], E2.prototype, "fullExtent", void 0), e([o("fullExtent", ["fullExtent", "store.extent", "spatialReference", "store.indexCRS", "store.geographicCRS"])], E2.prototype, "readFullExtent", null), e([y({ readOnly: true, type: v })], E2.prototype, "heightModelInfo", void 0), e([y({ type: Number, json: { name: "layerDefinition.minScale", write: true, origins: { service: { read: { source: "minScale" }, write: false } } } })], E2.prototype, "minScale", void 0), e([y({ type: Number, json: { name: "layerDefinition.maxScale", write: true, origins: { service: { read: { source: "maxScale" }, write: false } } } })], E2.prototype, "maxScale", void 0), e([y({ readOnly: true })], E2.prototype, "version", void 0), e([o("version", ["store.version"])], E2.prototype, "readVersion", null), e([y({ type: String, json: { read: { source: "copyrightText" } } })], E2.prototype, "copyright", void 0), e([y({ type: String, json: { read: false } })], E2.prototype, "sublayerTitleMode", void 0), e([y({ type: String })], E2.prototype, "title", void 0), e([o("portal-item", "title")], E2.prototype, "readTitlePortalItem", null), e([o("service", "title", ["name"])], E2.prototype, "readTitleService", null), e([y({ type: Number, json: { origins: { service: { read: { source: "id" } }, "portal-item": { write: { target: "id", isRequired: true, ignoreOrigin: true }, read: false } } } })], E2.prototype, "layerId", void 0), e([y(d)], E2.prototype, "url", null), e([r("url")], E2.prototype, "writeUrl", null), e([y()], E2.prototype, "parsedUrl", null), e([y({ readOnly: true })], E2.prototype, "store", void 0), e([y({ type: String, readOnly: true, json: { read: { source: "store.rootNode" } } })], E2.prototype, "rootNode", void 0), E2 = e([c(N)], E2), E2;
};
var T = -1e38;
var O;
!function(e2) {
  e2[e2.existingItem = 0] = "existingItem", e2[e2.newItem = 1] = "newItem";
}(O || (O = {}));
var K = "Scene Service";
var L = { getTypeKeywords: () => [], portalItemLayerType: "unknown", validationOptions: { enabled: true, ignoreUnsupported: false, failPolicy: "throw" } };
var P;
!function(e2) {
  e2[e2.SAVE = 0] = "SAVE", e2[e2.SAVE_AS = 1] = "SAVE_AS";
}(P || (P = {}));

export {
  r2 as r,
  E,
  P
};
//# sourceMappingURL=chunk-RC6N7ZK6.js.map
