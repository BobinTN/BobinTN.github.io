import {
  T,
  e2 as e4
} from "./chunk-T56C4ORZ.js";
import {
  M
} from "./chunk-XFC7DZXI.js";
import {
  D
} from "./chunk-RCLKRKWR.js";
import {
  y as y2
} from "./chunk-P3R45ANF.js";
import {
  e as e3
} from "./chunk-76KPSQLT.js";
import {
  e as e2,
  t
} from "./chunk-IATM3RCE.js";
import {
  o
} from "./chunk-423VNHLR.js";
import {
  g,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  C
} from "./chunk-RFPH3ZTZ.js";
import {
  a,
  s2 as s
} from "./chunk-WJ3HJKNC.js";
import {
  has
} from "./chunk-4V6374PV.js";

// node_modules/@arcgis/core/layers/effects/EffectView.js
var l = -1;
var a2 = class extends g {
  constructor(t3) {
    super(t3), this._from = null, this._to = null, this._final = null, this._current = [], this._time = 0, this.duration = has("mapview-transitions-duration"), this.effects = [];
  }
  set effect(t3) {
    if (this._get("effect") !== (t3 = t3 || "")) {
      this._set("effect", t3);
      try {
        this._transitionTo(h(t3));
      } catch (e6) {
        this._transitionTo([]), s.getLogger(this).warn("Invalid Effect", { effect: t3, error: e6 });
      }
    }
  }
  get hasEffects() {
    return this.transitioning || !!this.effects.length;
  }
  set scale(t3) {
    this._updateForScale(t3);
  }
  get transitioning() {
    return null !== this._to;
  }
  canTransitionTo(t3) {
    try {
      return this.scale > 0 && u(this._current, h(t3), this.scale);
    } catch {
      return false;
    }
  }
  transitionStep(t3, e6) {
    this._applyTimeTransition(t3), this._updateForScale(e6);
  }
  endTransitions() {
    this._applyTimeTransition(this.duration);
  }
  _transitionTo(t3) {
    this.scale > 0 && u(this._current, t3, this.scale) ? (this._final = t3, this._to = a(t3), _(this._current, this._to, this.scale), this._from = a(this._current), this._time = 0) : (this._from = this._to = this._final = null, this._current = t3), this._set("effects", this._current[0] ? a(this._current[0].effects) : []);
  }
  _applyTimeTransition(t3) {
    if (!(this._to && this._from && this._current && this._final))
      return;
    this._time += t3;
    const e6 = Math.min(1, this._time / this.duration);
    for (let s4 = 0; s4 < this._current.length; s4++) {
      const t4 = this._current[s4], r = this._from[s4], i3 = this._to[s4];
      t4.scale = p(r.scale, i3.scale, e6);
      for (let s5 = 0; s5 < t4.effects.length; s5++) {
        const n2 = t4.effects[s5], c2 = r.effects[s5], o3 = i3.effects[s5];
        n2.interpolate(c2, o3, e6);
      }
    }
    1 === e6 && (this._current = this._final, this._set("effects", this._current[0] ? a(this._current[0].effects) : []), this._from = this._to = this._final = null);
  }
  _updateForScale(t3) {
    if (this._set("scale", t3), 0 === this._current.length)
      return;
    const e6 = this._current, s4 = this._current.length - 1;
    let r, i3, n2 = 1;
    if (1 === e6.length || t3 >= e6[0].scale)
      i3 = r = e6[0].effects;
    else if (t3 <= e6[s4].scale)
      i3 = r = e6[s4].effects;
    else
      for (let c2 = 0; c2 < s4; c2++) {
        const s5 = e6[c2], o3 = e6[c2 + 1];
        if (s5.scale >= t3 && o3.scale <= t3) {
          n2 = (t3 - s5.scale) / (o3.scale - s5.scale), r = s5.effects, i3 = o3.effects;
          break;
        }
      }
    for (let c2 = 0; c2 < this.effects.length; c2++) {
      this.effects[c2].interpolate(r[c2], i3[c2], n2);
    }
  }
};
function h(t3) {
  const e6 = y2(t3) || [];
  return m(e6) ? [{ scale: l, effects: e6 }] : e6;
}
function u(t3, e6, s4) {
  var _a, _b, _c, _d;
  if (!((_a = t3[0]) == null ? void 0 : _a.effects) || !((_b = e6[0]) == null ? void 0 : _b.effects))
    return true;
  return !((((_c = t3[0]) == null ? void 0 : _c.scale) === l || ((_d = e6[0]) == null ? void 0 : _d.scale) === l) && (t3.length > 1 || e6.length > 1) && s4 <= 0) && t(t3[0].effects, e6[0].effects);
}
function _(t3, e6, s4) {
  const r = t3.length > e6.length ? t3 : e6, i3 = t3.length > e6.length ? e6 : t3, n2 = i3[i3.length - 1], c2 = (n2 == null ? void 0 : n2.scale) ?? s4, o3 = (n2 == null ? void 0 : n2.effects) ?? [];
  for (let f = i3.length; f < r.length; f++)
    i3.push({ scale: c2, effects: [...o3] });
  for (let a4 = 0; a4 < r.length; a4++)
    i3[a4].scale = i3[a4].scale === l ? s4 : i3[a4].scale, r[a4].scale = r[a4].scale === l ? s4 : r[a4].scale, e2(i3[a4].effects, r[a4].effects);
}
function p(t3, e6, s4) {
  return t3 + (e6 - t3) * s4;
}
function m(t3) {
  const e6 = t3[0];
  return !!e6 && "type" in e6;
}
e([y()], a2.prototype, "_to", void 0), e([y()], a2.prototype, "duration", void 0), e([y({ value: "" })], a2.prototype, "effect", null), e([y({ readOnly: true })], a2.prototype, "effects", void 0), e([y({ readOnly: true })], a2.prototype, "hasEffects", null), e([y({ value: 0 })], a2.prototype, "scale", null), e([y({ readOnly: true })], a2.prototype, "transitioning", null), a2 = e([c("esri.layers.effects.EffectView")], a2);

// node_modules/@arcgis/core/views/2d/engine/DisplayObject.js
var s2 = 1 / has("mapview-transitions-duration");
var i = class extends o {
  constructor() {
    super(...arguments), this._fadeOutResolver = null, this._fadeInResolver = null, this._clips = null, this.computedVisible = true, this.computedOpacity = 1, this.fadeTransitionEnabled = false, this.inFadeTransition = false, this._isReady = false, this._opacity = 1, this.parent = null, this._stage = null, this._visible = true;
  }
  get clips() {
    return this._clips;
  }
  set clips(e6) {
    this._clips = e6, this.requestRender();
  }
  get isReady() {
    return this._isReady;
  }
  get opacity() {
    return this._opacity;
  }
  set opacity(e6) {
    this._opacity !== e6 && (this._opacity = Math.min(1, Math.max(e6, 0)), this.requestRender());
  }
  get stage() {
    return this._stage;
  }
  set stage(e6) {
    var _a;
    if (this._stage === e6)
      return;
    const t3 = this._stage;
    this._stage = e6, e6 ? ((_a = this._stage) == null ? void 0 : _a.untrashDisplayObject(this)) || (this.onAttach(), this.emit("attach")) : t3 == null ? void 0 : t3.trashDisplayObject(this);
  }
  get transforms() {
    return this._getTransforms();
  }
  _getTransforms() {
    return null == this._transforms && (this._transforms = this._createTransforms()), this._transforms;
  }
  get visible() {
    return this._visible;
  }
  set visible(e6) {
    this._visible !== e6 && (this._visible = e6, this.requestRender());
  }
  get hasLabels() {
    return false;
  }
  get hasHighlight() {
    return false;
  }
  get hasBlending() {
    return false;
  }
  fadeIn() {
    return this._fadeInResolver || (this._fadeOutResolver && (this._fadeOutResolver(), this._fadeOutResolver = null), this.opacity = 1, this.computedOpacity = 0, this.fadeTransitionEnabled = true, this._fadeInResolver = C(), this.requestRender()), this._fadeInResolver.promise;
  }
  fadeOut() {
    return this._fadeOutResolver || (this.opacity = 0, this._fadeInResolver && (this._fadeInResolver(), this._fadeInResolver = null), this.fadeTransitionEnabled = true, this._fadeOutResolver = C(), this.requestRender()), this._fadeOutResolver.promise;
  }
  endTransitions() {
    var _a, _b;
    (_a = this._fadeInResolver) == null ? void 0 : _a.call(this), this._fadeInResolver = null, (_b = this._fadeOutResolver) == null ? void 0 : _b.call(this), this._fadeOutResolver = null, this.computedOpacity = this.visible ? this.opacity : 0, this.requestRender();
  }
  beforeRender(e6) {
    this.updateTransitionProperties(e6.deltaTime, e6.state.scale), this.setTransform(e6.state);
  }
  afterRender(e6) {
    this._fadeInResolver && this.computedOpacity === this.opacity ? (this._fadeInResolver(), this._fadeInResolver = null) : this._fadeOutResolver && 0 === this.computedOpacity && (this._fadeOutResolver(), this._fadeOutResolver = null);
  }
  remove() {
    var _a;
    (_a = this.parent) == null ? void 0 : _a.removeChild(this);
  }
  setTransform(e6) {
  }
  processRender(e6) {
    this.stage && this.computedVisible && this.doRender(e6);
  }
  requestRender() {
    this.stage && this.stage.requestRender();
  }
  processDetach() {
    this._fadeInResolver && (this._fadeInResolver(), this._fadeInResolver = null), this._fadeOutResolver && (this._fadeOutResolver(), this._fadeOutResolver = null), this.onDetach(), this.emit("detach");
  }
  updateTransitionProperties(e6, t3) {
    if (this.fadeTransitionEnabled) {
      const t4 = this._fadeOutResolver || !this.visible ? 0 : this.opacity, i3 = this.computedOpacity;
      if (i3 === t4)
        this.computedVisible = this.visible;
      else {
        const r = e6 * s2;
        this.computedOpacity = i3 > t4 ? Math.max(t4, i3 - r) : Math.min(t4, i3 + r), this.computedVisible = this.computedOpacity > 0;
        const a4 = t4 === this.computedOpacity;
        this.inFadeTransition = !a4, a4 || this.requestRender();
      }
    } else
      this.computedOpacity = this.opacity, this.computedVisible = this.visible;
  }
  onAttach() {
  }
  onDetach() {
  }
  doRender(e6) {
  }
  ready() {
    this._isReady || (this._isReady = true, this.emit("isReady"), this.requestRender());
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/parameters.js
var o2 = 1;
var t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1];
var i2 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
var n = 256;
var e5 = { outlineWidth: 1.3, outerHaloWidth: 0.4, innerHaloWidth: 0.4, outlinePosition: 0 };

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightGradient.js
var s3 = s.getLogger("esri.views.2d.engine.webgl.painter.highlight.HighlightGradient");
function a3(o3, i3) {
  i3.fillColor[0] = o3.color.r / 255, i3.fillColor[1] = o3.color.g / 255, i3.fillColor[2] = o3.color.b / 255, i3.fillColor[3] = o3.color.a, o3.haloColor ? (i3.outlineColor[0] = o3.haloColor.r / 255, i3.outlineColor[1] = o3.haloColor.g / 255, i3.outlineColor[2] = o3.haloColor.b / 255, i3.outlineColor[3] = o3.haloColor.a) : (i3.outlineColor[0] = i3.fillColor[0], i3.outlineColor[1] = i3.fillColor[1], i3.outlineColor[2] = i3.fillColor[2], i3.outlineColor[3] = i3.fillColor[3]), i3.fillColor[3] *= o3.fillOpacity, i3.outlineColor[3] *= o3.haloOpacity, i3.fillColor[0] *= i3.fillColor[3], i3.fillColor[1] *= i3.fillColor[3], i3.fillColor[2] *= i3.fillColor[3], i3.outlineColor[0] *= i3.outlineColor[3], i3.outlineColor[1] *= i3.outlineColor[3], i3.outlineColor[2] *= i3.outlineColor[3], i3.outlineWidth = e5.outlineWidth, i3.outerHaloWidth = e5.outerHaloWidth, i3.innerHaloWidth = e5.innerHaloWidth, i3.outlinePosition = e5.outlinePosition;
}
var u2 = [0, 0, 0, 0];
var d = class {
  constructor() {
    this._convertedHighlightOptions = { fillColor: [0.2 * 0.75, 0.6 * 0.75, 0.675, 0.75], outlineColor: [0.2 * 0.9, 0.54, 0.81, 0.9], outlinePosition: e5.outlinePosition, outlineWidth: e5.outlineWidth, innerHaloWidth: e5.innerHaloWidth, outerHaloWidth: e5.outerHaloWidth }, this._shadeTexChanged = true, this._texelData = new Uint8Array(4 * n), this._minMaxDistance = [0, 0];
  }
  setHighlightOptions(o3) {
    const i3 = this._convertedHighlightOptions;
    a3(o3, i3);
    const t3 = i3.outlinePosition - i3.outlineWidth / 2 - i3.outerHaloWidth, r = i3.outlinePosition - i3.outlineWidth / 2, n2 = i3.outlinePosition + i3.outlineWidth / 2, h3 = i3.outlinePosition + i3.outlineWidth / 2 + i3.innerHaloWidth, d2 = Math.sqrt(Math.PI / 2) * o2, C2 = Math.abs(t3) > d2 ? Math.round(10 * (Math.abs(t3) - d2)) / 10 : 0, f = Math.abs(h3) > d2 ? Math.round(10 * (Math.abs(h3) - d2)) / 10 : 0;
    let g2;
    C2 && !f ? s3.error("The outer rim of the highlight is " + C2 + "px away from the edge of the feature; consider reducing some width values or shifting the outline position towards positive values (inwards).") : !C2 && f ? s3.error("The inner rim of the highlight is " + f + "px away from the edge of the feature; consider reducing some width values or shifting the outline position towards negative values (outwards).") : C2 && f && s3.error("The highlight is " + Math.max(C2, f) + "px away from the edge of the feature; consider reducing some width values.");
    const c2 = [void 0, void 0, void 0, void 0];
    function m2(o4, i4, t4) {
      c2[0] = (1 - t4) * o4[0] + t4 * i4[0], c2[1] = (1 - t4) * o4[1] + t4 * i4[1], c2[2] = (1 - t4) * o4[2] + t4 * i4[2], c2[3] = (1 - t4) * o4[3] + t4 * i4[3];
    }
    const { _texelData: p2 } = this;
    for (let l2 = 0; l2 < n; ++l2)
      g2 = t3 + l2 / (n - 1) * (h3 - t3), g2 < t3 ? (c2[0] = 0, c2[1] = 0, c2[2] = 0, c2[3] = 0) : g2 < r ? m2(u2, i3.outlineColor, (g2 - t3) / (r - t3)) : g2 < n2 ? [c2[0], c2[1], c2[2], c2[3]] = i3.outlineColor : g2 < h3 ? m2(i3.outlineColor, i3.fillColor, (g2 - n2) / (h3 - n2)) : [c2[0], c2[1], c2[2], c2[3]] = i3.fillColor, p2[4 * l2] = 255 * c2[0], p2[4 * l2 + 1] = 255 * c2[1], p2[4 * l2 + 2] = 255 * c2[2], p2[4 * l2 + 3] = 255 * c2[3];
    this._minMaxDistance[0] = t3, this._minMaxDistance[1] = h3, this._shadeTexChanged = true;
  }
  applyHighlightOptions(o3, t3) {
    if (!this._shadeTex) {
      const i3 = new e4();
      i3.wrapMode = D.CLAMP_TO_EDGE, i3.width = n, i3.height = 1, this._shadeTex = new T(o3, i3);
    }
    this._shadeTexChanged && (this._shadeTex.updateData(0, 0, 0, n, 1, this._texelData), this._shadeTexChanged = false), o3.bindTexture(this._shadeTex, M), t3.setUniform2fv("u_minMaxDistance", this._minMaxDistance);
  }
  destroy() {
    var _a;
    (_a = this._shadeTex) == null ? void 0 : _a.dispose(), this._shadeTex = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/Container.js
var h2 = class extends i {
  constructor() {
    super(...arguments), this._childrenSet = /* @__PURE__ */ new Set(), this._needsSort = false, this.children = [], this._effectView = null, this._highlightOptions = null, this._highlightGradient = null;
  }
  get blendMode() {
    return this._blendMode;
  }
  set blendMode(e6) {
    this._blendMode = e6, this.requestRender();
  }
  get clips() {
    return this._clips;
  }
  set clips(e6) {
    this._clips = e6, this.children.forEach((t3) => t3.clips = e6);
  }
  get computedEffects() {
    var _a;
    return ((_a = this._effectView) == null ? void 0 : _a.effects) ?? null;
  }
  get effect() {
    var _a;
    return ((_a = this._effectView) == null ? void 0 : _a.effect) ?? "";
  }
  set effect(e6) {
    (this._effectView || e6) && (this._effectView || (this._effectView = new a2()), this._effectView.effect = e6, this.requestRender());
  }
  get highlightOptions() {
    return this._highlightOptions;
  }
  set highlightOptions(e6) {
    if (!e6)
      return this._highlightOptions = null, void (this._highlightGradient && (this._highlightGradient.destroy(), this._highlightGradient = null, this.requestRender()));
    this._highlightOptions && this._highlightOptions.equals(e6) || (this._highlightOptions = e6, this._highlightGradient || (this._highlightGradient = new d()), this._highlightGradient.setHighlightOptions(e6), this.requestRender());
  }
  get hasBlending() {
    return !!this.blendMode;
  }
  get hasHighlight() {
    return this.children.some((e6) => e6.hasHighlight);
  }
  get hasLabels() {
    return this.children.some((e6) => e6.hasLabels);
  }
  get requiresDedicatedFBO() {
    return this.children.some((e6) => "blendMode" in e6 && e6.blendMode && "normal" !== e6.blendMode);
  }
  updateTransitionProperties(e6, t3) {
    super.updateTransitionProperties(e6, t3), this._effectView && (this._effectView.transitionStep(e6, t3), this._effectView.transitioning && this.requestRender());
  }
  doRender(e6) {
    var _a;
    const t3 = this.createRenderParams(e6), { painter: i3 } = t3;
    i3.beforeRenderLayer(t3, ((_a = this._clips) == null ? void 0 : _a.length) ? 255 : 0, this.computedOpacity), this.renderChildren(t3), i3.afterRenderLayer(t3, this.computedOpacity);
  }
  addChild(e6) {
    return this.addChildAt(e6, this.children.length);
  }
  addChildAt(e6, t3 = this.children.length) {
    if (!e6)
      return e6;
    if (this.contains(e6))
      return e6;
    this._needsSort = true;
    const i3 = e6.parent;
    return i3 && i3 !== this && i3.removeChild(e6), t3 >= this.children.length ? this.children.push(e6) : this.children.splice(t3, 0, e6), this._childrenSet.add(e6), e6.parent = this, e6.stage = this.stage, this !== this.stage && (e6.clips = this.clips), this.requestRender(), e6;
  }
  contains(e6) {
    return this._childrenSet.has(e6);
  }
  endTransitions() {
    super.endTransitions(), this._effectView && (this._effectView.endTransitions(), this.requestRender());
  }
  removeAllChildren() {
    this._childrenSet.clear(), this._needsSort = true;
    for (const e6 of this.children)
      this !== this.stage && (e6.clips = null), e6.stage = null, e6.parent = null;
    this.children.length = 0;
  }
  removeChild(e6) {
    return this.contains(e6) ? this.removeChildAt(this.children.indexOf(e6)) : e6;
  }
  removeChildAt(e6) {
    if (e6 < 0 || e6 >= this.children.length)
      return null;
    this._needsSort = true;
    const t3 = this.children.splice(e6, 1)[0];
    return this._childrenSet.delete(t3), this !== this.stage && (t3.clips = null), t3.stage = null, t3.parent = null, t3;
  }
  sortChildren(e6) {
    this._needsSort && (this.children.sort(e6), this._needsSort = false);
  }
  beforeRender(e6) {
    super.beforeRender(e6);
    for (const t3 of this.children)
      t3.beforeRender(e6);
  }
  afterRender(e6) {
    super.afterRender(e6);
    for (const t3 of this.children)
      t3.afterRender(e6);
  }
  _createTransforms() {
    return { dvs: e3() };
  }
  onAttach() {
    super.onAttach();
    const e6 = this.stage;
    for (const t3 of this.children)
      t3.stage = e6;
  }
  onDetach() {
    super.onDetach();
    for (const e6 of this.children)
      e6.stage = null;
  }
  renderChildren(e6) {
    for (const t3 of this.children)
      t3.processRender(e6);
  }
  createRenderParams(e6) {
    return { ...e6, requireFBO: this.requiresDedicatedFBO, blendMode: this.blendMode, effects: this.computedEffects, globalOpacity: e6.globalOpacity * this.computedOpacity, inFadeTransition: this.inFadeTransition, highlightGradient: this._highlightGradient || e6.highlightGradient };
  }
};

export {
  a2 as a,
  i,
  o2 as o,
  t2 as t,
  i2,
  h2 as h
};
//# sourceMappingURL=chunk-ULPUCHVC.js.map
