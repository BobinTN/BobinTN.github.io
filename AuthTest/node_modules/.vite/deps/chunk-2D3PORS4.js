import {
  j
} from "./chunk-WZPOQGKL.js";
import {
  m
} from "./chunk-CCXEAKIM.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import {
  o
} from "./chunk-WURET5CW.js";
import {
  s as s3
} from "./chunk-OMPEZIP5.js";
import {
  a as a2
} from "./chunk-SJZIFARA.js";
import {
  G,
  Y,
  _,
  t3 as t,
  tt
} from "./chunk-R5DM4YAB.js";
import {
  u2 as u
} from "./chunk-NSRXJNTS.js";
import {
  g,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c,
  v
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a,
  l,
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/portal/PortalItemResource.js
var n = class extends g {
  constructor(t2) {
    super(t2), this.portalItem = null;
  }
  normalizeCtorArgs(t2) {
    return (t2 == null ? void 0 : t2.portalItem) && t2.path ? { ...t2, path: this._normalizePath(t2.path, t2.portalItem) } : t2;
  }
  set path(t2) {
    null != t2 && Y(t2) ? s.getLogger(this).error("portalitemresource:invalid-path", "A portal item resource path must be relative") : this._set("path", t2);
  }
  _castPath(t2) {
    return this._normalizePath(t2, this.portalItem);
  }
  get url() {
    return this.portalItem && this.path ? `${this.portalItem.itemUrl}/resources/${this.path}` : null;
  }
  get cdnUrl() {
    return this.portalItem && this.path ? `${this.portalItem.itemCdnUrl}/resources/${this.path}` : null;
  }
  get itemRelativeUrl() {
    return this.portalItem && this.path ? `./resources/${this.path}` : null;
  }
  fetch(t2 = "json", r) {
    const o2 = this.cdnUrl;
    if (null == o2)
      throw new s2("portal-item-resource:fetch", "Portal item resource does not refer to a valid item or path");
    return this.portalItem.portal.request(o2, { responseType: t2, query: { token: this.portalItem.apiKey }, signal: r == null ? void 0 : r.signal });
  }
  async update(t2, r) {
    const { addOrUpdateResource: e3 } = await import("./resourceUtils-YVI5XFRT.js");
    return e3(this, "update", t2, r);
  }
  hasPath() {
    return null != this.path;
  }
  _normalizePath(t2, r) {
    return null == t2 ? t2 : (t2 = t2.replace(/^\/+/, ""), null != r && Y(t2) && (t2 = G(t2, r.itemUrl)), t2 == null ? void 0 : t2.replace(/^\/+/, "").replace(/^(\.\/)?resources\//, ""));
  }
};
e([y()], n.prototype, "portalItem", void 0), e([y({ type: String, value: null })], n.prototype, "path", null), e([s3("path")], n.prototype, "_castPath", null), e([y({ type: String, readOnly: true })], n.prototype, "url", null), e([y({ type: String, readOnly: true })], n.prototype, "cdnUrl", null), e([y({ type: String, readOnly: true })], n.prototype, "itemRelativeUrl", null), n = e([c("esri.portal.PortalItemResource")], n);
var u2 = n;

// node_modules/@arcgis/core/portal/PortalRating.js
var e2 = class extends g {
  constructor(r) {
    super(r), this.created = null, this.rating = null;
  }
};
e([y()], e2.prototype, "created", void 0), e([y()], e2.prototype, "rating", void 0), e2 = e([c("esri.portal.PortalRating")], e2);
var c2 = e2;

// node_modules/@arcgis/core/portal/PortalItem.js
var w;
var f = /* @__PURE__ */ new Set(["Map Service", "Feature Service", "Feature Collection", "Scene Service", "Image Service", "Stream Service", "Vector Tile Service", "GeoJson", "CSV", "KML", "WFS", "WMTS", "WMS", "Feed"]);
var b = /* @__PURE__ */ new Set(["KML", "GeoJson", "CSV"]);
var k = w = class extends u(m) {
  static from(e3) {
    return v(w, e3);
  }
  constructor(e3) {
    super(e3), this.access = null, this.accessInformation = null, this.apiKey = null, this.applicationProxies = null, this.avgRating = null, this.categories = null, this.created = null, this.culture = null, this.description = null, this.extent = null, this.groupCategories = null, this.id = null, this.isOrgItem = false, this.itemControl = null, this.licenseInfo = null, this.modified = null, this.name = null, this.numComments = null, this.numRatings = null, this.numViews = null, this.owner = null, this.ownerFolder = null, this.portal = null, this.screenshots = null, this.size = null, this.snippet = null, this.sourceJSON = null, this.sourceUrl = null, this.spatialReference = null, this.tags = null, this.title = null, this.type = null, this.typeKeywords = null, this.url = null;
  }
  destroy() {
    this.portal = null;
  }
  get displayName() {
    const e3 = this.type, t2 = this.typeKeywords || [];
    let i = e3;
    return "Feature Service" === e3 || "Feature Collection" === e3 ? i = t2.includes("Table") ? "Table" : t2.includes("Route Layer") ? "Route Layer" : t2.includes("Markup") ? "Markup" : "Feature Layer" : "Image Service" === e3 ? i = t2.includes("Elevation 3D Layer") ? "Elevation Layer" : t2.includes("Tiled Imagery") ? "Tiled Imagery Layer" : "Imagery Layer" : "Scene Service" === e3 ? i = "Scene Layer" : "Video Service" === e3 ? i = "Video Layer" : "Scene Package" === e3 ? i = "Scene Layer Package" : "Stream Service" === e3 ? i = "Feature Layer" : "Geoprocessing Service" === e3 ? i = t2.includes("Web Tool") ? "Tool" : "Geoprocessing Service" : "Geocoding Service" === e3 ? i = "Locator" : "Geoenrichment Service" === e3 ? i = "GeoEnrichment Service" : "Microsoft Powerpoint" === e3 ? i = "Microsoft PowerPoint" : "GeoJson" === e3 ? i = "GeoJSON" : "Globe Service" === e3 ? i = "Globe Layer" : "Vector Tile Service" === e3 ? i = "Tile Layer" : "netCDF" === e3 ? i = "NetCDF" : "Map Service" === e3 ? i = t2.includes("Spatiotemporal") || !t2.includes("Hosted Service") && !t2.includes("Tiled") || t2.includes("Relational") ? "Map Image Layer" : "Tile Layer" : e3 && e3.toLowerCase().includes("add in") ? i = e3.replaceAll(/(add in)/gi, "Add-In") : "datastore catalog service" === e3 ? i = "Big Data File Share" : "Compact Tile Package" === e3 ? i = "Tile Package (tpkx)" : "OGCFeatureServer" === e3 ? i = "OGC Feature Layer" : "web mapping application" === e3 && t2.includes("configurableApp") ? i = "Instant App" : "Insights Page" === e3 ? i = "Insights Report" : "Excalibur Imagery Project" === e3 && (i = "Excalibur Project"), i;
  }
  readExtent(e3) {
    return e3 && e3.length ? new M(e3[0][0], e3[0][1], e3[1][0], e3[1][1]) : null;
  }
  get iconUrl() {
    var _a;
    const e3 = ((_a = this.type) == null ? void 0 : _a.toLowerCase()) || "", i = this.typeKeywords || [], r = "esri/images/portal/", o2 = "16";
    let s4, a3 = false, n2 = false, l2 = false, p = false, c3 = false, d = false, u3 = false;
    return e3.indexOf("service") > 0 || "feature collection" === e3 || "kml" === e3 || "wms" === e3 || "wmts" === e3 || "wfs" === e3 ? (a3 = i.includes("Hosted Service"), "feature service" === e3 || "feature collection" === e3 || "kml" === e3 || "wfs" === e3 ? (n2 = i.includes("Table"), l2 = i.includes("Route Layer"), p = i.includes("Markup"), c3 = i.includes("Spatiotemporal"), d = i.includes("UtilityNetwork"), s4 = c3 && n2 ? "spatiotemporaltable" : n2 ? "table" : l2 ? "routelayer" : p ? "markup" : c3 ? "spatiotemporal" : a3 ? "featureshosted" : d ? "utilitynetwork" : "features") : s4 = "map service" === e3 || "wms" === e3 || "wmts" === e3 ? a3 || i.includes("Tiled") || "wmts" === e3 ? "maptiles" : "mapimages" : "scene service" === e3 ? i.includes("Line") ? "sceneweblayerline" : i.includes("3DObject") ? "sceneweblayermultipatch" : i.includes("Point") ? "sceneweblayerpoint" : i.includes("IntegratedMesh") ? "sceneweblayermesh" : i.includes("PointCloud") ? "sceneweblayerpointcloud" : i.includes("Polygon") ? "sceneweblayerpolygon" : i.includes("Building") ? "sceneweblayerbuilding" : i.includes("Voxel") ? "sceneweblayervoxel" : "sceneweblayer" : "image service" === e3 ? i.includes("Elevation 3D Layer") ? "elevationlayer" : i.includes("Tiled Imagery") ? "tiledimagerylayer" : "imagery" : "stream service" === e3 ? "streamlayer" : "video service" === e3 ? i.includes("Live Stream") ? "livestreamvideolayer" : "videolayer" : "vector tile service" === e3 ? "vectortile" : "datastore catalog service" === e3 ? "datastorecollection" : "geocoding service" === e3 ? "geocodeservice" : "geoprocessing service" === e3 ? i.includes("Web Tool") ? "tool" : "layers" : "geodata service" === e3 ? "geodataservice" : "3dtiles service" === e3 ? "3dtileslayer" : "layers") : "web map" === e3 || "cityengine web scene" === e3 ? s4 = "maps" : "web scene" === e3 ? s4 = i.includes("ViewingMode-Local") ? "webscenelocal" : "websceneglobal" : "web mapping application" === e3 && i.includes("configurableApp") ? s4 = "instantapps" : "web mapping application" === e3 || "mobile application" === e3 || "application" === e3 || "operation view" === e3 || "desktop application" === e3 ? s4 = "apps" : "map document" === e3 || "map package" === e3 || "published map" === e3 || "scene document" === e3 || "globe document" === e3 || "basemap package" === e3 || "mobile basemap package" === e3 || "mobile map package" === e3 || "project package" === e3 || "project template" === e3 || "pro map" === e3 || "layout" === e3 || "layer" === e3 && i.includes("ArcGIS Pro") || "explorer map" === e3 && i.indexOf("Explorer Document") ? s4 = "mapsgray" : "service definition" === e3 || "csv" === e3 || "shapefile" === e3 || "cad drawing" === e3 || "geojson" === e3 || "netcdf" === e3 || "administrative report" === e3 ? s4 = "datafiles" : "explorer add in" === e3 || "desktop add in" === e3 || "windows viewer add in" === e3 || "windows viewer configuration" === e3 ? s4 = "appsgray" : "360 vr experience" === e3 ? s4 = "360vr" : "arcgis pro add in" === e3 || "arcgis pro configuration" === e3 ? s4 = "addindesktop" : "rule package" === e3 || "file geodatabase" === e3 || "sqlite geodatabase" === e3 || "csv collection" === e3 || "kml collection" === e3 || "windows mobile package" === e3 || "map template" === e3 || "desktop application template" === e3 || "gml" === e3 || "arcpad package" === e3 || "code sample" === e3 || "document link" === e3 || "earth configuration" === e3 || "operations dashboard add in" === e3 || "rules package" === e3 || "image" === e3 || "workflow manager package" === e3 || "explorer map" === e3 && i.includes("Explorer Mapping Application") || i.includes("Document") ? s4 = "datafilesgray" : "network analysis service" === e3 || "geoprocessing service" === e3 || "geodata service" === e3 || "geometry service" === e3 || "geoprocessing package" === e3 || "locator package" === e3 || "geoprocessing sample" === e3 || "workflow manager service" === e3 ? s4 = "toolsgray" : "layer" === e3 || "layer package" === e3 || "explorer layer" === e3 ? s4 = "layersgray" : "scene package" === e3 ? s4 = "scenepackage" : "3dtiles package" === e3 ? s4 = "3dtileslayerpackage" : "mobile scene package" === e3 ? s4 = "mobilescenepackage" : "tile package" === e3 || "compact tile package" === e3 ? s4 = "tilepackage" : "task file" === e3 ? s4 = "taskfile" : "report template" === e3 ? s4 = "report-template" : "statistical data collection" === e3 ? s4 = "statisticaldatacollection" : "insights workbook" === e3 ? s4 = "workbook" : "insights model" === e3 ? s4 = "insightsmodel" : "insights page" === e3 ? s4 = "insightspage" : "insights theme" === e3 ? s4 = "insightstheme" : "hub initiative" === e3 ? s4 = "hubinitiative" : "hubpage" === e3 ? s4 = "hubpage" : "hub event" === e3 ? s4 = "hubevent" : "hub site application" === e3 ? s4 = "hubsite" : "hub project" === e3 ? s4 = "hubproject" : "relational database connection" === e3 ? s4 = "relationaldatabaseconnection" : "big data file share" === e3 ? s4 = "datastorecollection" : "image collection" === e3 ? s4 = "imagecollection" : "style" === e3 ? s4 = "style" : "desktop style" === e3 ? s4 = "desktopstyle" : "dashboard" === e3 ? s4 = "dashboard" : "raster function template" === e3 ? s4 = "rasterprocessingtemplate" : "vector tile package" === e3 ? s4 = "vectortilepackage" : "ortho mapping project" === e3 ? s4 = "orthomappingproject" : "ortho mapping template" === e3 ? s4 = "orthomappingtemplate" : "solution" === e3 ? s4 = "solutions" : "geopackage" === e3 ? s4 = "geopackage" : "deep learning package" === e3 ? s4 = "deeplearningpackage" : "real time analytic" === e3 ? s4 = "realtimeanalytics" : "big data analytic" === e3 ? s4 = "bigdataanalytics" : "feed" === e3 ? s4 = "feed" : "excalibur imagery project" === e3 ? s4 = "excaliburimageryproject" : "notebook" === e3 ? s4 = "notebook" : "storymap" === e3 ? s4 = "storymap" : "survey123 add in" === e3 ? s4 = "survey123addin" : "mission" === e3 ? s4 = "mission" : "mission report" === e3 ? s4 = "missionreport" : "mission template" === e3 ? s4 = "missiontemplate" : "quickcapture project" === e3 ? s4 = "quickcaptureproject" : "pro report" === e3 ? s4 = "proreport" : "pro report template" === e3 ? s4 = "proreporttemplate" : "urban model" === e3 ? s4 = "urbanmodel" : "web experience" === e3 ? s4 = "experiencebuilder" : "web experience template" === e3 ? s4 = "webexperiencetemplate" : "experience builder widget" === e3 ? s4 = "experiencebuilderwidget" : "experience builder widget package" === e3 ? s4 = "experiencebuilderwidgetpackage" : "workflow" === e3 ? s4 = "workflow" : "insights script" === e3 ? s4 = "insightsscript" : "kernel gateway connection" === e3 ? s4 = "kernelgatewayconnection" : "hub initiative template" === e3 ? s4 = "hubinitiativetemplate" : "storymap theme" === e3 ? s4 = "storymaptheme" : "knowledge graph" === e3 ? s4 = "knowledgegraph" : "knowledge studio project" === e3 ? s4 = "knowledgestudio" : "native application" === e3 ? s4 = "nativeapp" : "native application installer" === e3 ? s4 = "nativeappinstaller" : "link chart" === e3 ? s4 = "linkchart" : "investigation" === e3 ? s4 = "investigation" : "ogcfeatureserver" === e3 ? s4 = "features" : "pro project" === e3 ? s4 = "proproject" : "insights workbook package" === e3 ? s4 = "insightsworkbookpackage" : "apache parquet" === e3 ? s4 = "apacheparquet" : "notebook code snippets" === e3 || "notebook code snippet library" === e3 ? s4 = "notebookcodesnippets" : "suitability model" === e3 ? s4 = "suitabilitymodel" : "esri classifier definition" === e3 ? s4 = "classifierdefinition" : "esri classification schema" === e3 ? s4 = "classificationschema" : "insights data engineering workbook" === e3 ? s4 = "dataengineeringworkbook" : "insights data engineering model" === e3 ? s4 = "dataengineeringmodel" : "deep learning studio project" === e3 ? s4 = "deeplearningproject" : "discussion" === e3 ? s4 = "discussion" : "allsource project" === e3 ? s4 = "allsourceproject" : "api key" === e3 ? s4 = "apikey" : "data pipeline" === e3 ? s4 = "datapipelines" : "group layer" === e3 ? (u3 = i.includes("Map"), s4 = u3 ? "layergroup2d" : "layergroup") : s4 = "media layer" === e3 ? "onlinemedialayer" : "form" === e3 ? i.includes("Survey123") ? "survey" : "datafilesgray" : "maps", s4 ? a2(r + s4 + o2 + ".png") : null;
  }
  get isLayer() {
    return null != this.type && f.has(this.type);
  }
  get itemCdnUrl() {
    let e3 = this.itemUrl;
    return e3 && t && !t.findCredential(e3) && (e3 = t._normalizeAGOLorgDomain(e3), e3 = e3.replace(/^https?:\/\/www\.arcgis\.com/, "https://cdn.arcgis.com"), e3 = e3.replace(/^https?:\/\/devext\.arcgis\.com/, "https://cdndev.arcgis.com"), e3 = e3.replace(/^https?:\/\/qaext\.arcgis\.com/, "https://cdnqa.arcgis.com")), e3;
  }
  get itemPageUrl() {
    var _a;
    const e3 = (_a = this.portal) == null ? void 0 : _a.itemPageUrl;
    return e3 && this.id ? `${e3}?id=${this.id}` : null;
  }
  get itemUrl() {
    var _a;
    const e3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return e3 && this.id ? `${e3}/content/items/${this.id}` : null;
  }
  get thumbnailUrl() {
    var _a;
    const e3 = this.itemUrl, t2 = this.thumbnail;
    return e3 && t2 ? ((_a = this.portal) == null ? void 0 : _a.normalizeUrl(`${e3}/info/${t2}?f=json`)) ?? null : null;
  }
  get userItemUrl() {
    var _a, _b, _c;
    const e3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    if (!e3)
      return null;
    const t2 = this.owner || ((_c = (_b = this.portal) == null ? void 0 : _b.user) == null ? void 0 : _c.username);
    if (!t2)
      return null;
    return `${e3}/content/users/${this.ownerFolder ? `${t2}/${this.ownerFolder}` : t2}/items/${this.id}`;
  }
  load(e3) {
    const t2 = this.portal ?? (this.portal = j.getDefault()), i = t2.load(e3).then(() => this.sourceJSON ? this.sourceJSON : this.id && this.itemUrl ? t2.request(this.itemUrl, { signal: null != e3 ? e3.signal : null, query: { token: this.apiKey } }) : {}).then((e4) => {
      this.sourceJSON = e4, this.read(e4);
    });
    return this.addResolvingPromise(i), Promise.resolve(this);
  }
  async addRating(e3) {
    const t2 = { method: "post", query: {} };
    return e3 instanceof c2 && (e3 = e3.rating), null == e3 || isNaN(e3) || "number" != typeof e3 || (t2.query.rating = e3), this.portal ? (await this.portal.request(this.itemUrl + "/addRating", t2), new c2({ rating: e3, created: /* @__PURE__ */ new Date() })) : null;
  }
  clone() {
    const e3 = { access: this.access, accessInformation: this.accessInformation, applicationProxies: a(this.applicationProxies), avgRating: this.avgRating, categories: a(this.categories), created: a(this.created), culture: this.culture, description: this.description, extent: a(this.extent), groupCategories: a(this.groupCategories), id: this.id, itemControl: this.itemControl, licenseInfo: this.licenseInfo, modified: a(this.modified), name: this.name, numComments: this.numComments, numRatings: this.numRatings, numViews: this.numViews, owner: this.owner, ownerFolder: this.ownerFolder, portal: this.portal, screenshots: a(this.screenshots), size: this.size, snippet: this.snippet, sourceUrl: this.sourceUrl, spatialReference: this.spatialReference, tags: a(this.tags), thumbnail: this.thumbnail, title: this.title, type: this.type, typeKeywords: a(this.typeKeywords), url: this.url };
    this.loaded && (e3.loadStatus = "loaded");
    const t2 = new w({ sourceJSON: this.sourceJSON }).set(e3);
    return t2._set("isOrgItem", this.isOrgItem), t2;
  }
  createPostQuery() {
    var _a;
    const e3 = this.toJSON();
    for (const i of ["tags", "typeKeywords", "categories"])
      e3[i] = (_a = e3[i]) == null ? void 0 : _a.join(", ");
    const { extent: t2 } = e3;
    return t2 && (e3.extent = JSON.stringify(t2)), e3;
  }
  async deleteRating() {
    await this.portal.request(this.itemUrl + "/deleteRating", { method: "post" });
  }
  fetchData(e3 = "json", t2) {
    return this.portal.request(this.itemUrl + "/data", { responseType: e3, ...t2, query: { token: this.apiKey } });
  }
  async fetchRating(e3) {
    const t2 = await this.portal.request(this.itemUrl + "/rating", { query: { token: this.apiKey }, ...e3 });
    return null != t2.rating ? (t2.created = new Date(t2.created), new c2(t2)) : null;
  }
  fetchRelatedItems(e3, t2) {
    return this.portal.requestToTypedArray(this.itemUrl + "/relatedItems", { query: { ...e3, token: this.apiKey }, ...t2 }, w);
  }
  getThumbnailUrl(e3) {
    let t2 = this.thumbnailUrl;
    return t2 && e3 && (t2 += `&w=${e3}`), t2;
  }
  reload() {
    return this.portal.request(this.itemUrl ?? "", { cacheBust: true, query: { token: this.apiKey } }).then((e3) => (this.sourceJSON = e3, this.read(e3), this));
  }
  update(e3) {
    return this.id ? this.load().then(() => this.portal.signIn()).then(() => {
      const t2 = e3 == null ? void 0 : e3.data, i = { method: "post" };
      i.query = this.createPostQuery();
      for (const e4 in i.query)
        null === i.query[e4] && (i.query[e4] = "");
      return i.query.clearEmptyFields = true, null != t2 && ("string" == typeof t2 ? i.query.text = t2 : "object" == typeof t2 && (i.query.text = JSON.stringify(t2))), this.portal.request(`${this.userItemUrl}/update`, i).then(() => this.reload());
    }) : Promise.reject(new s2("portal:item-does-not-exist", "The item does not exist yet and cannot be updated"));
  }
  async copy(e3) {
    if (!this.id)
      throw new s2("portal:item-does-not-exist", "The item does not exist yet");
    await this.load();
    const { portal: t2, itemUrl: i } = this;
    await t2.signIn();
    const { copyResources: o2, folder: s4, tags: a3, title: n2 } = e3 || {}, l2 = { method: "post", query: { copyPrivateResources: "all" === o2, folder: "string" == typeof s4 ? s4 : s4 == null ? void 0 : s4.id, includeResources: !!o2, tags: a3 == null ? void 0 : a3.join(","), title: n2 } }, { itemId: p } = await t2.request(`${i}/copy`, l2);
    return new w({ id: p, portal: t2 });
  }
  updateThumbnail(e3) {
    return this.id ? this.load().then(() => this.portal.signIn()).then(() => {
      const t2 = e3.thumbnail, i = e3.filename, r = { method: "post" };
      if ("string" == typeof t2)
        tt(t2) ? r.query = { data: t2 } : r.query = { url: _(t2) }, null != i && (r.query.filename = i);
      else {
        const e4 = new FormData();
        null != i ? e4.append("file", t2, i) : e4.append("file", t2), r.body = e4;
      }
      return this.portal.request(`${this.userItemUrl}/updateThumbnail`, r).then(() => this.reload());
    }) : Promise.reject(new s2("portal:item-does-not-exist", "The item does not exist yet and cannot be updated"));
  }
  async fetchResources(e3 = {}, t2) {
    const { fetchResources: i } = await import("./resourceUtils-YVI5XFRT.js");
    return i(this, e3, t2);
  }
  async addResource(e3, t2, i) {
    const { addOrUpdateResource: r } = await import("./resourceUtils-YVI5XFRT.js");
    return e3.portalItem = this, r(e3, "add", t2, i);
  }
  async removeResource(e3, t2) {
    const { removeResource: i } = await import("./resourceUtils-YVI5XFRT.js");
    if (e3.portalItem && e3.portalItem.itemUrl !== this.itemUrl)
      throw new s2("removeresource:portal-item-mismatch", "The portal item associated with the provided resource does not match the item");
    return i(this, e3, t2);
  }
  async removeAllResources(e3) {
    const { removeAllResources: t2 } = await import("./resourceUtils-YVI5XFRT.js");
    return t2(this, e3);
  }
  resourceFromPath(e3) {
    return new u2({ portalItem: this, path: e3 });
  }
  toJSON() {
    var _a, _b;
    const e3 = this.extent, t2 = { accessInformation: this.accessInformation, categories: a(this.categories), created: (_a = this.created) == null ? void 0 : _a.getTime(), description: this.description, extent: e3 && [[e3.xmin, e3.ymin], [e3.xmax, e3.ymax]], id: this.id, isOrgItem: this.isOrgItem, licenseInfo: this.licenseInfo, modified: (_b = this.modified) == null ? void 0 : _b.getTime(), name: this.name, owner: this.owner, ownerFolder: this.ownerFolder, snippet: this.snippet, sourceUrl: this.sourceUrl, spatialReference: this.spatialReference, tags: a(this.tags), thumbnail: this.thumbnail, title: this.title, type: this.type, typeKeywords: a(this.typeKeywords), url: this.url };
    return l(t2);
  }
  static fromJSON(e3) {
    if (!e3)
      return null;
    if (e3.declaredClass)
      throw new Error("JSON object is already hydrated");
    return new w({ sourceJSON: e3 });
  }
  _getPostQuery() {
    const e3 = this.toJSON();
    for (const t2 in e3)
      "tags" === t2 && null !== e3[t2] && (e3[t2] = e3[t2].join(", ")), "typeKeywords" === t2 && null !== e3[t2] && (e3[t2] = e3[t2].join(", ")), "extent" === t2 && e3[t2] && (e3[t2] = JSON.stringify(e3[t2]));
    return e3;
  }
};
e([y({ type: ["private", "shared", "org", "public"] })], k.prototype, "access", void 0), e([y()], k.prototype, "accessInformation", void 0), e([y({ type: String })], k.prototype, "apiKey", void 0), e([y({ json: { read: { source: "appProxies" } } })], k.prototype, "applicationProxies", void 0), e([y()], k.prototype, "avgRating", void 0), e([y()], k.prototype, "categories", void 0), e([y({ type: Date })], k.prototype, "created", void 0), e([y()], k.prototype, "culture", void 0), e([y()], k.prototype, "description", void 0), e([y({ readOnly: true })], k.prototype, "displayName", null), e([y({ type: M })], k.prototype, "extent", void 0), e([o("extent")], k.prototype, "readExtent", null), e([y()], k.prototype, "groupCategories", void 0), e([y({ readOnly: true })], k.prototype, "iconUrl", null), e([y()], k.prototype, "id", void 0), e([y({ readOnly: true })], k.prototype, "isLayer", null), e([y({ type: Boolean, readOnly: true })], k.prototype, "isOrgItem", void 0), e([y()], k.prototype, "itemControl", void 0), e([y({ readOnly: true })], k.prototype, "itemPageUrl", null), e([y({ readOnly: true })], k.prototype, "itemUrl", null), e([y()], k.prototype, "licenseInfo", void 0), e([y({ type: Date })], k.prototype, "modified", void 0), e([y()], k.prototype, "name", void 0), e([y()], k.prototype, "numComments", void 0), e([y()], k.prototype, "numRatings", void 0), e([y()], k.prototype, "numViews", void 0), e([y()], k.prototype, "owner", void 0), e([y()], k.prototype, "ownerFolder", void 0), e([y({ type: j })], k.prototype, "portal", void 0), e([y()], k.prototype, "screenshots", void 0), e([y()], k.prototype, "size", void 0), e([y()], k.prototype, "snippet", void 0), e([y()], k.prototype, "sourceJSON", void 0), e([y({ type: String })], k.prototype, "sourceUrl", void 0), e([y({ type: String })], k.prototype, "spatialReference", void 0), e([y()], k.prototype, "tags", void 0), e([y()], k.prototype, "thumbnail", void 0), e([y({ readOnly: true })], k.prototype, "thumbnailUrl", null), e([y()], k.prototype, "title", void 0), e([y()], k.prototype, "type", void 0), e([y()], k.prototype, "typeKeywords", void 0), e([y({ type: String, json: { read(e3, t2) {
  var _a;
  if (b.has(t2.type)) {
    const t3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    e3 || (e3 = t3 && this.id ? `${t3}/content/items/${this.id}/data` : null);
  }
  return e3;
} } })], k.prototype, "url", void 0), e([y({ readOnly: true })], k.prototype, "userItemUrl", null), k = w = e([c("esri.portal.PortalItem")], k);
var S = k;

export {
  S
};
//# sourceMappingURL=chunk-2D3PORS4.js.map
