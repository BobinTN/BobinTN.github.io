import {
  n,
  o,
  r as r2
} from "./chunk-6AWJSEPC.js";
import {
  G,
  S,
  r as r3
} from "./chunk-6G6WAI5B.js";
import "./chunk-3U7ON3ZU.js";
import "./chunk-CQ6GN5T7.js";
import "./chunk-PH5FKUBS.js";
import "./chunk-NAWD2VOB.js";
import {
  a
} from "./chunk-ADJOAZCR.js";
import {
  a as a2
} from "./chunk-INVSGWP7.js";
import "./chunk-6QKODWQB.js";
import "./chunk-FRDRZ2UD.js";
import {
  re
} from "./chunk-FK3SCHPC.js";
import "./chunk-BSLKLRMY.js";
import "./chunk-FBWFFZ74.js";
import "./chunk-3Y5JS6MU.js";
import "./chunk-MPQZTJY3.js";
import "./chunk-GPOJ5GQM.js";
import "./chunk-VLDVHSJX.js";
import {
  m,
  u
} from "./chunk-TXY7QCH7.js";
import "./chunk-ULPUCHVC.js";
import "./chunk-DRBYLQY3.js";
import "./chunk-BV5PCIP6.js";
import "./chunk-UDTTHPQA.js";
import "./chunk-R72HXU5Y.js";
import "./chunk-63MRXB4A.js";
import "./chunk-PCTEA6NC.js";
import "./chunk-BXZIEADJ.js";
import "./chunk-L7TO2DFS.js";
import "./chunk-PTWYQEPE.js";
import "./chunk-BNTQULGG.js";
import "./chunk-A6KO3R3G.js";
import "./chunk-T56C4ORZ.js";
import "./chunk-RN5RTM2J.js";
import "./chunk-L6C4TBYZ.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-X2WF3O7G.js";
import "./chunk-MGMW5F44.js";
import "./chunk-ST3TBFQ6.js";
import "./chunk-DMXA3RSU.js";
import "./chunk-ODGAHKYT.js";
import "./chunk-NI23WAWZ.js";
import "./chunk-GBFYGM27.js";
import "./chunk-MXOY2B3L.js";
import "./chunk-NB4VIBDC.js";
import "./chunk-7PBKZJWC.js";
import "./chunk-JNWIDZDW.js";
import "./chunk-3XN3CFM5.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-MUSQVDUI.js";
import "./chunk-OG2GBCUQ.js";
import "./chunk-GSATUKJ4.js";
import "./chunk-TJGMKUCX.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-HR42LBYN.js";
import "./chunk-NS7I2ZSY.js";
import "./chunk-3S7E6CPQ.js";
import "./chunk-XI27PUTI.js";
import "./chunk-7REGXRO2.js";
import "./chunk-L2VCMOKZ.js";
import "./chunk-PHDOV32N.js";
import "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import "./chunk-OPV4AZKI.js";
import "./chunk-46VITINB.js";
import "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import "./chunk-RCLKRKWR.js";
import "./chunk-OYPRFNII.js";
import "./chunk-57KRYRCY.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-7Y57Y6IH.js";
import "./chunk-WND35VNG.js";
import "./chunk-W4QVNWBV.js";
import "./chunk-KXF4D4TD.js";
import "./chunk-DT2VHQBL.js";
import "./chunk-MJTRXEE4.js";
import "./chunk-2XWWTLSJ.js";
import "./chunk-P3R45ANF.js";
import "./chunk-QN7I7LNY.js";
import "./chunk-64EQFPYJ.js";
import "./chunk-ICVVQFO6.js";
import "./chunk-TTZWDXX5.js";
import "./chunk-3RBII4KE.js";
import "./chunk-SEKLTVY5.js";
import "./chunk-UPGPT5OX.js";
import "./chunk-S6MJEC4A.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-CKGVKMVG.js";
import "./chunk-CSWPLQ7Q.js";
import "./chunk-KWSMYM7P.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import "./chunk-GAJBN4TM.js";
import "./chunk-2S2NELNV.js";
import "./chunk-3II2L7GF.js";
import "./chunk-HIMMLBO7.js";
import "./chunk-JLSYG6MV.js";
import {
  i
} from "./chunk-2EG2F4T2.js";
import "./chunk-76KPSQLT.js";
import "./chunk-MVXU4PVF.js";
import "./chunk-ZBT4RUU7.js";
import {
  r
} from "./chunk-DZE6ZO7Z.js";
import {
  y as y2
} from "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import {
  h
} from "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import {
  e as e3
} from "./chunk-GJ4KNHRS.js";
import "./chunk-B7TIRUHV.js";
import "./chunk-EY7PGBJG.js";
import "./chunk-6M5DUIJQ.js";
import "./chunk-CMGHBCKF.js";
import "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import "./chunk-XUD6H4VO.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-X5VYGREB.js";
import "./chunk-J2R5B4T4.js";
import "./chunk-JIDGV6CL.js";
import "./chunk-24NOAXOQ.js";
import "./chunk-B3RXTW72.js";
import "./chunk-DCYI44X2.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-TWNBDJHC.js";
import "./chunk-4NU7FZD7.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-MLRHWRJQ.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-A43TI6AT.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import "./chunk-Y5D433JZ.js";
import "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import {
  d2 as d
} from "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  b,
  e as e2
} from "./chunk-RFPH3ZTZ.js";
import "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var V = [0, 0];
var v = class extends a2(r2(m(u))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new i(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e4) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e4.state, this._tileStrategy.update(e4), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e4);
  }
  attach() {
    const e4 = "tileServers" in this.layer ? this.layer.tileServers : null, i2 = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, i2 == null ? void 0 : i2.effectiveMinLOD, i2 == null ? void 0 : i2.effectiveMaxLOD), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: e4 && 10 * e4.length || 10, process: (e5, i3) => this.fetchTile(e5, i3) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e5) => this.acquireTile(e5), releaseTile: (e5) => this.releaseTile(e5), tileInfoView: this._tileInfoView }), S(this, this.layer)) {
      const e5 = this._highlightView = new re({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new a(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new G({ createFetchPopupFeaturesQueryGeometry: (e6, i3) => r3(e6, i3, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (i3, t) => {
        e5.graphicUpdateHandler({ graphic: i3, property: t });
      }, layerView: this, updatingHandles: this._updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(this._updatingHandles.add(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a, _b;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeatures(e4, i2) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeatures(e4, i2) : [];
  }
  highlight(e4) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.highlight(e4) : e2();
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e4) {
    var _a;
    return d((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e4);
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended)
        return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e4) => this._updatingHandles.addPromise(this._enqueueTileFetch(e4)));
    }
  }
  acquireTile(e4) {
    const i2 = this._bitmapView.createTile(e4), t = i2.bitmap;
    return [t.x, t.y] = this._tileInfoView.getTileCoords(V, i2.key), t.resolution = this._tileInfoView.getTileResolution(i2.key), [t.width, t.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(i2)), this._bitmapView.addChild(i2), this.requestUpdate(), i2;
  }
  releaseTile(e4) {
    this._fetchQueue.abort(e4.key.id), this._bitmapView.removeChild(e4), e4.once("detach", () => e4.destroy()), this.requestUpdate();
  }
  async fetchTile(e4, i2 = {}) {
    const t = this.tilemapCache, { signal: s2, resamplingLevel: o2 = 0 } = i2;
    if (!t)
      try {
        return await this._fetchImage(e4, s2);
      } catch (a3) {
        if (!b(a3) && !this.resampling)
          return o(this._tileInfoView.tileInfo.size);
        if (o2 < 3) {
          const t2 = this._tileInfoView.getTileParentId(e4.id);
          if (t2) {
            const r4 = new e3(t2), s3 = await this.fetchTile(r4, { ...i2, resamplingLevel: o2 + 1 });
            return n(this._tileInfoView, s3, r4, e4);
          }
        }
        throw a3;
      }
    const l = new e3(0, 0, 0, 0);
    let h2;
    try {
      if (await t.fetchAvailabilityUpsample(e4.level, e4.row, e4.col, l, { signal: s2 }), l.level !== e4.level && !this.resampling)
        return o(this._tileInfoView.tileInfo.size);
      h2 = await this._fetchImage(l, s2);
    } catch (a3) {
      if (b(a3))
        throw a3;
      h2 = await this._fetchImage(e4, s2);
    }
    return this.resampling ? n(this._tileInfoView, h2, l, e4) : h2;
  }
  async _enqueueTileFetch(e4) {
    if (!this._fetchQueue.has(e4.key.id)) {
      try {
        const i2 = await this._fetchQueue.push(e4.key);
        e4.bitmap.source = i2, e4.bitmap.width = this._tileInfoView.tileInfo.size[0], e4.bitmap.height = this._tileInfoView.tileInfo.size[1], e4.once("attach", () => this.requestUpdate());
      } catch (i2) {
        b(i2) || s.getLogger(this).error(i2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e4, i2) {
    return this.layer.fetchImageBitmapTile(e4.level, e4.row, e4.col, { signal: i2 });
  }
};
e([y()], v.prototype, "resampling", null), e([y()], v.prototype, "tilemapCache", null), v = e([c("esri.views.2d.layers.TileLayerView2D")], v);
var I = v;
export {
  I as default
};
//# sourceMappingURL=TileLayerView2D-EHTYFC7S.js.map
