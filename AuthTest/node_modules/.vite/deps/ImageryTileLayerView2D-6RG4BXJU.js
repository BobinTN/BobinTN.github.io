import {
  A,
  E as E2,
  O as O2,
  T as T3,
  _,
  c as c4,
  g as g3,
  h as h5,
  l,
  m as m2,
  p as p2
} from "./chunk-BXOPIFFF.js";
import {
  d as d2,
  f as f2,
  h as h4
} from "./chunk-WKC2TOHI.js";
import {
  a as a2
} from "./chunk-INVSGWP7.js";
import {
  i as i4
} from "./chunk-FBWFFZ74.js";
import {
  r as r5
} from "./chunk-MPQZTJY3.js";
import {
  r as r4
} from "./chunk-GPOJ5GQM.js";
import {
  n as n3,
  t as t2
} from "./chunk-VLDVHSJX.js";
import {
  m,
  u as u4
} from "./chunk-TXY7QCH7.js";
import {
  i as i3
} from "./chunk-ULPUCHVC.js";
import "./chunk-BV5PCIP6.js";
import "./chunk-BXZIEADJ.js";
import {
  a,
  g as g2,
  i as i2,
  u as u3
} from "./chunk-LRNGG7EZ.js";
import {
  o
} from "./chunk-RS353LH2.js";
import {
  E
} from "./chunk-A6KO3R3G.js";
import {
  T as T2,
  e2 as e3
} from "./chunk-T56C4ORZ.js";
import {
  p
} from "./chunk-L6C4TBYZ.js";
import {
  D as D2,
  ae,
  se,
  v
} from "./chunk-OQKR5TK4.js";
import {
  S,
  u2
} from "./chunk-ABKJC2RS.js";
import "./chunk-N3XMQQIW.js";
import "./chunk-MGMW5F44.js";
import "./chunk-DSGGSKRZ.js";
import "./chunk-UMP4LYVN.js";
import "./chunk-W3TATJ3S.js";
import "./chunk-LJAHTUH5.js";
import "./chunk-NS7I2ZSY.js";
import {
  T
} from "./chunk-TREPTI6V.js";
import "./chunk-Z26DT4RT.js";
import "./chunk-BUMLJETN.js";
import {
  c as c2
} from "./chunk-XFC7DZXI.js";
import "./chunk-PPQAHSM4.js";
import {
  D,
  G,
  L,
  O,
  P as P2,
  R,
  U
} from "./chunk-RCLKRKWR.js";
import "./chunk-747B2TEO.js";
import "./chunk-4NEWABLH.js";
import "./chunk-FW2Y26A2.js";
import "./chunk-5WG7GACT.js";
import "./chunk-P3R45ANF.js";
import {
  j as j2
} from "./chunk-WDO2BXGR.js";
import "./chunk-VA52CKTT.js";
import "./chunk-T3Y5GTKO.js";
import "./chunk-6BFXMZEZ.js";
import "./chunk-AMSVADDY.js";
import {
  lt
} from "./chunk-3II2L7GF.js";
import "./chunk-HIMMLBO7.js";
import {
  n as n2
} from "./chunk-JLSYG6MV.js";
import {
  e as e2
} from "./chunk-76KPSQLT.js";
import {
  n
} from "./chunk-MVXU4PVF.js";
import {
  r as r3
} from "./chunk-DZE6ZO7Z.js";
import {
  y as y2
} from "./chunk-HHX6IUJQ.js";
import "./chunk-2FFBPEOX.js";
import {
  h as h3
} from "./chunk-XHP7ONEC.js";
import "./chunk-X2Y3P2BF.js";
import "./chunk-GJ4KNHRS.js";
import "./chunk-EY7PGBJG.js";
import {
  t
} from "./chunk-6M5DUIJQ.js";
import {
  f
} from "./chunk-CMGHBCKF.js";
import {
  M as M2,
  b as b2,
  h,
  i,
  r as r2,
  s as s3
} from "./chunk-YVNEJWNQ.js";
import "./chunk-NDKHIQMD.js";
import {
  h as h2
} from "./chunk-XUD6H4VO.js";
import {
  j
} from "./chunk-CQMEHG4P.js";
import "./chunk-GZTU5O23.js";
import "./chunk-LOGPPZUD.js";
import "./chunk-HYU6N3H3.js";
import "./chunk-EC5POYCL.js";
import "./chunk-J2R5B4T4.js";
import "./chunk-JIDGV6CL.js";
import "./chunk-24NOAXOQ.js";
import {
  c as c3
} from "./chunk-B3RXTW72.js";
import "./chunk-DCYI44X2.js";
import "./chunk-JHJVOI7Q.js";
import "./chunk-4NU7FZD7.js";
import "./chunk-WYZCKLOR.js";
import "./chunk-S6NERLXF.js";
import "./chunk-MLRHWRJQ.js";
import "./chunk-H4ZZ5S37.js";
import "./chunk-G557TGXY.js";
import "./chunk-WOGT6UK2.js";
import "./chunk-RHT6WWRD.js";
import "./chunk-EUGXS5RE.js";
import "./chunk-IRNKV32L.js";
import "./chunk-IATM3RCE.js";
import "./chunk-BEALJUHO.js";
import "./chunk-GRHSIT57.js";
import "./chunk-PJQIAD5D.js";
import "./chunk-GAWSWBHO.js";
import "./chunk-SZAJDZCO.js";
import "./chunk-3DSKWYU4.js";
import "./chunk-ZZYUEH57.js";
import "./chunk-VTWXDFFD.js";
import "./chunk-IPCIO3PX.js";
import "./chunk-EIY2DYTV.js";
import "./chunk-WJ4LS3YG.js";
import "./chunk-F6MD5VOH.js";
import "./chunk-V2RPSCV3.js";
import "./chunk-LMT5JII2.js";
import "./chunk-4HKQSEUR.js";
import "./chunk-V3U4F2NL.js";
import "./chunk-ZB6PGKG5.js";
import "./chunk-OIIDE5GZ.js";
import {
  u
} from "./chunk-3XSRVKBX.js";
import "./chunk-WYBZLWIA.js";
import "./chunk-MKW4ORPJ.js";
import "./chunk-YTH6VA7N.js";
import "./chunk-GINTRQSD.js";
import {
  C,
  P,
  d
} from "./chunk-TBSVVR6M.js";
import "./chunk-6TJWLWLO.js";
import "./chunk-H7BKONNV.js";
import "./chunk-K6C6RVSV.js";
import "./chunk-KBJ5Z4R2.js";
import "./chunk-JUZJCTW2.js";
import "./chunk-423VNHLR.js";
import "./chunk-FN47E7YK.js";
import "./chunk-XZS3Q5K4.js";
import "./chunk-WZPOQGKL.js";
import "./chunk-CCXEAKIM.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import {
  x2 as x
} from "./chunk-QNOCEWCR.js";
import "./chunk-WURET5CW.js";
import "./chunk-QWPLZ3QH.js";
import "./chunk-HLGIRLYQ.js";
import "./chunk-N2K4VRZH.js";
import "./chunk-WL4VPODY.js";
import "./chunk-OMPEZIP5.js";
import "./chunk-EUTNDAIV.js";
import "./chunk-SJZIFARA.js";
import "./chunk-R5DM4YAB.js";
import "./chunk-NSRXJNTS.js";
import {
  g,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  b,
  k
} from "./chunk-RFPH3ZTZ.js";
import {
  r
} from "./chunk-WGO3VFQP.js";
import "./chunk-CQS47VN5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-WJ3HJKNC.js";
import "./chunk-4V6374PV.js";
import "./chunk-A34O4XB5.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterBitmap.js
var _2 = { bandCount: 3, outMin: 0, outMax: 1, minCutOff: [0, 0, 0], maxCutOff: [255, 255, 255], factor: [1 / 255, 1 / 255, 1 / 255], useGamma: false, gamma: [1, 1, 1], gammaCorrection: [1, 1, 1], colormap: null, colormapOffset: null, stretchType: "none", type: "stretch" };
var p3 = class extends i3 {
  constructor(t5 = null, e16 = null, s18 = null) {
    super(), this._textureInvalidated = true, this._colormapTextureInvalidated = true, this._rasterTexture = null, this._rasterTextureBandIds = null, this._transformGridTexture = null, this._colormapTexture = null, this._colormap = null, this._supportsBilinearTexture = true, this._processedTexture = null, this.functionTextures = [], this.projected = false, this.stencilRef = 0, this.coordScale = [1, 1], this._processed = false, this._symbolizerParameters = null, this.height = null, this.isRendereredSource = false, this.pixelRatio = 1, this.resolution = 0, this.rotation = 0, this._source = null, this.rawPixelData = null, this._suspended = false, this._bandIds = null, this._interpolation = null, this._transformGrid = null, this.width = null, this.x = 0, this.y = 0, this.source = t5, this.transformGrid = e16, this.interpolation = s18;
  }
  destroy() {
    this._disposeTextures();
  }
  get processedTexture() {
    return this._processedTexture;
  }
  set processedTexture(t5) {
    this._processedTexture !== t5 && (this._disposeTextures(true), this._processedTexture = t5);
  }
  get rasterTexture() {
    return this._rasterTexture;
  }
  set rasterTexture(t5) {
    var _a;
    this._rasterTexture !== t5 && ((_a = this._rasterTexture) == null ? void 0 : _a.dispose(), this._rasterTexture = t5), null == t5 && (this.projected = false);
  }
  get processed() {
    return this._processed;
  }
  set processed(e16) {
    this._processed = e16, e16 || (r(this.processedTexture), this.invalidateTexture());
  }
  get symbolizerParameters() {
    return this._symbolizerParameters || _2;
  }
  set symbolizerParameters(t5) {
    this._symbolizerParameters !== t5 && (this._symbolizerParameters = t5, this._colormapTextureInvalidated = true, this.commonUniforms = null);
  }
  get source() {
    return this._source;
  }
  set source(t5) {
    this._source !== t5 && (this._source = t5, this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTexture = null, this._rasterTextureBandIds = null), this.commonUniforms = null, this.projected = false, this.invalidateTexture());
  }
  get suspended() {
    return this._suspended;
  }
  set suspended(t5) {
    this._suspended && !t5 && this.stage && (this.ready(), this.requestRender()), this._suspended = t5;
  }
  get bandIds() {
    return this._bandIds;
  }
  set bandIds(t5) {
    this._bandIds = t5, this._isBandIdschanged(t5) && (this.projected = false, this.invalidateTexture());
  }
  get interpolation() {
    return this._interpolation || "nearest";
  }
  set interpolation(t5) {
    this._interpolation = t5, this._rasterTexture && this._rasterTexture.setSamplingMode("bilinear" === this._getTextureSamplingMethod(t5 || "nearest") ? L.LINEAR : L.NEAREST);
  }
  get transformGrid() {
    return this._transformGrid;
  }
  set transformGrid(e16) {
    this._transformGrid !== e16 && (this._transformGrid = e16, this._transformGridTexture = r(this._transformGridTexture));
  }
  invalidateTexture() {
    this._textureInvalidated || (this._textureInvalidated = true, this.requestRender());
  }
  getRasterTextureSize(t5 = false) {
    var _a, _b;
    const e16 = t5 || this.projected;
    return [e16 ? this.width : ((_a = this.source) == null ? void 0 : _a.width) || this.width, e16 ? this.height : ((_b = this.source) == null ? void 0 : _b.height) || this.height];
  }
  getRasterCellSize() {
    var _a;
    const t5 = (_a = this.rawPixelData) == null ? void 0 : _a.srcPixelSize, { projected: e16, resolution: s18 } = this;
    return t5 && !e16 ? [t5.x, t5.y] : [s18, s18];
  }
  _createTransforms() {
    return { dvs: e2() };
  }
  setTransform(t5) {
    const a18 = r2(this.transforms.dvs), [h7, n22] = t5.toScreenNoRotation([0, 0], [this.x, this.y]), l2 = this.resolution / this.pixelRatio / t5.resolution, d3 = l2 * this.width, c7 = l2 * this.height, _3 = Math.PI * this.rotation / 180;
    M2(a18, a18, t(h7, n22)), M2(a18, a18, t(d3 / 2, c7 / 2)), h(a18, a18, -_3), M2(a18, a18, t(-d3 / 2, -c7 / 2)), b2(a18, a18, t(d3, c7)), i(this.transforms.dvs, t5.displayViewMat3, a18);
  }
  getTextures({ forProcessing: t5 = false, useProcessedTexture: e16 = false } = {}) {
    const s18 = e16 ? this._processedTexture ?? this._rasterTexture : this._rasterTexture, r14 = [], i11 = [];
    return s18 ? (this._transformGridTexture && !this.projected && (i11.push(this._transformGridTexture), r14.push("u_transformGrid")), e16 ? (i11.push(s18), r14.push("u_image"), this._colormapTexture && (i11.push(this._colormapTexture), r14.push("u_colormap")), { names: r14, textures: i11 }) : (i11.push(s18), r14.push("u_image"), this._colormapTexture && !t5 && (i11.push(this._colormapTexture), r14.push("u_colormap")), { names: r14, textures: i11 })) : { names: r14, textures: i11 };
  }
  onAttach() {
    this.invalidateTexture();
  }
  onDetach() {
    this.invalidateTexture();
  }
  updateTexture({ context: t5 }) {
    if (!this.stage)
      return void this._disposeTextures();
    const e16 = this._isValidSource(this.source);
    e16 && this._colormapTextureInvalidated && (this._colormapTextureInvalidated = false, this._updateColormapTexture(t5)), this._textureInvalidated && (this._textureInvalidated = false, this._createOrDestroyRasterTexture(t5), this._rasterTexture && (e16 ? this.transformGrid && !this._transformGridTexture && (this._transformGridTexture = m2(t5, this.transformGrid)) : this._rasterTexture.setData(null)), this.suspended || (this.ready(), this.requestRender()));
  }
  updateProcessedTexture() {
    const { functionTextures: t5 } = this;
    0 !== t5.length && (this.processedTexture = t5.shift(), t5.forEach((t6) => t6 == null ? void 0 : t6.dispose()), t5.length = 0);
  }
  _createOrDestroyRasterTexture(t5) {
    var _a, _b, _c;
    const e16 = (_a = this.source) == null ? void 0 : _a.extractBands(this.bandIds);
    if (!this._isValidSource(e16))
      return void (this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTextureBandIds = null, this._rasterTexture = null));
    const s18 = !this._isBandIdschanged(this.bandIds);
    if (this._rasterTexture) {
      if (s18)
        return;
      this._rasterTexture.dispose(), this._rasterTextureBandIds = null, this._rasterTexture = null;
    }
    this._supportsBilinearTexture = !!((_b = t5.capabilities.textureFloat) == null ? void 0 : _b.textureFloatLinear);
    const r14 = this._getTextureSamplingMethod(this.interpolation), i11 = this.isRendereredSource || !((_c = t5.capabilities.textureFloat) == null ? void 0 : _c.textureFloat);
    this._rasterTexture = c4(t5, e16, r14, i11), this.projected = false, this._processed = false, this._rasterTextureBandIds = this.bandIds ? [...this.bandIds] : null;
  }
  _isBandIdschanged(t5) {
    const e16 = this._rasterTextureBandIds;
    return !(null == e16 && null == t5 || e16 && t5 && e16.join("") === t5.join(""));
  }
  _isValidSource(t5) {
    var _a;
    return null != t5 && ((_a = t5.pixels) == null ? void 0 : _a.length) > 0;
  }
  _getTextureSamplingMethod(t5) {
    const { type: e16 } = this.symbolizerParameters, s18 = "lut" === e16 || "hillshade" === e16 || "stretch" === e16 && 1 === this.symbolizerParameters.bandCount;
    return !this._supportsBilinearTexture || s18 || "bilinear" !== t5 && "cubic" !== t5 ? "nearest" : "bilinear";
  }
  _updateColormapTexture(t5) {
    const e16 = this._colormap, s18 = this.symbolizerParameters.colormap;
    return s18 ? e16 ? s18.length !== e16.length || s18.some((t6, s19) => t6 !== e16[s19]) ? (this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null), this._colormapTexture = l(t5, s18), void (this._colormap = s18)) : void 0 : (this._colormapTexture = l(t5, s18), void (this._colormap = s18)) : (this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null), void (this._colormap = null));
  }
  _disposeTextures(t5 = false) {
    !this._transformGridTexture || t5 && !this.projected || (this._transformGridTexture.dispose(), this._transformGridTexture = null), !t5 && this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null, this._colormap = null, this._colormapTextureInvalidated = true), !t5 && this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTexture = null, this._rasterTextureBandIds = null), this._processedTexture && (this._processedTexture.dispose(), this._processedTexture = null);
  }
};
function m3(t5) {
  return null != t5.source;
}

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/utils.js
function i5(i11) {
  const n22 = [];
  return i11 && (n22.push("applyProjection"), 1 === i11.spacing[0] && n22.push("lookupProjection")), n22;
}
function n4(i11, n22, e16) {
  var _a;
  const t5 = !((_a = e16.capabilities.textureFloat) == null ? void 0 : _a.textureFloatLinear), u6 = [];
  return "cubic" === i11 ? u6.push("bicubic") : "bilinear" === i11 && (n22 ? (u6.push("bilinear"), u6.push("nnedge")) : t5 && u6.push("bilinear")), u6;
}

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/lut.js
var s4 = { vsPath: "raster/common", fsPath: "raster/lut", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a3(t5, e16, o11) {
  const a18 = o11 ? [] : i5(e16.transformGrid);
  return { defines: a18, program: t5.painter.materialManager.getProgram(s4, a18) };
}
function n5(r14, s18, a18, n22, m7 = false) {
  const { names: i11, textures: c7 } = a18.getTextures({ useProcessedTexture: m7 });
  O2(r14.context, s18, i11, c7), E2(s18, n22, a18.commonUniforms), s18.setUniformMatrix3fv("u_dvsMat3", a18.transforms.dvs);
  const { colormap: f3, colormapOffset: u6 } = a18.symbolizerParameters, d3 = p2(f3, u6);
  E2(s18, n22, d3);
}
var m4 = { createProgram: a3, bindTextureAndUniforms: n5 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/shadedrelief.js
var n6 = { vsPath: "raster/common", fsPath: "raster/hillshade", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function m5(o11, e16, s18) {
  const { colormap: a18 } = e16.symbolizerParameters, m7 = [...s18 ? [] : i5(e16.transformGrid), ...n4(e16.interpolation, true, o11.context)];
  null != a18 && m7.push("applyColormap");
  return { defines: m7, program: o11.painter.materialManager.getProgram(n6, m7) };
}
function i6(r14, t5, n22, m7, i11 = false) {
  const { names: c7, textures: l2 } = n22.getTextures({ useProcessedTexture: i11 });
  O2(r14.context, t5, c7, l2), E2(t5, m7, n22.commonUniforms), t5.setUniformMatrix3fv("u_dvsMat3", n22.transforms.dvs);
  const f3 = n22.symbolizerParameters, { colormap: p5, colormapOffset: u6 } = f3;
  if (null != p5) {
    const r15 = p2(p5, u6);
    E2(t5, m7, r15);
  }
  const d3 = T3(f3);
  E2(t5, m7, d3);
}
var c5 = { createProgram: m5, bindTextureAndUniforms: i6 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/stretch.js
var a4 = { vsPath: "raster/common", fsPath: "raster/stretch", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function m6(o11, e16, s18) {
  const { colormap: n22, bandCount: m7 } = e16.symbolizerParameters, i11 = [...s18 ? [] : i5(e16.transformGrid), ...n4(e16.interpolation, 1 === m7, o11.context)];
  e16.isRendereredSource && !s18 ? i11.push("noop") : null != n22 && i11.push("applyColormap");
  return { defines: i11, program: o11.painter.materialManager.getProgram(a4, i11) };
}
function i7(r14, t5, a18, m7, i11 = false) {
  const { names: c7, textures: u6 } = a18.getTextures({ useProcessedTexture: i11 });
  O2(r14.context, t5, c7, u6), E2(t5, m7, a18.commonUniforms), t5.setUniformMatrix3fv("u_dvsMat3", a18.transforms.dvs);
  const l2 = a18.symbolizerParameters, { colormap: p5, colormapOffset: f3 } = l2;
  if (null != p5) {
    const r15 = p2(p5, f3);
    E2(t5, m7, r15);
  }
  const d3 = A(l2);
  E2(t5, m7, d3);
}
var c6 = { createProgram: m6, bindTextureAndUniforms: i7 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/rasterColorizer.js
var s5 = /* @__PURE__ */ new Map();
function o2(t5) {
  return s5.get(t5);
}
s5.set("lut", m4), s5.set("hillshade", c5), s5.set("stretch", c6);

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/utils.js
var t3 = [1, 1];
var n7 = [2, 0, 0, 0, 2, 0, -1, -1, 0];
function a5(t5, n22, a18) {
  const { context: r14, rasterFunction: s18, hasBranches: i11 } = t5, { raster: o11 } = s18.parameters, f3 = i11 ? (o11 == null ? void 0 : o11.id) ?? -1 : 0, m7 = a18.functionTextures[f3] ?? a18.rasterTexture;
  O2(r14, n22, ["u_image"], [m7]);
}
function r6(t5, n22, r14) {
  const { rasters: s18 } = t5.rasterFunction.parameters;
  if (!s18)
    return;
  if (s18.length < 2)
    return a5(t5, n22, r14);
  const i11 = s18.filter((e16) => "Constant" !== e16.name).map((e16) => null != e16.id && "Identity" !== e16.name ? r14.functionTextures[e16.id] : r14.rasterTexture);
  if (O2(t5.context, n22, ["u_image", "u_image1", "u_image2"].slice(0, i11.length), i11), i11.length !== s18.length) {
    if (2 === s18.length) {
      const e16 = s18.findIndex((e17) => "Constant" === e17.name), t6 = 0 === e16 ? [0, 1, 0, 1, 0, 0, 0, 0, 0] : [1, 0, 0, 0, 1, 0, 0, 0, 0], { value: a18 } = s18[e16].parameters;
      n22.setUniform1f("u_image1Const", a18), n22.setUniformMatrix3fv("u_imageSwap", t6);
    } else if (3 === s18.length) {
      const e16 = [];
      if (s18.forEach((t6, n23) => "Constant" === t6.name && e16.push(n23)), 1 === e16.length) {
        const { value: t6 } = s18[e16[0]].parameters;
        n22.setUniform1f("u_image1Const", t6);
        const a18 = 0 === e16[0] ? [0, 1, 0, 0, 0, 1, 1, 0, 0] : 1 === e16[0] ? [1, 0, 0, 0, 0, 1, 0, 1, 0] : [1, 0, 0, 0, 1, 0, 0, 0, 1];
        n22.setUniformMatrix3fv("u_imageSwap", a18);
      } else if (2 === e16.length) {
        const { value: t6 } = s18[e16[0]].parameters;
        n22.setUniform1f("u_image1Const", t6);
        const { value: a18 } = s18[e16[1]].parameters;
        n22.setUniform1f("u_image2Const", a18);
        const r15 = s18.findIndex((e17) => "Constant" !== e17.name), i12 = 0 === r15 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : 1 === r15 ? [0, 1, 0, 1, 0, 0, 0, 0, 1] : [0, 0, 1, 1, 0, 0, 0, 1, 0];
        n22.setUniformMatrix3fv("u_imageSwap", i12);
      }
    }
  }
}
function s6(e16) {
  e16.setUniform2fv("u_coordScale", t3), e16.setUniformMatrix3fv("u_dvsMat3", n7);
}

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/aspectProcessor.js
var r7 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/aspect", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a6(t5, e16) {
  return t5.painter.materialManager.getProgram(r7, []);
}
function s7(r14, a18, s18) {
  a5(r14, a18, s18), s6(a18);
  const n22 = s18.getRasterTextureSize();
  a18.setUniform2fv("u_srcImageSize", n22);
  const o11 = s18.getRasterCellSize();
  a18.setUniform2fv("u_cellSize", o11);
}
var n8 = { createProgram: a6, bindTextureAndUniforms: s7 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/bandArithmeticProcessor.js
var a7 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/bandarithmetic", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e4(t5, r14) {
  const { painter: e16, rasterFunction: n22 } = t5, { indexType: s18 } = n22.parameters;
  return e16.materialManager.getProgram(a7, [s18]);
}
function n9(a18, e16, n22) {
  a5(a18, e16, n22), s6(e16);
  const { bandIndexMat3: s18 } = a18.rasterFunction.parameters;
  e16.setUniformMatrix3fv("u_bandIndexMat3", s18);
}
var s8 = { createProgram: e4, bindTextureAndUniforms: n9 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/compositeBandProcessor.js
var a8 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/compositeband", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e5(t5, r14) {
  return t5.painter.materialManager.getProgram(a8, []);
}
function o3(a18, e16, o11) {
  r6(a18, e16, o11), s6(e16);
}
var n10 = { createProgram: e5, bindTextureAndUniforms: o3 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/contrastProcessor.js
var s9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/contrast", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e6(t5, r14) {
  return t5.painter.materialManager.getProgram(s9, []);
}
function a9(s18, e16, a18) {
  a5(s18, e16, a18), s6(e16);
  const { contrastOffset: n22, brightnessOffset: o11 } = s18.rasterFunction.parameters;
  e16.setUniform1f("u_contrastOffset", n22), e16.setUniform1f("u_brightnessOffset", o11);
}
var n11 = { createProgram: e6, bindTextureAndUniforms: a9 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/convolutionProcessor.js
var t4 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/convolution", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a10(e16, r14) {
  const { painter: a18, rasterFunction: n22 } = e16, { kernelRows: o11, kernelCols: s18 } = n22.parameters, i11 = [{ name: "rows", value: o11 }, { name: "cols", value: s18 }];
  return a18.materialManager.getProgram(t4, i11);
}
function n12(t5, a18, n22) {
  a5(t5, a18, n22), s6(a18), a18.setUniform2fv("u_srcImageSize", [n22.width, n22.height]);
  const { kernel: o11, clampRange: s18 } = t5.rasterFunction.parameters;
  a18.setUniform1fv("u_kernel", o11), a18.setUniform2fv("u_clampRange", s18);
}
var o4 = { createProgram: a10, bindTextureAndUniforms: n12 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/curvatureProcessor.js
var e7 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/curvature", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a11(r14, t5) {
  const { painter: a18, rasterFunction: s18 } = r14, { curvatureType: n22 } = s18.parameters, o11 = [n22];
  return a18.materialManager.getProgram(e7, o11);
}
function s10(e16, a18, s18) {
  a5(e16, a18, s18), s6(a18);
  const n22 = s18.getRasterTextureSize();
  a18.setUniform2fv("u_srcImageSize", n22);
  const { zFactor: o11 } = e16.rasterFunction.parameters, i11 = s18.getRasterCellSize();
  a18.setUniform1f("u_zlFactor", 200 * o11 / i11[0] / i11[1]);
}
var n13 = { createProgram: a11, bindTextureAndUniforms: s10 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/extractBandProcessor.js
var a12 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/extractband", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e8(t5, r14) {
  return t5.painter.materialManager.getProgram(a12, []);
}
function n14(a18, e16, n22) {
  a5(a18, e16, n22), s6(e16);
  const { bandIndexMat3: o11 } = a18.rasterFunction.parameters;
  e16.setUniformMatrix3fv("u_bandIndexMat3", o11);
}
var o5 = { createProgram: e8, bindTextureAndUniforms: n14 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/focalStatisticsProcessor.js
var e9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/focalstatistics", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function r8(t5, a18) {
  const { painter: r14, rasterFunction: s18 } = t5, { kernelRows: n22, kernelCols: o11, fillNoDataOnly: i11, statisticsType: c7 } = s18.parameters, l2 = [{ name: "rows", value: n22 }, { name: "cols", value: o11 }, c7];
  return i11 && l2.push("fill"), r14.materialManager.getProgram(e9, l2);
}
function s11(e16, r14, s18) {
  a5(e16, r14, s18), s6(r14), r14.setUniform2fv("u_srcImageSize", [s18.width, s18.height]);
  const { clampRange: n22 } = e16.rasterFunction.parameters;
  r14.setUniform2fv("u_clampRange", n22);
}
var n15 = { createProgram: r8, bindTextureAndUniforms: s11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/localProcessor.js
var e10 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/local", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
var o6 = /* @__PURE__ */ new Set(["sinh", "cosh", "tanh", "asinh", "acosh", "atanh"]);
function s12(t5) {
  const { painter: n22, rasterFunction: s18 } = t5, { imageCount: r14, operationName: i11, rasters: u6, isOutputRounded: c7 } = s18.parameters;
  let m7 = i11.toLowerCase();
  t5.context.type === n.WEBGL1 && o6.has(m7) && (m7 = `polyfill${m7}`);
  const p5 = [m7];
  2 === r14 && p5.push("twoImages");
  const h7 = u6.filter((t6) => "Constant" === t6.name);
  return h7.length && (p5.push("oneConstant"), 2 === h7.length && p5.push("twoConstant")), c7 && p5.push("roundOutput"), n22.materialManager.getProgram(e10, p5);
}
function r9(a18, e16, o11) {
  r6(a18, e16, o11), s6(e16);
  const { domainRange: s18 } = a18.rasterFunction.parameters;
  e16.setUniform2fv("u_domainRange", s18);
}
var i8 = { createProgram: s12, bindTextureAndUniforms: r9 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/maskProcessor.js
var r10 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/mask", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function n16(t5, a18) {
  const { painter: n22, rasterFunction: e16 } = t5, s18 = e16.parameters.bandCount > 1 ? ["multiBand"] : [];
  return n22.materialManager.getProgram(r10, s18);
}
function e11(r14, n22, e16) {
  a5(r14, n22, e16), s6(n22);
  const { includedRanges: s18, noDataValues: o11 } = r14.rasterFunction.parameters;
  n22.setUniform1fv("u_includedRanges", s18), n22.setUniform1fv("u_noDataValues", o11);
}
var s13 = { createProgram: n16, bindTextureAndUniforms: e11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/ndviProcessor.js
var a13 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/ndvi", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e12(t5, r14) {
  const { painter: e16, rasterFunction: n22 } = t5, s18 = n22.parameters.scaled ? ["scaled"] : [];
  return e16.materialManager.getProgram(a13, s18);
}
function n17(a18, e16, n22) {
  a5(a18, e16, n22), s6(e16);
  const { bandIndexMat3: s18 } = a18.rasterFunction.parameters;
  e16.setUniformMatrix3fv("u_bandIndexMat3", s18);
}
var s14 = { createProgram: e12, bindTextureAndUniforms: n17 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/remapProcessor.js
var r11 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/remap", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e13(a18, t5) {
  return a18.painter.materialManager.getProgram(r11, []);
}
function n18(r14, e16, n22) {
  a5(r14, e16, n22), s6(e16);
  const { noDataRanges: s18, rangeMaps: o11, allowUnmatched: f3, clampRange: i11 } = r14.rasterFunction.parameters;
  e16.setUniform1fv("u_noDataRanges", s18), e16.setUniform1fv("u_rangeMaps", o11), e16.setUniform1f("u_unmatchMask", f3 ? 1 : 0), e16.setUniform2fv("u_clampRange", i11);
}
var s15 = { createProgram: e13, bindTextureAndUniforms: n18 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/reprojectProcessor.js
var e14 = { vsPath: "raster/common", fsPath: "raster/reproject", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function i9(t5, r14) {
  var _a, _b, _c;
  const { painter: i11 } = t5, o11 = [], { interpolation: s18, transformGrid: n22 } = r14, a18 = !!((_b = (_a = t5.rasterFunction) == null ? void 0 : _a.parameters) == null ? void 0 : _b.requireBilinear), f3 = "bilinear" === s18 ? !((_c = t5.context.capabilities.textureFloat) == null ? void 0 : _c.textureFloatLinear) : a18;
  return "cubic" === s18 ? o11.push("bicubic") : f3 && o11.push("bilinear"), n22 && (o11.push("applyProjection"), 1 === n22.spacing[0] && o11.push("lookupProjection")), i11.materialManager.getProgram(e14, o11);
}
function o7(e16, i11, o11) {
  const { names: s18, textures: n22 } = o11.getTextures({ forProcessing: true });
  O2(e16.context, i11, s18, n22), i11.setUniform1f("u_scale", 1), i11.setUniform2fv("u_offset", [0, 0]), i11.setUniform2fv("u_coordScale", [1, 1]), i11.setUniformMatrix3fv("u_dvsMat3", [2, 0, 0, 0, 2, 0, -1, -1, 0]), i11.setUniform1i("u_flipY", 0), i11.setUniform1f("u_opacity", 1);
  const { width: a18, height: f3, source: c7, transformGrid: u6 } = o11;
  i11.setUniform2fv("u_srcImageSize", [c7.width, c7.height]), i11.setUniform2fv("u_targetImageSize", [a18, f3]), i11.setUniform2fv("u_transformSpacing", u6 ? u6.spacing : f), i11.setUniform2fv("u_transformGridSize", u6 ? u6.size : f);
}
var s16 = { createProgram: i9, bindTextureAndUniforms: o7 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/slopeProcessor.js
var r12 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/slope", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function s17(e16, t5) {
  const { painter: s18, rasterFunction: o11 } = e16, { slopeType: a18 } = o11.parameters, i11 = "percent-rise" === a18 ? ["percentRise"] : [];
  return s18.materialManager.getProgram(r12, i11);
}
function o8(r14, s18, o11) {
  a5(r14, s18, o11), s6(s18);
  const a18 = o11.getRasterTextureSize();
  s18.setUniform2fv("u_srcImageSize", a18);
  const i11 = o11.getRasterCellSize();
  s18.setUniform2fv("u_cellSize", i11);
  const { zFactor: n22, slopeType: c7, pixelSizePower: f3, pixelSizeFactor: p5 } = r14.rasterFunction.parameters;
  s18.setUniform1f("u_zFactor", n22), s18.setUniform1f("u_pixelSizePower", "adjusted" === c7 ? f3 : 0), s18.setUniform1f("u_pixelSizeFactor", "adjusted" === c7 ? p5 : 0);
}
var a14 = { createProgram: s17, bindTextureAndUniforms: o8 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/stretchProcessor.js
var a15 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/stretch", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function u5(t5, r14) {
  const { useGamma: u6, bandCount: e16, isOutputRounded: n22 } = t5.rasterFunction.parameters, o11 = [];
  return u6 && o11.push("useGamma"), e16 > 1 && o11.push("multiBand"), n22 && o11.push("roundOutput"), t5.painter.materialManager.getProgram(a15, o11);
}
function e15(a18, u6, e16) {
  a5(a18, u6, e16), s6(u6);
  const { width: n22, height: o11 } = e16, m7 = a18.rasterFunction.parameters;
  u6.setUniform2fv("u_srcImageSize", [n22, o11]), u6.setUniform1f("u_minOutput", m7.outMin), u6.setUniform1f("u_maxOutput", m7.outMax), u6.setUniform1fv("u_factor", m7.factor), u6.setUniform1fv("u_minCutOff", m7.minCutOff), u6.setUniform1fv("u_maxCutOff", m7.maxCutOff), u6.setUniform1fv("u_gamma", m7.gamma), u6.setUniform1fv("u_gammaCorrection", m7.gammaCorrection);
}
var n19 = { createProgram: u5, bindTextureAndUniforms: e15 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/rasterProcessor.js
var A2 = /* @__PURE__ */ new Map();
function B(r14, e16, t5) {
  const o11 = new e3();
  return o11.width = e16, o11.height = t5, o11.internalFormat = r14.type === n.WEBGL2 ? P2.RGBA32F : G.RGBA, o11.samplingMode = L.NEAREST, o11.dataType = U.FLOAT, o11.isImmutable = r14.type === n.WEBGL2, o11.wrapMode = D.CLAMP_TO_EDGE, o11;
}
function v2(r14, e16, t5, o11) {
  const { context: s18, requestRender: c7, allowDelayedRender: n22 } = r14, i11 = o11.createProgram(r14, t5);
  return n22 && null != c7 && !i11.compiled ? (c7(), null) : (s18.bindFramebuffer(e16), s18.setViewport(0, 0, e16.width, e16.height), s18.useProgram(i11), i11);
}
function E3(r14) {
  return A2.get(r14.toLowerCase());
}
function F(r14, e16, t5, o11) {
  const s18 = r14.rasterFunction.name.toLowerCase(), c7 = "reproject" === s18 ? s16 : E3(s18);
  if (null == c7)
    return;
  const n22 = v2(r14, t5, o11, c7);
  if (!n22)
    return;
  c7.bindTextureAndUniforms(r14, n22, o11), e16.draw();
  const [i11, m7] = o11.getRasterTextureSize("reproject" === s18), a18 = B(r14.context, i11, m7), p5 = new T2(r14.context, a18);
  if (t5.copyToTexture(0, 0, i11, m7, 0, 0, p5), "reproject" === s18)
    o11.rasterTexture = p5, o11.projected = true;
  else {
    const e17 = r14.hasBranches ? r14.rasterFunction.id : 0;
    o11.functionTextures[e17] = p5;
  }
}
A2.set("aspect", n8), A2.set("bandarithmetic", s8), A2.set("compositeband", n10), A2.set("convolution", o4), A2.set("contrastbrightness", n11), A2.set("curvature", n13), A2.set("extractband", o5), A2.set("statistics", n15), A2.set("local", i8), A2.set("mask", s13), A2.set("ndvi", s14), A2.set("remap", s15), A2.set("slope", a14), A2.set("stretch", n19);

// node_modules/@arcgis/core/views/2d/engine/imagery/BrushRasterBitmap.js
var h6 = class extends t2 {
  constructor() {
    super(...arguments), this.name = "raster", this._quad = null, this._rendererUniformInfos = /* @__PURE__ */ new Map(), this._fbo = null;
  }
  dispose() {
    r(this._quad), r(this._fbo);
  }
  prepareState(e16) {
    const { context: t5, renderPass: r14 } = e16, s18 = "raster" === r14;
    t5.setBlendingEnabled(!s18), t5.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), t5.setColorMask(true, true, true, true), t5.setStencilWriteMask(0), t5.setStencilTestEnabled(!s18);
  }
  draw(e16, r14) {
    if (!m3(r14) || r14.suspended)
      return;
    const { renderPass: s18 } = e16;
    if ("raster-bitmap" !== s18)
      return "raster" === s18 ? this._process(e16, r14) : void this._drawBitmap(e16, r14, true);
    this._drawBitmap(e16, r14);
  }
  _process(t5, r14) {
    const { rasterFunction: i11 } = t5, o11 = "Reproject" === i11.name;
    if (!(o11 ? !(r14.rasterTexture && r14.projected) : !r14.processed))
      return;
    const { timeline: n22, context: a18 } = t5;
    n22.begin(this.name);
    const d3 = a18.getBoundFramebufferObject(), c7 = a18.getViewport();
    o11 || (r14.processedTexture = r(r14.processedTexture)), a18.setStencilFunction(O.EQUAL, r14.stencilRef, 255), r14.updateTexture(t5), this._initQuad(a18);
    const [f3, u6] = r14.getRasterTextureSize(o11), { isStandardRasterTileSize: p5, fbo: h7 } = this._getRasterFBO(a18, f3, u6);
    F(t5, this._quad, h7, r14), p5 || h7.dispose(), a18.bindFramebuffer(d3), a18.setViewport(c7.x, c7.y, c7.width, c7.height), n22.end(this.name);
  }
  _drawBitmap(e16, t5, s18 = false) {
    const { timeline: i11, context: o11 } = e16;
    if (i11.begin(this.name), o11.setStencilFunction(O.EQUAL, t5.stencilRef, 255), t5.updateTexture(e16), s18 && !t5.processedTexture) {
      if (t5.updateProcessedTexture(), !t5.processedTexture)
        return void i11.end(this.name);
      t5.processed = true;
    }
    this._initBitmapCommonUniforms(t5);
    const a18 = t5.symbolizerParameters.type, d3 = o2(a18), { requestRender: c7, allowDelayedRender: f3 } = e16, { defines: u6, program: p5 } = d3.createProgram(e16, t5, t5.projected && s18);
    if (f3 && null != c7 && !p5.compiled)
      return void c7();
    o11.useProgram(p5);
    const h7 = this._getUniformInfos(a18, o11, p5, u6);
    this._quad || (this._quad = new n3(o11, [0, 0, 1, 0, 0, 1, 1, 1])), d3.bindTextureAndUniforms(e16, p5, t5, h7, s18), this._quad.draw(), i11.end(this.name);
  }
  _initBitmapCommonUniforms(e16) {
    if (!e16.commonUniforms) {
      const t5 = g3(1, [0, 0]), { transformGrid: r14, width: s18, height: i11 } = e16, o11 = _(r14, [s18, i11], [e16.source.width, e16.source.height], 1, false);
      e16.commonUniforms = { ...t5, ...o11, u_coordScale: e16.coordScale };
    }
  }
  _getRasterFBO(e16, t5, r14) {
    const s18 = t5 === c2 && r14 === c2;
    return s18 ? (this._fbo || (this._fbo = this._createNewFBO(e16, t5, r14)), { isStandardRasterTileSize: s18, fbo: this._fbo }) : { isStandardRasterTileSize: s18, fbo: this._createNewFBO(e16, t5, r14) };
  }
  _createNewFBO(e16, t5, r14) {
    const s18 = B(e16, t5, r14);
    return new E(e16, s18);
  }
  _initQuad(e16) {
    this._quad || (this._quad = new n3(e16, [0, 0, 1, 0, 0, 1, 1, 1]));
  }
  _getUniformInfos(e16, t5, r14, s18) {
    const i11 = s18.length > 0 ? e16 + "-" + s18.join("-") : e16;
    if (this._rendererUniformInfos.has(i11))
      return this._rendererUniformInfos.get(i11);
    const o11 = h5(t5, r14);
    return this._rendererUniformInfos.set(i11, o11), o11;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterTile.js
var i10 = class extends r4 {
  constructor(t5, e16, i11, a18, r14, n22, l2 = null) {
    super(t5, e16, i11, a18, r14, n22), this.bitmap = null, this.bitmap = new p3(l2, null, null), this.bitmap.coordScale = [r14, n22], this.bitmap.once("isReady", () => this.ready());
  }
  destroy() {
    super.destroy(), this.bitmap.destroy(), this.bitmap = null, this.stage = null;
  }
  set stencilRef(t5) {
    this.bitmap.stencilRef = t5;
  }
  get stencilRef() {
    return this.bitmap.stencilRef;
  }
  setTransform(t5) {
    super.setTransform(t5), this.bitmap.transforms.dvs = this.transforms.dvs;
  }
  _createTransforms() {
    return { dvs: e2(), tileMat3: e2() };
  }
  onAttach() {
    this.bitmap.stage = this.stage;
  }
  onDetach() {
    this.bitmap.stage = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterTileContainer.js
var o9 = class extends i4 {
  constructor() {
    super(...arguments), this.isCustomTilingScheme = false;
  }
  createTile(e16) {
    const r14 = this._getTileBounds(e16), [s18, i11] = this._tileInfoView.tileInfo.size, n22 = this._tileInfoView.getTileResolution(e16.level);
    return new i10(e16, n22, r14[0], r14[3], s18, i11);
  }
  prepareRenderPasses(e16) {
    const r14 = e16.registerRenderPass({ name: "imagery (tile)", brushes: [h6], target: () => this.children.map((e17) => e17.bitmap), drawPhase: T.MAP });
    return [...super.prepareRenderPasses(e16), r14];
  }
  doRender(e16) {
    if (!this.visible || e16.drawPhase !== T.MAP)
      return;
    const { rasterFunctionChain: r14 } = this;
    if (!r14)
      return e16.renderPass = "raster-bitmap", void super.doRender(e16);
    if (!r14.hasFocalFunction) {
      const [r15, s18] = this._tileInfoView.tileInfo.size;
      e16.renderPass = "raster", e16.rasterFunction = { name: "Reproject", parameters: { targetImageSize: [r15, s18], requireBilinear: false }, pixelType: "f32", id: 0, isNoopProcess: false }, super.doRender(e16);
    }
    if (r14 == null ? void 0 : r14.functions.length) {
      const { functions: s18, hasBranches: t5 } = r14;
      for (let r15 = 0; r15 < s18.length; r15++) {
        const i11 = s18[r15];
        "Constant" !== i11.name && "Identity" !== i11.name && (e16.renderPass = "raster", e16.rasterFunction = i11, e16.hasBranches = t5, super.doRender(e16));
      }
    }
    e16.rasterFunction = null, e16.renderPass = "bitmap", super.doRender(e16);
  }
  _getTileBounds(s18) {
    const t5 = this._tileInfoView.getTileBounds(u(), s18);
    if (this.isCustomTilingScheme && s18.world) {
      const { tileInfo: e16 } = this._tileInfoView, i11 = lt(e16.spatialReference);
      if (i11) {
        const r14 = e16.lodAt(s18.level);
        if (!r14)
          return t5;
        const { resolution: n22 } = r14, o11 = i11 / n22 % e16.size[0], a18 = o11 ? (e16.size[0] - o11) * n22 : 0;
        t5[0] -= a18 * s18.world, t5[2] -= a18 * s18.world;
      }
    }
    return t5;
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/BaseImageryTileSubView2D.js
var C2 = [0, 0];
var R2 = class extends g {
  constructor() {
    super(...arguments), this._updatingHandles = new h2(), this._emptyTilePixelBlock = null, this._tileStrategy = null, this._tileInfoView = null, this._fetchQueue = null, this._blockCacheRegistryUrl = null, this._blockCacheRegistryId = null, this._srcResolutions = [], this.previousLOD = null, this._needBlockCacheUpdate = false, this._globalSymbolizerParams = null, this._symbolizerParams = null, this._abortController = null, this._isCustomTilingScheme = false, this._maxIndexedColormapSize = 0, this._rasterFunctionState = "na", this._globalUpdateRequested = false, this.attached = false, this.timeExtent = null, this.redrawOrRefetch = k(async (e16 = {}) => {
      if (!this.previousLOD || this.layerView.suspended)
        return;
      const t5 = this._rasterFunctionState;
      e16.reprocess && (await this._updatingHandles.addPromise(this.layer.updateRasterFunction()), this.updateRasterFunctionParameters());
      const i11 = this._rasterFunctionState, { type: s18 } = this;
      return e16.refetch || "raster" !== s18 && !!e16.reprocess || "cpu" === i11 || "cpu" === t5 ? this._updatingHandles.addPromise(this.doRefresh()) : this._updatingHandles.addPromise(this._redrawImage(e16.signal));
    });
  }
  destroy() {
    this._updatingHandles.destroy();
  }
  get useWebGLForProcessing() {
    return this._get("useWebGLForProcessing") ?? true;
  }
  set useWebGLForProcessing(e16) {
    this._set("useWebGLForProcessing", e16);
  }
  get useProgressiveUpdate() {
    return this._get("useProgressiveUpdate") ?? true;
  }
  set useProgressiveUpdate(e16) {
    if (this._tileStrategy && this.useProgressiveUpdate !== e16) {
      this._tileStrategy.destroy(), this.container.removeAllChildren();
      const t5 = this._getCacheSize(e16);
      this._tileStrategy = new r3({ cachePolicy: "purge", acquireTile: (e17) => this.acquireTile(e17), releaseTile: (e17) => this.releaseTile(e17), cacheSize: t5, tileInfoView: this._tileInfoView }), this._set("useProgressiveUpdate", e16), this.layerView.requestUpdate();
    }
  }
  update(e16) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e16.state, this._tileStrategy.update(e16), this._fetchQueue.resume();
    const { extent: t5, resolution: i11, scale: s18 } = e16.state, r14 = this._tileInfoView.getClosestInfoForScale(s18);
    if (this.layer.raster) {
      if (!this.useProgressiveUpdate || this._needBlockCacheUpdate) {
        const e17 = this._srcResolutions[r14.level], s19 = t5.toJSON ? t5 : M.fromJSON(t5);
        g2(this._blockCacheRegistryUrl, this._blockCacheRegistryId, s19, i11, e17, this.layer.raster.ioConfig.sampling);
      }
      this._needBlockCacheUpdate = false, ((_a = this.previousLOD) == null ? void 0 : _a.level) !== r14.level && (this.previousLOD = r14, null == this._symbolizerParams || this.layerView.hasTilingEffects || this._updateSymbolizerParams(), this._tileStrategy.updateCacheSize(0));
    }
  }
  moveEnd() {
    !this.layerView.hasTilingEffects && this.useProgressiveUpdate || (this._abortController && this._abortController.abort(), this._abortController = new AbortController(), 0 === this._fetchQueue.length && this._redrawImage(this._abortController.signal).then(() => {
      this._globalUpdateRequested = false, this.layerView.requestUpdate();
    }));
    const e16 = this._getCacheSize(this.useProgressiveUpdate);
    this._tileStrategy.updateCacheSize(e16), this.layerView.requestUpdate();
  }
  get updating() {
    var _a;
    return this._globalUpdateRequested || ((_a = this._updatingHandles) == null ? void 0 : _a.updating);
  }
  attach() {
    const e16 = n2("2d");
    this._maxIndexedColormapSize = 4 * (e16.maxTextureSize || 4096), e16.supportsTextureFloat || (this.useWebGLForProcessing = false), this._initializeTileInfo(), this._tileInfoView = new h3(this.layerView.tileInfo, this.layerView.fullExtent);
    const t5 = this._computeFetchConcurrency();
    this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: t5, process: (e17, t6) => this._fetchTile(e17, t6) });
    const i11 = this._getCacheSize(this.useProgressiveUpdate);
    this._tileStrategy = new r3({ cachePolicy: "purge", acquireTile: (e17) => this.acquireTile(e17), releaseTile: (e17) => this.releaseTile(e17), cacheSize: i11, tileInfoView: this._tileInfoView }), this._updateBlockCacheRegistry();
  }
  detach() {
    this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null, a(this._blockCacheRegistryUrl, this._blockCacheRegistryId), this._blockCacheRegistryUrl = this._blockCacheRegistryId = null;
  }
  acquireTile(e16) {
    const t5 = this.container.createTile(e16);
    return this._updatingHandles.addPromise(this._enqueueTileFetch(t5)), this.layerView.requestUpdate(), this._needBlockCacheUpdate = true, this._globalUpdateRequested = this.layerView.hasTilingEffects || !this.useProgressiveUpdate, t5;
  }
  releaseTile(e16) {
    this._fetchQueue.abort(e16.key.id), this.container.removeChild(e16), e16.once("detach", () => {
      e16.destroy(), this.layerView.requestUpdate();
    }), this.layerView.requestUpdate();
  }
  createEmptyTilePixelBlock(e16 = null) {
    const t5 = null == e16 || e16.join(",") === this._tileInfoView.tileInfo.size.join(",");
    if (t5 && null != this._emptyTilePixelBlock)
      return this._emptyTilePixelBlock;
    e16 = e16 || this._tileInfoView.tileInfo.size;
    const [i11, s18] = e16, r14 = new u2({ width: i11, height: s18, pixels: [new Uint8Array(i11 * s18)], mask: new Uint8Array(i11 * s18), pixelType: "u8" });
    return t5 && (this._emptyTilePixelBlock = r14), r14;
  }
  _getBandIds() {
    if (!("rasterFunctionChain" in this.container) || !this.container.rasterFunctionChain)
      return this.layer.bandIds;
    const { bandIds: e16, raster: t5 } = this.layer, i11 = "rasterFunction" in t5 ? t5.rasterFunction.rawInputBandIds : null;
    return (e16 == null ? void 0 : e16.length) && (i11 == null ? void 0 : i11.length) && 1 !== t5.rasterInfo.bandCount ? e16.map((e17) => i11[Math.min(e17, i11.length - 1)]) : e16 || i11;
  }
  updateRasterFunctionParameters() {
  }
  _fetchTile(e16, t5) {
    const i11 = null != t5 ? t5.signal : null, s18 = this.canUseWebGLForProcessing(), { layerView: r14 } = this, { tileInfo: a18 } = r14, o11 = !a18.isWrappable && null != D2(r14.view.spatialReference), l2 = s18 && this.layer.raster.hasUniqueSourceStorageInfo, n22 = { allowPartialFill: true, datumTransformation: r14.datumTransformation, interpolation: s18 ? "nearest" : this.layer.interpolation, registryId: this._blockCacheRegistryId, requestRawData: l2, skipRasterFunction: "raster" === this.type && null != this.container.rasterFunctionChain, signal: i11, srcResolution: this._srcResolutions[e16.level], timeExtent: r14.timeExtent, tileInfo: a18, disableWrapAround: o11 };
    return this.fetchTile(e16, n22);
  }
  _getCacheSize(e16) {
    return e16 ? 40 : 0;
  }
  _initializeTileInfo() {
    const { layerView: e16 } = this, t5 = e16.view.spatialReference;
    if (this._canUseLayerLODs()) {
      const { origin: i12, lods: s19 } = this.layer.tileInfo, r15 = s19.map(({ scale: e17 }) => e17), a19 = j.create({ spatialReference: t5, size: c2, scales: r15, origin: i12 });
      return e16.set("tileInfo", a19), void (this._srcResolutions = s19.map(({ resolution: e17 }) => ({ x: e17, y: e17 })));
    }
    const { scales: i11, srcResolutions: s18, isCustomTilingScheme: r14 } = ae(this.layer.rasterInfo, t5, { tileSize: c2, alignGlobalDatasetWithAGOL: true, limitToSrcResolution: false }), a18 = j.create({ spatialReference: t5, size: c2, scales: i11 }), o11 = 0 === a18.origin.x, { xmin: l2, ymax: h7 } = e16.fullExtent;
    (o11 || r14 && a18.origin.x > l2) && (a18.origin = new x({ x: l2, y: h7, spatialReference: t5 })), this._isCustomTilingScheme = r14, e16.set("tileInfo", a18), this._srcResolutions = s18 ?? [];
  }
  _canUseLayerLODs() {
    var _a;
    const { layer: e16, layerView: t5 } = this;
    if ("Map" !== e16.raster.tileType)
      return false;
    const { lods: i11 } = e16.tileInfo, s18 = (_a = t5.view.constraints) == null ? void 0 : _a.effectiveLODs;
    return (s18 == null ? void 0 : s18.length) === i11.length && s18.every(({ scale: e17 }, t6) => Math.abs(e17 - i11[t6].scale) < 1e-3);
  }
  _computeFetchConcurrency() {
    const { blockBoundary: e16 } = this.layer.rasterInfo.storageInfo, t5 = e16[e16.length - 1];
    return (t5.maxCol - t5.minCol + 1) * (t5.maxRow - t5.minRow + 1) > 64 ? 2 : 10;
  }
  async _enqueueTileFetch(e16, t5) {
    var _a;
    if (!this._fetchQueue.has(e16.key.id)) {
      try {
        const t6 = await this._fetchQueue.push(e16.key), a18 = this._getBandIds();
        let o11 = !this.useProgressiveUpdate || this.layerView.hasTilingEffects && !this._globalSymbolizerParams;
        if (this._globalUpdateRequested && !this.layerView.moving && 0 === this._fetchQueue.length) {
          o11 = false;
          try {
            await this._redrawImage((_a = this._abortController) == null ? void 0 : _a.signal);
          } catch (s18) {
            b(s18) && s.getLogger(this).error(s18);
          }
          this._globalUpdateRequested = false;
        }
        !this.canUseWebGLForProcessing() && "rasterVF" !== this.type || this.layerView.hasTilingEffects || null != this._symbolizerParams || this._updateSymbolizerParams();
        const l2 = this._tileInfoView.getTileCoords(C2, e16.key), n22 = this._tileInfoView.getTileResolution(e16.key);
        await this.updateTileSource(e16, { source: t6, symbolizerParams: this._symbolizerParams, globalSymbolizerParams: this._globalSymbolizerParams, suspended: o11, bandIds: a18, coords: l2, resolution: n22 }), e16.once("attach", () => this.layerView.requestUpdate()), this.container.addChild(e16);
      } catch (s18) {
        b(s18) || s.getLogger(this).error(s18);
      }
      this.layerView.requestUpdate();
    }
  }
  async _redrawImage(e16) {
    if (0 === this.container.children.length)
      return;
    await this.layer.updateRenderer(), this.layerView.hasTilingEffects ? await this._updateGlobalSymbolizerParams(e16) : (this._updateSymbolizerParams(), this._globalSymbolizerParams = null);
    const t5 = this.container.children.map(async (e17) => this.updateTileSymbolizerParameters(e17, { local: this._symbolizerParams, global: this._globalSymbolizerParams }));
    await Promise.allSettled(t5), this.container.requestRender();
  }
  async _updateGlobalSymbolizerParams(e16) {
    const t5 = { srcResolution: this._srcResolutions[this.previousLOD.level], registryId: this._blockCacheRegistryId, signal: e16 }, i11 = await this.layer.fetchPixels(this.layerView.view.extent, this.layerView.view.width, this.layerView.view.height, t5);
    if (!(i11 == null ? void 0 : i11.pixelBlock))
      return;
    const { resolution: s18 } = this.previousLOD, r14 = this._getBandIds(), a18 = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: i11.pixelBlock.extractBands(r14), isGCS: this.layerView.view.spatialReference.isGeographic, resolution: { x: s18, y: s18 }, bandIds: r14 });
    !this.canUseWebGLForProcessing() && a18 && "stretch" === a18.type && this.layer.renderer && "raster-stretch" === this.layer.renderer.type && (a18.factor = a18.factor.map((e17) => 255 * e17), a18.outMin = Math.round(255 * a18.outMin), a18.outMax = Math.round(255 * a18.outMax)), this._globalSymbolizerParams = a18;
  }
  _updateSymbolizerParams() {
    const { resolution: e16 } = this.previousLOD, t5 = this._getBandIds();
    this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null, isGCS: this.layerView.view.spatialReference.isGeographic, resolution: { x: e16, y: e16 }, bandIds: t5 });
  }
  _updateBlockCacheRegistry(e16 = false) {
    const { layer: t5, layerView: i11 } = this, { url: s18, raster: r14 } = t5, { multidimensionalDefinition: a18 } = t5.normalizeRasterFetchOptions({ multidimensionalDefinition: t5.multidimensionalDefinition, timeExtent: i11.timeExtent }), o11 = r14.rasterInfo.multidimensionalInfo ? r14.getSliceIndex(a18) : null, l2 = i2(s18, o11);
    if (l2 !== this._blockCacheRegistryUrl) {
      if (null != this._blockCacheRegistryUrl && a(this._blockCacheRegistryUrl, this._blockCacheRegistryId), this._blockCacheRegistryId = u3(l2, r14.rasterInfo), e16) {
        const { view: e17 } = i11, t6 = this._tileInfoView.getClosestInfoForScale(e17.scale), s19 = this._srcResolutions[t6.level];
        g2(l2, this._blockCacheRegistryId, e17.extent, e17.resolution, s19, r14.ioConfig.sampling);
      }
      this._blockCacheRegistryUrl = l2;
    }
  }
  async doRefresh() {
    if (!this.attached)
      return;
    await this.layer.updateRenderer(), this.layerView.hasTilingEffects || this._updateSymbolizerParams(), this._updateBlockCacheRegistry(true), this._fetchQueue.reset();
    const e16 = [];
    this._globalUpdateRequested = this.layerView.hasTilingEffects || !this.useProgressiveUpdate, this._tileStrategy.refresh((t5) => e16.push(this._enqueueTileFetch(t5))), await this._updatingHandles.addPromise(Promise.allSettled(e16));
  }
};
e([y()], R2.prototype, "_globalUpdateRequested", void 0), e([y()], R2.prototype, "attached", void 0), e([y()], R2.prototype, "container", void 0), e([y()], R2.prototype, "layer", void 0), e([y()], R2.prototype, "layerView", void 0), e([y()], R2.prototype, "type", void 0), e([y()], R2.prototype, "useWebGLForProcessing", null), e([y()], R2.prototype, "useProgressiveUpdate", null), e([y()], R2.prototype, "timeExtent", void 0), e([y()], R2.prototype, "updating", null), R2 = e([c("esri.views.2d.layers.imagery.BaseImageryTileSubView2D")], R2);

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryTileView2D.js
var n20 = class extends R2 {
  constructor() {
    super(...arguments), this.type = "raster";
  }
  attach() {
    super.attach(), this.container = new o9(this._tileInfoView), this.container.isCustomTilingScheme = this._isCustomTilingScheme, this.updateRasterFunctionParameters();
  }
  detach() {
    super.detach(), this.container.removeAllChildren(), this.container = null;
  }
  canUseWebGLForProcessing() {
    var _a, _b;
    const { symbolizer: e16 } = this.layer, r14 = (_b = (_a = e16.lookup) == null ? void 0 : _a.colormapLut) == null ? void 0 : _b.indexedColormap, t5 = r14 && r14.length > this._maxIndexedColormapSize;
    return this.useWebGLForProcessing && e16.canRenderInWebGL && !t5 && !("majority" === this.layer.interpolation && r5(this.layer));
  }
  fetchTile(e16, r14) {
    return this.layer.fetchTile(e16.level, e16.row, e16.col, r14);
  }
  updateRasterFunctionParameters() {
    const { raster: e16, type: r14 } = this.layer, { container: t5 } = this;
    if ("Function" !== e16.datasetFormat || "wcs" === r14)
      return t5.rasterFunctionChain = null, t5.children.forEach((e17) => {
        const { bitmap: r15 } = e17;
        r15 && (r15.suspended = true, r15.processed = false, r15.projected && (r15.invalidateTexture(), r15.rasterTexture = null));
      }), void (this._rasterFunctionState = "na");
    const s18 = this._rasterFunctionState, { rasterFunction: i11, primaryRasters: o11 } = e16, n22 = i11.supportsGPU && (!o11 || o11.rasters.length <= 1), a18 = n22 ? i11.flatWebGLFunctionChain : null, { renderer: l2 } = this.layer, c7 = !n22 || !(a18 == null ? void 0 : a18.functions.length) || "raster-stretch" === (l2 == null ? void 0 : l2.type) && l2.dynamicRangeAdjustment || !this.canUseWebGLForProcessing();
    t5.rasterFunctionChain = c7 ? null : a18;
    const u6 = null == i11 ? "na" : t5.rasterFunctionChain ? "gpu" : "cpu";
    t5.children.forEach((e17) => {
      const { bitmap: r15 } = e17;
      r15 && (r15.suspended = s18 !== u6, r15.processed = false, r15.processedTexture = null);
    }), this._rasterFunctionState = u6;
  }
  async updateTileSource(e16, r14) {
    const t5 = this._getBandIds(), s18 = this._getLayerInterpolation(), i11 = this.canUseWebGLForProcessing(), { source: o11, globalSymbolizerParams: n22, suspended: a18, coords: l2, resolution: c7 } = r14, u6 = this.layerView.hasTilingEffects ? n22 : r14.symbolizerParams, { bitmap: p5 } = e16;
    if ([p5.x, p5.y] = l2, p5.resolution = c7, null != (o11 == null ? void 0 : o11.pixelBlock)) {
      const e17 = { extent: o11.extent, pixelBlock: o11.pixelBlock, srcPixelSize: o11.srcTilePixelSize };
      if (p5.rawPixelData = e17, i11)
        p5.source = o11.pixelBlock, p5.isRendereredSource = false;
      else {
        const r15 = await this.layer.applyRenderer(e17, "stretch" === (n22 == null ? void 0 : n22.type) ? n22 : void 0);
        p5.source = r15, p5.isRendereredSource = true;
      }
      p5.symbolizerParameters = i11 ? u6 : null, p5.transformGrid = i11 ? o11.transformGrid : null;
    } else {
      const e17 = this.createEmptyTilePixelBlock();
      p5.source = e17, p5.symbolizerParameters = i11 ? u6 : null, p5.transformGrid = null;
    }
    p5.bandIds = i11 ? t5 : null, p5.width = this._tileInfoView.tileInfo.size[0], p5.height = this._tileInfoView.tileInfo.size[1], p5.interpolation = s18, p5.suspended = a18, p5.invalidateTexture();
  }
  async updateTileSymbolizerParameters(e16, r14) {
    const { local: t5, global: s18 } = r14, i11 = this._getBandIds(), o11 = this._getLayerInterpolation(), n22 = this.canUseWebGLForProcessing(), { bitmap: a18 } = e16, { rawPixelData: l2 } = a18;
    n22 || null == l2 ? (a18.isRendereredSource && null != l2 && (a18.source = l2.pixelBlock), a18.isRendereredSource = false) : (a18.source = await this.layer.applyRenderer(l2, "stretch" === (s18 == null ? void 0 : s18.type) ? s18 : void 0), a18.isRendereredSource = true), a18.symbolizerParameters = n22 ? this.layerView.hasTilingEffects ? s18 : t5 : null, a18.bandIds = n22 ? i11 : null, a18.interpolation = o11, a18.suspended = false;
  }
  _getLayerInterpolation() {
    const { interpolation: e16, renderer: r14 } = this.layer;
    if (!r14)
      return e16;
    const t5 = r14.type;
    return "raster-colormap" === t5 || "unique-value" === t5 || "class-breaks" === t5 ? "nearest" : "raster-stretch" === r14.type && null != r14.colorRamp ? "bilinear" === e16 || "cubic" === e16 ? "bilinear" : "nearest" : e16;
  }
};
e([y()], n20.prototype, "container", void 0), e([y()], n20.prototype, "layer", void 0), e([y()], n20.prototype, "type", void 0), n20 = e([c("esri.views.2d.layers.imagery.ImageryTileView2D")], n20);
var a16 = n20;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFTile.js
var r13 = class extends r4 {
  constructor(t5, s18, e16, a18, r14, o11, l2 = null) {
    super(t5, s18, e16, a18, r14, o11), this.tileData = new f2(l2), this.tileData.coordScale = [r14, o11], this.tileData.once("isReady", () => this.ready());
  }
  destroy() {
    super.destroy(), this.tileData.destroy(), this.tileData = null, this.stage = null;
  }
  set stencilRef(t5) {
    this.tileData.stencilRef = t5;
  }
  get stencilRef() {
    return this.tileData.stencilRef;
  }
  _createTransforms() {
    return { dvs: e2(), tileMat3: e2() };
  }
  setTransform(e16) {
    super.setTransform(e16);
    const i11 = this.resolution / (e16.resolution * e16.pixelRatio), a18 = this.transforms.tileMat3, [r14, o11] = this.tileData.offset, l2 = [this.x + r14 * this.resolution, this.y - o11 * this.resolution], [h7, n22] = e16.toScreenNoRotation([0, 0], l2), { symbolTileSize: f3 } = this.tileData.symbolizerParameters, m7 = Math.round((this.width - this.tileData.offset[0]) / f3) * f3, c7 = Math.round((this.height - this.tileData.offset[1]) / f3) * f3, u6 = m7 / this.rangeX * i11, D3 = c7 / this.rangeY * i11;
    s3(a18, u6, 0, 0, 0, D3, 0, h7, n22, 1), i(this.transforms.dvs, e16.displayViewMat3, a18), this.tileData.transforms.dvs = this.transforms.dvs;
  }
  onAttach() {
    this.tileData.stage = this.stage;
  }
  onDetach() {
    this.tileData.stage = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFTileContainer.js
var o10 = class extends i4 {
  constructor() {
    super(...arguments), this.isCustomTilingScheme = false, this.symbolTypes = ["triangle"];
  }
  createTile(s18) {
    const t5 = this._tileInfoView.getTileBounds(u(), s18), [i11, o11] = this._tileInfoView.tileInfo.size, n22 = this._tileInfoView.getTileResolution(s18.level);
    return new r13(s18, n22, t5[0], t5[3], i11, o11);
  }
  prepareRenderPasses(e16) {
    const r14 = e16.registerRenderPass({ name: "imagery (vf tile)", brushes: [d2], target: () => this.children.map((e17) => e17.tileData), drawPhase: T.MAP });
    return [...super.prepareRenderPasses(e16), r14];
  }
  doRender(e16) {
    this.visible && e16.drawPhase === T.MAP && this.symbolTypes.forEach((s18) => {
      e16.renderPass = s18, super.doRender(e16);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldTileView2D.js
var a17 = class extends R2 {
  constructor() {
    super(...arguments), this._handle = null, this.type = "rasterVF";
  }
  canUseWebGLForProcessing() {
    return false;
  }
  async fetchTile(e16, t5) {
    t5 = { ...t5, interpolation: "nearest", requestProjectedLocalDirections: true };
    const i11 = await this.layer.fetchTile(e16.level, e16.row, e16.col, t5);
    return "vector-magdir" === this.layer.rasterInfo.dataType && (i11 == null ? void 0 : i11.pixelBlock) && (i11.pixelBlock = await this.layer.convertVectorFieldData(i11.pixelBlock, t5)), i11;
  }
  updateTileSource(e16, t5) {
    const i11 = t5.symbolizerParams, { tileData: r14 } = e16;
    r14.key = e16.key, r14.width = this._tileInfoView.tileInfo.size[0], r14.height = this._tileInfoView.tileInfo.size[1];
    const { symbolTileSize: s18 } = i11, { source: o11 } = t5;
    if (r14.offset = this._getTileSymbolOffset(r14.key, s18), null != (o11 == null ? void 0 : o11.pixelBlock)) {
      const e17 = { extent: o11.extent, pixelBlock: o11.pixelBlock };
      r14.rawPixelData = e17, r14.symbolizerParameters = i11, r14.source = this._sampleVectorFieldData(o11.pixelBlock, i11, r14.offset);
    } else {
      const e17 = [Math.round((this._tileInfoView.tileInfo.size[0] - r14.offset[0]) / s18), Math.round((this._tileInfoView.tileInfo.size[1] - r14.offset[1]) / s18)], t6 = this.createEmptyTilePixelBlock(e17);
      r14.source = t6, r14.symbolizerParameters = i11;
    }
    return r14.invalidateVAO(), Promise.resolve();
  }
  updateTileSymbolizerParameters(e16, t5) {
    var _a;
    const i11 = t5.local, { symbolTileSize: r14 } = i11, { tileData: s18 } = e16;
    s18.offset = this._getTileSymbolOffset(s18.key, r14);
    const o11 = s18.symbolizerParameters.symbolTileSize;
    s18.symbolizerParameters = i11;
    const l2 = (_a = s18.rawPixelData) == null ? void 0 : _a.pixelBlock;
    return null != l2 && o11 !== r14 && (s18.source = this._sampleVectorFieldData(l2, s18.symbolizerParameters, s18.offset)), Promise.resolve();
  }
  attach() {
    super.attach(), this.container = new o10(this._tileInfoView), this.container.isCustomTilingScheme = this._isCustomTilingScheme, this._updateSymbolType(this.layer.renderer), this._handle = d(() => this.layer.renderer, (e16) => this._updateSymbolType(e16));
  }
  detach() {
    var _a;
    super.detach(), this.container.removeAllChildren(), (_a = this._handle) == null ? void 0 : _a.remove(), this._handle = null, this.container = null;
  }
  _getTileSymbolOffset(e16, t5) {
    const i11 = e16.col * this._tileInfoView.tileInfo.size[0] % t5, r14 = e16.row * this._tileInfoView.tileInfo.size[1] % t5;
    return [i11 > t5 / 2 ? t5 - i11 : -i11, r14 > t5 / 2 ? t5 - r14 : -r14];
  }
  _sampleVectorFieldData(e16, t5, i11) {
    const { symbolTileSize: r14 } = t5;
    return S(e16, "vector-uv", r14, i11);
  }
  _updateSymbolType(e16) {
    "vector-field" === e16.type && (this.container.symbolTypes = "wind-barb" === e16.style ? ["scalar", "triangle"] : "simple-scalar" === e16.style ? ["scalar"] : ["triangle"]);
  }
};
e([y()], a17.prototype, "container", void 0), e([y()], a17.prototype, "layer", void 0), e([y()], a17.prototype, "type", void 0), a17 = e([c("esri.views.2d.layers.imagery.VectorFieldTileView2D")], a17);
var n21 = a17;

// node_modules/@arcgis/core/views/layers/ImageryTileLayerView.js
var p4 = (p5) => {
  let u6 = class extends p5 {
    constructor() {
      super(...arguments), this._rasterFieldPrefix = "Raster.", this.layer = null, this.view = null, this.tileInfo = null;
    }
    get fullExtent() {
      return this._getfullExtent();
    }
    _getfullExtent() {
      return se(this.layer.rasterInfo, this.view.spatialReference);
    }
    get hasTilingEffects() {
      return !!(this.layer.renderer && "dynamicRangeAdjustment" in this.layer.renderer && this.layer.renderer.dynamicRangeAdjustment);
    }
    get datumTransformation() {
      return v(this.layer.fullExtent, this.view.spatialReference, true);
    }
    supportsSpatialReference(e16) {
      return !!se(this.layer.rasterInfo, e16);
    }
    async fetchPopupFeatures(e16, o11) {
      const { layer: s18 } = this;
      if (!e16)
        throw new s2("imageryTileLayerView:fetchPopupFeatures", "Nothing to fetch without area", { layer: s18 });
      const { popupEnabled: i11 } = s18, a18 = p(s18, o11);
      if (!i11 || null == a18)
        throw new s2("imageryTileLayerView:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: i11, popupTemplate: a18 });
      const n22 = [], { value: p6, magdirValue: u7, processedValue: c7 } = await s18.identify(e16, { timeExtent: this.timeExtent });
      let f3 = "";
      if (p6 && p6.length) {
        f3 = "imagery-tile" === s18.type && s18.hasStandardTime() && null != p6[0] ? p6.map((e18) => s18.getStandardTimeValue(e18)).join(", ") : p6.join(", ");
        const e17 = { ObjectId: 0 }, r14 = "Raster.ServicePixelValue";
        e17[r14] = (c7 == null ? void 0 : c7.join(", ")) ?? f3, e17[r14 + ".Raw"] = f3;
        const o12 = s18.rasterInfo.attributeTable;
        if (null != o12) {
          const { fields: t5, features: r15 } = o12, s19 = t5.find(({ name: e18 }) => "value" === e18.toLowerCase()), i13 = s19 ? r15.find((e18) => String(e18.attributes[s19.name]) === f3) : null;
          if (i13) {
            for (const o13 in i13.attributes)
              if (i13.attributes.hasOwnProperty(o13)) {
                e17[this._rasterFieldPrefix + o13] = i13.attributes[o13];
              }
          }
        }
        const i12 = s18.rasterInfo.dataType;
        "vector-magdir" !== i12 && "vector-uv" !== i12 || (e17["Raster.Magnitude"] = u7 == null ? void 0 : u7[0], e17["Raster.Direction"] = u7 == null ? void 0 : u7[1]);
        const a19 = new c3(this.fullExtent.clone(), null, e17);
        a19.layer = s18, a19.sourceLayer = a19.layer, n22.push(a19);
      }
      return n22;
    }
  };
  return e([y()], u6.prototype, "layer", void 0), e([y(j2)], u6.prototype, "timeExtent", void 0), e([y()], u6.prototype, "view", void 0), e([y()], u6.prototype, "fullExtent", null), e([y()], u6.prototype, "tileInfo", void 0), e([y({ readOnly: true })], u6.prototype, "hasTilingEffects", null), e([y()], u6.prototype, "datumTransformation", null), u6 = e([c("esri.views.layers.ImageryTileLayerView")], u6), u6;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryTileLayerView2D.js
var g4 = class extends p4(a2(m(u4))) {
  constructor() {
    super(...arguments), this._useWebGLForProcessing = true, this._useProgressiveUpdate = true, this.subview = null;
  }
  get useWebGLForProcessing() {
    return this._useWebGLForProcessing;
  }
  set useWebGLForProcessing(e16) {
    this._useWebGLForProcessing = e16, this.subview && "useWebGLForProcessing" in this.subview && (this.subview.useWebGLForProcessing = e16);
  }
  get useProgressiveUpdate() {
    return this._useWebGLForProcessing;
  }
  set useProgressiveUpdate(e16) {
    this._useProgressiveUpdate = e16, this.subview && "useProgressiveUpdate" in this.subview && (this.subview.useProgressiveUpdate = e16);
  }
  get displayParameters() {
    const { layer: e16 } = this, t5 = this._get("displayParameters");
    return e16.renderer ? { bandIds: e16.bandIds, renderer: e16.renderer, interpolation: e16.interpolation, multidimensionalDefinition: e16.multidimensionalDefinition, rasterFunction: "imagery-tile" === e16.type ? e16.rasterFunction : null } : t5;
  }
  update(e16) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e16), this.notifyChange("updating");
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._updateSubview(), this.addAttachHandles([d(() => this.displayParameters, (e16, t5) => {
      const r14 = e16.interpolation !== (t5 == null ? void 0 : t5.interpolation) && ("majority" === e16.interpolation || "majority" === (t5 == null ? void 0 : t5.interpolation)) && r5(this.layer), o11 = e16.renderer !== (t5 == null ? void 0 : t5.renderer) && this._getSubviewType(t5 == null ? void 0 : t5.renderer) !== this._getSubviewType(e16.renderer);
      o11 && this._updateSubview();
      const a18 = e16.multidimensionalDefinition !== (t5 == null ? void 0 : t5.multidimensionalDefinition), n22 = e16.rasterFunction !== (t5 == null ? void 0 : t5.rasterFunction), u6 = n22 && !this._useWebGLForProcessing, h7 = a18 || r14 || o11 || u6;
      this.subview.redrawOrRefetch({ refetch: h7, reprocess: n22 }).catch((e17) => {
        b(e17) || s.getLogger(this).error(e17);
      }), this.notifyChange("updating");
    }), d(() => this.layer.multidimensionalSubset ?? null, (e16, t5) => {
      const { multidimensionalDefinition: r14 } = this.layer;
      null != r14 && o(r14, e16) !== o(r14, t5) && (this.subview.redrawOrRefetch({ refetch: true }).catch((e17) => {
        b(e17) || s.getLogger(this).error(e17);
      }), this.notifyChange("updating"));
    }, C), d(() => this.timeExtent, () => {
      this.subview.timeExtent = this.timeExtent, this.subview.redrawOrRefetch({ refetch: true }).catch((e16) => {
        b(e16) || s.getLogger(this).error(e16);
      });
    }, P)]);
  }
  detach() {
    var _a;
    this.layer.decreaseRasterJobHandlerUsage(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.subview.moveEnd();
  }
  async hitTest(e16, s18) {
    return [{ type: "graphic", layer: this.layer, mapPoint: e16, graphic: new c3({ attributes: {}, geometry: e16.clone() }) }];
  }
  doRefresh() {
    return this.subview ? this.subview.doRefresh() : Promise.resolve();
  }
  _updateSubview() {
    var _a;
    const { renderer: e16 } = this.layer;
    if (!e16)
      return;
    const t5 = this._getSubviewType(e16);
    if (this.subview) {
      if (this.subview.type === t5)
        return void this._attachSubview(this.subview);
      this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null;
    }
    const { layer: s18 } = this;
    let i11;
    if (i11 = "rasterVF" === t5 ? new n21({ layer: s18, layerView: this }) : "flow" === t5 ? new h4({ layer: s18, layerView: this }) : new a16({ layer: s18, layerView: this }), "useWebGLForProcessing" in i11 && (i11.useWebGLForProcessing = this._useWebGLForProcessing), "useProgressiveUpdate" in i11 && (i11.useProgressiveUpdate = this._useProgressiveUpdate), "previousLOD" in i11) {
      const { subview: e17 } = this;
      i11.previousLOD = e17 && "previousLOD" in e17 ? e17.previousLOD : null;
    }
    this._attachSubview(i11), this.subview = i11, this.requestUpdate();
  }
  _attachSubview(e16) {
    e16 && !e16.attached && (e16.attach(), e16.attached = true, this.container.addChildAt(e16.container, 0));
  }
  _detachSubview(e16) {
    (e16 == null ? void 0 : e16.attached) && (this.container.removeChild(e16.container), e16.detach(), e16.attached = false);
  }
  _getSubviewType(e16) {
    const t5 = e16 == null ? void 0 : e16.type;
    return "vector-field" === t5 ? "rasterVF" : "flow" === t5 ? "flow" : "raster";
  }
};
e([y()], g4.prototype, "subview", void 0), e([y()], g4.prototype, "useWebGLForProcessing", null), e([y()], g4.prototype, "useProgressiveUpdate", null), e([y({ readOnly: true })], g4.prototype, "displayParameters", null), g4 = e([c("esri.views.2d.layers.ImageryTileLayerView2D")], g4);
var y3 = g4;
export {
  y3 as default
};
//# sourceMappingURL=ImageryTileLayerView2D-6RG4BXJU.js.map
