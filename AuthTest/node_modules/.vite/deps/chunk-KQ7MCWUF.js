import {
  p as p2
} from "./chunk-6B7VJB6C.js";
import {
  L
} from "./chunk-A43TI6AT.js";
import {
  S
} from "./chunk-2D3PORS4.js";
import {
  _
} from "./chunk-6TJWLWLO.js";
import {
  j as j2,
  p
} from "./chunk-WZPOQGKL.js";
import {
  o
} from "./chunk-WURET5CW.js";
import {
  r
} from "./chunk-QWPLZ3QH.js";
import {
  K,
  N,
  W,
  j,
  t3 as t
} from "./chunk-R5DM4YAB.js";
import {
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  a,
  b,
  s as s4
} from "./chunk-RFPH3ZTZ.js";
import {
  u
} from "./chunk-WGO3VFQP.js";
import {
  s,
  s2,
  s3
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/layers/mixins/PortalLayer.js
var j3 = (j4) => {
  let _2 = class extends j4 {
    constructor() {
      super(...arguments), this.resourceReferences = { portalItem: null, paths: [] }, this.userHasEditingPrivileges = true, this.userHasFullEditingPrivileges = false, this.userHasUpdateItemPrivileges = false;
    }
    destroy() {
      this.portalItem = u(this.portalItem), this.resourceReferences.portalItem = null, this.resourceReferences.paths.length = 0;
    }
    set portalItem(e2) {
      e2 !== this._get("portalItem") && (this.removeOrigin("portal-item"), this._set("portalItem", e2));
    }
    readPortalItem(e2, t2, r2) {
      if (t2.itemId)
        return new S({ id: t2.itemId, portal: r2 == null ? void 0 : r2.portal });
    }
    writePortalItem(e2, t2) {
      (e2 == null ? void 0 : e2.id) && (t2.itemId = e2.id);
    }
    async loadFromPortal(e2, t2) {
      var _a;
      if ((_a = this.portalItem) == null ? void 0 : _a.id)
        try {
          const { load: r2 } = await import("./layersLoader-J4JHSR2R.js");
          return s4(t2), await r2({ instance: this, supportedTypes: e2.supportedTypes, validateItem: e2.validateItem, supportsData: e2.supportsData, layerModuleTypeMap: e2.layerModuleTypeMap }, t2);
        } catch (r2) {
          throw b(r2) || s2.getLogger(this).warn(`Failed to load layer (${this.title}, ${this.id}) portal item (${this.portalItem.id})
  ${r2}`), r2;
        }
    }
    async finishLoadEditablePortalLayer(e2) {
      this._set("userHasEditingPrivileges", await this._fetchUserHasEditingPrivileges(e2).catch((e3) => (a(e3), true)));
    }
    async setUserPrivileges(e2, r2) {
      if (!s.userPrivilegesApplied)
        return this.finishLoadEditablePortalLayer(r2);
      if (this.url)
        try {
          const { features: { edit: t2, fullEdit: s5 }, content: { updateItem: i } } = await this._fetchUserPrivileges(e2, r2);
          this._set("userHasEditingPrivileges", t2), this._set("userHasFullEditingPrivileges", s5), this._set("userHasUpdateItemPrivileges", i);
        } catch (s5) {
          a(s5);
        }
    }
    async _fetchUserPrivileges(e2, t2) {
      var _a;
      let s5 = this.portalItem;
      if (!e2 || !s5 || !s5.loaded || s5.sourceUrl)
        return this._fetchFallbackUserPrivileges(t2);
      const i = e2 === s5.id;
      if (i && s5.portal.user)
        return p2(s5);
      let o2, a2;
      if (i)
        o2 = s5.portal.url;
      else
        try {
          o2 = await L(this.url, t2);
        } catch (m) {
          a(m);
        }
      if (!o2 || !W(o2, s5.portal.url))
        return this._fetchFallbackUserPrivileges(t2);
      try {
        const e3 = null != t2 ? t2.signal : null;
        a2 = await ((_a = t) == null ? void 0 : _a.getCredential(`${o2}/sharing`, { prompt: false, signal: e3 }));
      } catch (m) {
        a(m);
      }
      const l = true, n = false, p3 = false;
      if (!a2)
        return { features: { edit: l, fullEdit: n }, content: { updateItem: p3 } };
      try {
        if (i ? await s5.reload() : (s5 = new S({ id: e2, portal: { url: o2 } }), await s5.load(t2)), s5.portal.user)
          return p2(s5);
      } catch (m) {
        a(m);
      }
      return { features: { edit: l, fullEdit: n }, content: { updateItem: p3 } };
    }
    async _fetchFallbackUserPrivileges(e2) {
      let t2 = true;
      try {
        t2 = await this._fetchUserHasEditingPrivileges(e2);
      } catch (r2) {
        a(r2);
      }
      return { features: { edit: t2, fullEdit: false }, content: { updateItem: false } };
    }
    async _fetchUserHasEditingPrivileges(e2) {
      var _a;
      const t2 = this.url ? (_a = t) == null ? void 0 : _a.findCredential(this.url) : null;
      if (!t2)
        return true;
      const s5 = E.credential === t2 ? E.user : await this._fetchEditingUser(e2);
      return E.credential = t2, E.user = s5, null == (s5 == null ? void 0 : s5.privileges) || s5.privileges.includes("features:user:edit");
    }
    async _fetchEditingUser(e2) {
      var _a, _b;
      const t2 = (_b = (_a = this.portalItem) == null ? void 0 : _a.portal) == null ? void 0 : _b.user;
      if (t2)
        return t2;
      const o2 = t.findServerInfo(this.url ?? "");
      if (!(o2 == null ? void 0 : o2.owningSystemUrl))
        return null;
      const a2 = `${o2.owningSystemUrl}/sharing/rest`, l = j2.getDefault();
      if (l && l.loaded && K(l.restUrl) === K(a2))
        return l.user;
      const n = `${a2}/community/self`, p3 = null != e2 ? e2.signal : null, u2 = await _(j(n, { authMode: "no-prompt", query: { f: "json" }, signal: p3 }));
      return u2.ok ? p.fromJSON(u2.value.data) : null;
    }
    read(e2, t2) {
      t2 && (t2.layer = this), super.read(e2, t2);
    }
    write(e2, t2) {
      var _a;
      const r2 = t2 == null ? void 0 : t2.portal, s5 = ((_a = this.portalItem) == null ? void 0 : _a.id) && (this.portalItem.portal || j2.getDefault());
      return r2 && s5 && !N(s5.restUrl, r2.restUrl) ? (t2.messages && t2.messages.push(new s3("layer:cross-portal", `The layer '${this.title} (${this.id})' cannot be persisted because it refers to an item on a different portal than the one being saved to. To save, set layer.portalItem to null or save to the same portal as the item associated with the layer`, { layer: this })), null) : super.write(e2, { ...t2, layer: this });
    }
  };
  return e([y({ type: S })], _2.prototype, "portalItem", null), e([o("web-document", "portalItem", ["itemId"])], _2.prototype, "readPortalItem", null), e([r("web-document", "portalItem", { itemId: { type: String } })], _2.prototype, "writePortalItem", null), e([y({ clonable: false })], _2.prototype, "resourceReferences", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasEditingPrivileges", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasFullEditingPrivileges", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasUpdateItemPrivileges", void 0), _2 = e([c("esri.layers.mixins.PortalLayer")], _2), _2;
};
var E = { credential: null, user: null };

export {
  j3 as j
};
//# sourceMappingURL=chunk-KQ7MCWUF.js.map
