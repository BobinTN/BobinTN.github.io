import {
  n4 as n,
  t as t3
} from "./chunk-VLDVHSJX.js";
import {
  i as i2
} from "./chunk-ULPUCHVC.js";
import {
  f as f2
} from "./chunk-BV5PCIP6.js";
import {
  h as h2
} from "./chunk-A6KO3R3G.js";
import {
  T as T2,
  e2 as e3
} from "./chunk-T56C4ORZ.js";
import {
  U2 as U,
  _,
  g2
} from "./chunk-ABKJC2RS.js";
import {
  ee
} from "./chunk-UMP4LYVN.js";
import {
  T
} from "./chunk-TREPTI6V.js";
import {
  t
} from "./chunk-PPQAHSM4.js";
import {
  C,
  D,
  E,
  F,
  G,
  I,
  O,
  R
} from "./chunk-RCLKRKWR.js";
import {
  e as e2
} from "./chunk-76KPSQLT.js";
import {
  t as t2
} from "./chunk-6M5DUIJQ.js";
import {
  M as M3,
  b as b2,
  f,
  h,
  i,
  l,
  r
} from "./chunk-YVNEJWNQ.js";
import {
  c as c2
} from "./chunk-B3RXTW72.js";
import {
  u
} from "./chunk-EIY2DYTV.js";
import {
  M as M2
} from "./chunk-MKW4ORPJ.js";
import {
  d
} from "./chunk-TBSVVR6M.js";
import {
  M
} from "./chunk-Y5D433JZ.js";
import {
  x2 as x
} from "./chunk-QNOCEWCR.js";
import {
  g,
  y2 as y
} from "./chunk-LXXF7K7W.js";
import {
  c
} from "./chunk-SBW6NNVI.js";
import {
  e
} from "./chunk-62CXLI6S.js";
import {
  b,
  s as s2
} from "./chunk-RFPH3ZTZ.js";
import {
  s2 as s
} from "./chunk-WJ3HJKNC.js";

// node_modules/@arcgis/core/views/2d/engine/flow/utils.js
function n2(n4) {
  const i5 = t4(s3(n4)), o3 = i5, a3 = true, l6 = Math.max(i5 / 2, 5), r3 = Math.round(u(n4.maxPathLength) / l6) + 1, u5 = 10, { density: c7 } = n4;
  return { smoothing: u(n4.smoothing), interpolate: true, velocityScale: "flow-from" === n4.flowRepresentation ? 1 : -1, verticesPerLine: r3, minSpeedThreshold: 1e-3, segmentLength: l6, maxTurnAngle: 1, collisions: a3, lineCollisionWidth: o3, lineSpacing: u5, density: c7 };
}
function t4(e5) {
  return "constant" === e5.kind ? e5.value[0] : e5.values[e5.values.length - 1];
}
function i3(e5) {
  const n4 = e5.toRgba();
  return [n4[0] / 255, n4[1] / 255, n4[2] / 255, n4[3]];
}
function o(e5) {
  return { kind: "constant", value: [0.1, 0.1, 0.1, 1] };
}
function s3(n4) {
  if (!n4.hasVisualVariables("size"))
    return { kind: "constant", value: [u(n4.trailWidth)] };
  const t7 = n4.getVisualVariablesForType("size")[0], i5 = [], o3 = [];
  let s5;
  if (t7.stops) {
    for (const n5 of t7.stops)
      i5.push(n5.value), o3.push(u(n5.size));
    s5 = t7.stops.length;
  } else
    i5.push(t7.minDataValue, t7.maxDataValue), o3.push(u(t7.minSize), u(t7.maxSize)), s5 = 2;
  return { kind: "ramp", stops: i5, values: o3, count: s5 };
}
function a(e5) {
  if (!e5.hasVisualVariables("color"))
    return { kind: "constant", value: i3(e5.color) };
  const n4 = e5.getVisualVariablesForType("color")[0], t7 = [], o3 = [];
  for (const s5 of n4.stops)
    t7.push(s5.value), Array.prototype.push.apply(o3, i3(s5.color));
  return { kind: "ramp", stops: t7, values: o3, count: n4.stops.length };
}
function l2(e5) {
  if (!e5.hasVisualVariables("opacity"))
    return { kind: "constant", value: [1] };
  const n4 = e5.getVisualVariablesForType("opacity")[0], t7 = [], i5 = [];
  for (const o3 of n4.stops)
    t7.push(o3.value), i5.push(o3.opacity);
  return { kind: "ramp", stops: t7, values: i5, count: n4.stops.length };
}
function r2(e5, n4, t7, i5) {
  switch (n4) {
    case "int":
      e5.setUniform1iv(t7, i5);
      break;
    case "float":
      e5.setUniform1fv(t7, i5);
      break;
    case "vec2":
      e5.setUniform2fv(t7, i5);
      break;
    case "vec3":
      e5.setUniform3fv(t7, i5);
      break;
    case "vec4":
      e5.setUniform4fv(t7, i5);
  }
}
function u2(e5, n4, t7, i5) {
  "constant" === i5.kind ? r2(e5, t7, `u_${n4}`, i5.value) : (r2(e5, "float", `u_${n4}_stops`, i5.stops), r2(e5, t7, `u_${n4}_values`, i5.values), e5.setUniform1i(`u_${n4}_count`, i5.count));
}
function c3(e5, n4) {
  let t7 = true;
  return t7 = t7 && e5.collisions === n4.collisions, t7 = t7 && e5.density === n4.density, t7 = t7 && e5.interpolate === n4.interpolate, t7 = t7 && e5.lineCollisionWidth === n4.lineCollisionWidth, t7 = t7 && e5.lineSpacing === n4.lineSpacing, t7 = t7 && e5.maxTurnAngle === n4.maxTurnAngle, t7 = t7 && e5.minSpeedThreshold === n4.minSpeedThreshold, t7 = t7 && e5.segmentLength === n4.segmentLength, t7 = t7 && e5.smoothing === n4.smoothing, t7 = t7 && e5.velocityScale === n4.velocityScale, t7 = t7 && e5.verticesPerLine === n4.verticesPerLine, t7;
}
function p(e5, n4) {
  return e5 === n4 || null != e5 && null != n4 && e5.equals(n4);
}
function f3(e5, n4) {
  if (!c3(e5.simulationSettings, n4.simulationSettings))
    return false;
  if (!p(e5.timeExtent, n4.timeExtent))
    return false;
  let t7 = true;
  return t7 = t7 && e5.loadImagery === n4.loadImagery, t7 = t7 && e5.createFlowMesh === n4.createFlowMesh, t7 = t7 && e5.color.kind === n4.color.kind, t7 = t7 && e5.opacity.kind === n4.opacity.kind, t7 = t7 && e5.size.kind === n4.size.kind, t7;
}

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Imagery.js
var f4 = class _f {
  constructor(t7) {
    this._params = t7, this.animated = false;
  }
  isCompatible(t7) {
    if (!(t7 instanceof _f))
      return false;
    if (!p(this._params.timeExtent, t7._params.timeExtent))
      return false;
    let r3 = true;
    return r3 = r3 && this._params.loadImagery === t7._params.loadImagery, r3 = r3 && this._params.color.kind === t7._params.color.kind, r3 = r3 && this._params.opacity.kind === t7._params.opacity.kind, r3;
  }
  async load(a3, r3) {
    const { extent: e5, size: s5 } = a3;
    s2(r3);
    const o3 = await this._params.loadImagery(e5, s5[0], s5[1], this._params.timeExtent, r3);
    return new x2(o3, { color: this._params.color, opacity: this._params.opacity });
  }
  render(t7, a3, e5) {
    const { context: s5 } = t7, { program: n4 } = e5;
    s5.setFaceCullingEnabled(false), s5.setBlendingEnabled(true), s5.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), s5.useProgram(n4), n4.setUniformMatrix3fv("u_dvsMat3", a3.dvsMat3), s5.bindTexture(e5.texture, 0), n4.setUniform1i("u_texture", 0), n4.setUniform1f("u_Min", e5.min), n4.setUniform1f("u_Max", e5.max), u2(n4, "color", "vec4", this._params.color), u2(n4, "opacity", "float", this._params.opacity), s5.bindVAO(e5.vertexArray), s5.drawArrays(E.TRIANGLE_STRIP, 0, 4);
  }
};
var d2 = /* @__PURE__ */ new Map();
d2.set("a_position", 0), d2.set("a_texcoord", 1);
var u3 = { geometry: [new t("a_position", 2, C.UNSIGNED_SHORT, 0, 8), new t("a_texcoord", 2, C.UNSIGNED_SHORT, 4, 8)] };
var w = { vsPath: "raster/flow/imagery", fsPath: "raster/flow/imagery", attributes: d2 };
var x2 = class {
  constructor(t7, a3) {
    this._flowData = t7, this._values = a3;
  }
  attach(t7) {
    const { context: a3 } = t7, { width: r3, height: s5 } = this._flowData, o3 = h2.createVertex(a3, F.STATIC_DRAW, new Uint16Array([0, 0, 0, 1, r3, 0, 1, 1, 0, s5, 0, 0, r3, s5, 1, 0])), i5 = new f2(a3, d2, u3, { geometry: o3 }), _4 = [];
    "ramp" === this._values.color.kind && _4.push("vvColor"), "ramp" === this._values.opacity.kind && _4.push("vvOpacity");
    const f9 = t7.painter.materialManager.getProgram(w, _4);
    let x3 = 1e6, g4 = -1e6;
    for (let e5 = 0; e5 < s5; e5++)
      for (let t8 = 0; t8 < r3; t8++)
        if (0 !== this._flowData.mask[e5 * r3 + t8]) {
          const a4 = this._flowData.data[2 * (e5 * r3 + t8)], s6 = this._flowData.data[2 * (e5 * r3 + t8) + 1], o4 = Math.sqrt(a4 * a4 + s6 * s6);
          x3 = Math.min(x3, o4), g4 = Math.max(g4, o4);
        }
    const y4 = new Uint8Array(4 * r3 * s5);
    for (let e5 = 0; e5 < s5; e5++)
      for (let t8 = 0; t8 < r3; t8++)
        if (0 !== this._flowData.mask[e5 * r3 + t8]) {
          const a4 = this._flowData.data[2 * (e5 * r3 + t8)], s6 = this._flowData.data[2 * (e5 * r3 + t8) + 1], o4 = (Math.sqrt(a4 * a4 + s6 * s6) - x3) / (g4 - x3);
          y4[4 * (e5 * r3 + t8)] = 255 * o4, y4[4 * (e5 * r3 + t8) + 1] = 0, y4[4 * (e5 * r3 + t8) + 2] = 0, y4[4 * (e5 * r3 + t8) + 3] = 255;
        } else
          y4[4 * (e5 * r3 + t8)] = 0, y4[4 * (e5 * r3 + t8) + 1] = 0, y4[4 * (e5 * r3 + t8) + 2] = 0, y4[4 * (e5 * r3 + t8) + 3] = 0;
    const A = new e3();
    A.internalFormat = G.RGBA, A.wrapMode = D.CLAMP_TO_EDGE, A.flipped = true, A.width = r3, A.height = s5;
    const b3 = new T2(a3, A, y4);
    this.vertexArray = i5, this.program = f9, this.texture = b3, this.min = x3, this.max = g4, this._flowData = null;
  }
  detach() {
    this.vertexArray.dispose(), this.texture.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Particles.js
var _2 = class __ {
  constructor(t7) {
    this._params = t7;
  }
  get animated() {
    return this._params.flowSpeed > 0;
  }
  isCompatible(t7) {
    return t7 instanceof __ && f3(this._params, t7._params);
  }
  async load(e5, a3) {
    const { extent: s5, size: r3 } = e5;
    s2(a3);
    const i5 = await this._params.loadImagery(s5, r3[0], r3[1], this._params.timeExtent, a3), { vertexData: o3, indexData: n4 } = await this._params.createFlowMesh("Particles", this._params.simulationSettings, i5, a3);
    return new c4(o3, n4, { color: this._params.color, opacity: this._params.opacity, size: this._params.size });
  }
  render(t7, e5, s5) {
    const { context: n4 } = t7, { program: m3 } = s5;
    n4.setFaceCullingEnabled(false), n4.setBlendingEnabled(true), n4.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), n4.useProgram(m3), m3.setUniform1f("u_time", e5.time), m3.setUniform1f("u_trailLength", this._params.trailLength), m3.setUniform1f("u_flowSpeed", this._params.flowSpeed), m3.setUniform1f("u_featheringSize", this._params.featheringSize), m3.setUniform1f("u_featheringOffset", this._params.featheringOffset), m3.setUniform1f("u_introFade", this._params.introFade ? 1 : 0), m3.setUniform1f("u_fadeToZero", this._params.fadeToZero ? 1 : 0), m3.setUniform1f("u_decayRate", this._params.decayRate), m3.setUniformMatrix3fv("u_dvsMat3", e5.dvsMat3), m3.setUniformMatrix3fv("u_displayViewMat3", e5.displayViewMat3), u2(m3, "color", "vec4", this._params.color), u2(m3, "opacity", "float", this._params.opacity), u2(m3, "size", "float", this._params.size), n4.bindVAO(s5.vertexArray), n4.drawElements(E.TRIANGLES, s5.indexCount, C.UNSIGNED_INT, 0);
  }
};
var l3 = /* @__PURE__ */ new Map();
l3.set("a_xyts0", 0), l3.set("a_xyts1", 1), l3.set("a_typeIdDurationSeed", 2), l3.set("a_extrudeInfo", 3);
var h3 = { geometry: [new t("a_xyts0", 4, C.FLOAT, 0, 64), new t("a_xyts1", 4, C.FLOAT, 16, 64), new t("a_typeIdDurationSeed", 4, C.FLOAT, 32, 64), new t("a_extrudeInfo", 4, C.FLOAT, 48, 64)] };
var f5 = { vsPath: "raster/flow/particles", fsPath: "raster/flow/particles", attributes: l3 };
var c4 = class {
  constructor(t7, e5, a3) {
    this._vertexData = t7, this._indexData = e5, this._values = a3;
  }
  attach(t7) {
    const { context: e5 } = t7, a3 = h2.createVertex(e5, F.STATIC_DRAW, this._vertexData), r3 = h2.createIndex(e5, F.STATIC_DRAW, this._indexData), i5 = new f2(e5, l3, h3, { geometry: a3 }, r3), o3 = [];
    "ramp" === this._values.color.kind && o3.push("vvColor"), "ramp" === this._values.opacity.kind && o3.push("vvOpacity"), "ramp" === this._values.size.kind && o3.push("vvSize");
    const p3 = t7.painter.materialManager.getProgram(f5, o3);
    this.vertexArray = i5, this.program = p3, this.indexCount = this._indexData.length, this._vertexData = null, this._indexData = null;
  }
  detach() {
    this.vertexArray.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Stack.js
var t5 = class _t {
  constructor(t7) {
    this._styles = t7;
  }
  get animated() {
    return this._styles.reduce((t7, s5) => t7 || s5.animated, false);
  }
  isCompatible(s5) {
    if (!(s5 instanceof _t))
      return false;
    if (this._styles.length !== s5._styles.length)
      return false;
    const e5 = this._styles.length;
    for (let t7 = 0; t7 < e5; t7++)
      if (!this._styles[t7].isCompatible(s5._styles[t7]))
        return false;
    return true;
  }
  async load(t7, e5) {
    const r3 = await Promise.all(this._styles.map((s5) => s5.load(t7, e5)));
    return new s4(r3);
  }
  render(t7, s5, e5) {
    for (let r3 = 0; r3 < this._styles.length; r3++)
      this._styles[r3].render(t7, s5, e5.resources[r3]);
  }
};
var s4 = class {
  constructor(t7) {
    this.resources = t7;
  }
  attach(t7) {
    for (const s5 of this.resources)
      s5.attach(t7);
  }
  detach() {
    for (const t7 of this.resources)
      t7.detach();
  }
  get ready() {
    return this.resources.reduce((t7, s5) => t7 && s5.ready, true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Streamlines.js
var _3 = class __ {
  constructor(e5) {
    this._params = e5;
  }
  get animated() {
    return this._params.flowSpeed > 0;
  }
  isCompatible(e5) {
    return e5 instanceof __ && f3(this._params, e5._params);
  }
  async load(t7, a3) {
    const { extent: s5, size: r3 } = t7;
    s2(a3);
    const i5 = await this._params.loadImagery(s5, r3[0], r3[1], this._params.timeExtent, a3), { vertexData: o3, indexData: n4 } = await this._params.createFlowMesh("Streamlines", this._params.simulationSettings, i5, a3);
    return new d3(o3, n4, { color: this._params.color, opacity: this._params.opacity, size: this._params.size });
  }
  render(e5, t7, s5) {
    const { context: n4 } = e5, { program: m3 } = s5;
    n4.setFaceCullingEnabled(false), n4.setBlendingEnabled(true), n4.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), n4.useProgram(m3), m3.setUniform1f("u_time", t7.time), m3.setUniform1f("u_trailLength", this._params.trailLength), m3.setUniform1f("u_flowSpeed", this._params.flowSpeed), m3.setUniform1f("u_featheringSize", this._params.featheringSize), m3.setUniform1f("u_featheringOffset", this._params.featheringOffset), m3.setUniform1f("u_introFade", this._params.introFade ? 1 : 0), m3.setUniform1f("u_fadeToZero", this._params.fadeToZero ? 1 : 0), m3.setUniform1f("u_decayRate", this._params.decayRate), m3.setUniformMatrix3fv("u_dvsMat3", t7.dvsMat3), m3.setUniformMatrix3fv("u_displayViewMat3", t7.displayViewMat3), u2(m3, "color", "vec4", this._params.color), u2(m3, "opacity", "float", this._params.opacity), u2(m3, "size", "float", this._params.size), n4.bindVAO(s5.vertexArray), n4.drawElements(E.TRIANGLES, s5.indexCount, C.UNSIGNED_INT, 0);
  }
};
var l4 = /* @__PURE__ */ new Map();
l4.set("a_positionAndSide", 0), l4.set("a_timeInfo", 1), l4.set("a_extrude", 2), l4.set("a_speed", 3);
var h4 = { geometry: [new t("a_positionAndSide", 3, C.FLOAT, 0, 36), new t("a_timeInfo", 3, C.FLOAT, 12, 36), new t("a_extrude", 2, C.FLOAT, 24, 36), new t("a_speed", 1, C.FLOAT, 32, 36)] };
var f6 = { vsPath: "raster/flow/streamlines", fsPath: "raster/flow/streamlines", attributes: l4 };
var d3 = class {
  constructor(e5, t7, a3) {
    this._vertexData = e5, this._indexData = t7, this._values = a3;
  }
  attach(e5) {
    const { context: t7 } = e5, a3 = h2.createVertex(t7, F.STATIC_DRAW, this._vertexData), r3 = h2.createIndex(t7, F.STATIC_DRAW, this._indexData), i5 = new f2(t7, l4, h4, { geometry: a3 }, r3), o3 = [];
    "ramp" === this._values.color.kind && o3.push("vvColor"), "ramp" === this._values.opacity.kind && o3.push("vvOpacity"), "ramp" === this._values.size.kind && o3.push("vvSize");
    const p3 = e5.painter.materialManager.getProgram(f6, o3);
    this.vertexArray = i5, this.program = p3, this.indexCount = this._indexData.length, this._vertexData = null, this._indexData = null;
  }
  detach() {
    this.vertexArray.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/createFlowStyle.js
var m = 4;
var u4 = 1;
var f7 = 0.5;
var p2 = true;
var d4 = true;
var y2 = 2.3;
function g3(g4, w2) {
  const { flowSpeed: h7, trailLength: v } = g4, S = n2(g4);
  let j = null;
  const k = { opacity: l2(g4), size: s3(g4) };
  let x3 = a(g4);
  if ("none" === g4.background)
    k.color = x3;
  else {
    "constant" === x3.kind && (x3 = { kind: "ramp", stops: [0, 1], values: [0, 0, 0, 1, x3.value[0], x3.value[1], x3.value[2], x3.value[3]], count: 2 });
    const e5 = { loadImagery: w2.loadImagery, timeExtent: w2.timeExtent, color: x3, opacity: { kind: "constant", value: [1] } };
    j = new f4(e5), k.color = o();
  }
  const I2 = { loadImagery: w2.loadImagery, createFlowMesh: w2.createFlowMesh, simulationSettings: S, timeExtent: w2.timeExtent, trailLength: v, flowSpeed: h7, featheringSize: u4, featheringOffset: f7, introFade: p2, fadeToZero: d4, decayRate: y2, color: k.color, opacity: k.opacity, size: k.size }, z = "butt" === g4.trailCap || t4(s3(g4)) <= m ? new _3(I2) : new _2(I2);
  return null != j ? new t5([j, z]) : z;
}

// node_modules/@arcgis/core/views/2d/engine/flow/BrushFlow.js
var a2 = class extends t3 {
  constructor() {
    super(...arguments), this._visualState = { time: 0, dvsMat3: e2(), displayViewMat3: e2() };
  }
  dispose() {
  }
  prepareState(t7) {
    const { context: e5 } = t7;
    e5.setColorMask(true, true, true, true), e5.setStencilFunction(O.EQUAL, 0, 255);
  }
  draw(t7, e5) {
    const { requestRender: s5, allowDelayedRender: a3 } = t7, { displayData: r3 } = e5;
    if (null == r3)
      return;
    if ("loaded" === r3.state.name && r3.attach(t7), "attached" !== r3.state.name)
      return;
    const i5 = r3.state.resources;
    !a3 || i5.ready || null == s5 ? (this._visualState.time = t7.time / 1e3, this._visualState.dvsMat3 = e5.transforms.dvs, this._visualState.displayViewMat3 = t7.state.displayViewMat3, r3.flowStyle.render(t7, this._visualState, i5), r3.flowStyle.animated && null != s5 && s5()) : s5();
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowContainer.js
var t6 = class extends n {
  constructor() {
    super(...arguments), this.flowStyle = null;
  }
  doRender(e5) {
    super.doRender(e5);
  }
  prepareRenderPasses(s5) {
    const t7 = s5.registerRenderPass({ name: "flow", brushes: [a2], target: () => this.children, drawPhase: T.MAP });
    return [...super.prepareRenderPasses(s5), t7];
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowDisplayData.js
var e4 = class {
  constructor(t7, e5, s5, a3) {
    this.state = { name: "created" }, this.flowStyle = t7, this.extent = e5, this.size = s5, this.pixelRatio = a3;
  }
  async load() {
    const t7 = new AbortController();
    this.state = { name: "loading", abortController: t7 };
    const e5 = { extent: this.extent, size: this.size, pixelRatio: this.pixelRatio }, s5 = await this.flowStyle.load(e5, t7.signal);
    this.state = { name: "loaded", resources: s5 };
  }
  attach(e5) {
    if ("loaded" !== this.state.name)
      return void s.getLogger("esri.views.2d.engine.flow.FlowDisplayData").error("Only loaded resources can be attached.");
    const s5 = this.state.resources;
    s5.attach(e5), this.state = { name: "attached", resources: s5 };
  }
  detach() {
    if ("loading" === this.state.name)
      return this.state.abortController.abort(), void (this.state = { name: "detached" });
    "attached" === this.state.name && (this.state.resources.detach(), this.state = { name: "detached" });
  }
  update(t7) {
    if (!this.flowStyle.isCompatible(t7.flowStyle))
      return false;
    return !(!this.extent.equals(t7.extent) || this.size[0] !== t7.size[0] || this.size[1] !== t7.size[1] || this.pixelRatio !== t7.pixelRatio) && (this.flowStyle = t7.flowStyle, true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowDisplayObject.js
var o2 = class extends i2 {
  constructor() {
    super(...arguments), this._displayData = null;
  }
  get displayData() {
    return this._displayData;
  }
  set displayData(t7) {
    this._displayData = t7, this.requestRender();
  }
  clear() {
    null != this._displayData && (this._displayData.detach(), this._displayData = null, this.requestRender());
  }
  setTransform(r3) {
    const { displayData: n4 } = this;
    if (null == n4)
      return;
    const o3 = n4.extent.xmin, l6 = n4.extent.ymax, p3 = [0, 0];
    r3.toScreen(p3, [o3, l6]);
    const m3 = (n4.extent.xmax - n4.extent.xmin) / n4.size[0] / r3.resolution, c7 = M2(r3.rotation), { dvs: d7 } = this.transforms;
    l(d7, [-1, 1, 0]), f(d7, d7, [2 / (r3.size[0] * r3.pixelRatio), -2 / (r3.size[1] * r3.pixelRatio), 1]), M3(d7, d7, [p3[0], p3[1], 0]), h(d7, d7, c7), f(d7, d7, [m3 * r3.pixelRatio, m3 * r3.pixelRatio, 1]);
  }
  _createTransforms() {
    return { dvs: e2() };
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowStrategy.js
var m2 = 1.15;
var d5 = class extends g {
  constructor(t7) {
    super(t7), this._flowDisplayObject = new o2(), this._loading = null;
  }
  initialize() {
    this.flowContainer.addChild(this._flowDisplayObject);
  }
  destroy() {
    this._clear(), this.flowContainer.removeAllChildren();
  }
  get updating() {
    return null != this._loading;
  }
  update(t7) {
    const { flowStyle: o3 } = this.flowContainer;
    if (null == o3)
      return void this._clear();
    const { extent: e5, rotation: r3, resolution: a3, pixelRatio: l6 } = t7.state, p3 = y3(e5, r3);
    p3.expand(m2);
    const c7 = [Math.round((p3.xmax - p3.xmin) / a3), Math.round((p3.ymax - p3.ymin) / a3)], d7 = new e4(o3, p3, c7, l6);
    if (null != this._loading) {
      if (this._loading.update(d7))
        return;
      this._loading.detach(), this._loading = null;
    }
    null != this._flowDisplayObject.displayData && this._flowDisplayObject.displayData.update(d7) || (d7.load().then(() => {
      this._flowDisplayObject.clear(), this._flowDisplayObject.displayData = this._loading, this._loading = null;
    }, (t8) => {
      b(t8) || (s.getLogger(this).error("A resource failed to load.", t8), this._loading = null);
    }), this._loading = d7);
  }
  _clear() {
    this._flowDisplayObject.clear(), null != this._loading && (this._loading.detach(), this._loading = null);
  }
};
e([y()], d5.prototype, "_loading", void 0), e([y()], d5.prototype, "flowContainer", void 0), e([y()], d5.prototype, "updating", null), d5 = e([c("esri.views.2d.engine.flow.FlowStrategy")], d5);
var h5 = d5;
function y3(t7, o3) {
  const i5 = new x({ x: (t7.xmax + t7.xmin) / 2, y: (t7.ymax + t7.ymin) / 2, spatialReference: t7.spatialReference }), s5 = t7.xmax - t7.xmin, r3 = t7.ymax - t7.ymin, a3 = Math.abs(Math.cos(M2(o3))), n4 = Math.abs(Math.sin(M2(o3))), p3 = a3 * s5 + n4 * r3, m3 = n4 * s5 + a3 * r3, d7 = new M({ xmin: i5.x - p3 / 2, ymin: i5.y - m3 / 2, xmax: i5.x + p3 / 2, ymax: i5.y + m3 / 2, spatialReference: t7.spatialReference });
  return d7.centerAt(i5), d7;
}

// node_modules/@arcgis/core/views/2d/engine/flow/FlowView2D.js
var c5 = class extends g {
  constructor() {
    super(...arguments), this._loadImagery = (t7, e5, i5, o3, r3) => g2(this.layer, t7, e5, i5, o3, r3), this._createFlowMesh = (t7, e5, i5, o3) => this.layer.createFlowMesh({ meshType: t7, flowData: i5, simulationSettings: e5 }, { signal: o3 }), this.attached = false, this.type = "flow", this.timeExtent = null, this.redrawOrRefetch = async () => {
      this._updateVisualization();
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    const { layer: t7 } = this, e5 = () => {
      this._loadImagery = (e6, i5, o3, r3, s5) => g2(t7, e6, i5, o3, r3, s5), this._updateVisualization();
    };
    "multidimensionalDefinition" in t7 ? this.addHandles(d(() => t7.multidimensionalDefinition, e5)) : this.addHandles([d(() => t7.mosaicRule, e5), d(() => t7.rasterFunction, e5), d(() => t7.definitionExpression, e5)]), this.container = new t6(), this._strategy = new h5({ flowContainer: this.container }), this._updateVisualization();
  }
  detach() {
    var _a;
    this._strategy.destroy(), (_a = this.container) == null ? void 0 : _a.removeAllChildren(), this.container = null, this.removeHandles();
  }
  update(t7) {
    t7.stationary ? this._strategy.update(t7) : this.layerView.requestUpdate();
  }
  hitTest(t7) {
    return new c2({ attributes: {}, geometry: t7.clone(), layer: this.layer });
  }
  moveEnd() {
  }
  async doRefresh() {
  }
  _updateVisualization() {
    const t7 = this.layer.renderer;
    if (null == t7 || "flow" !== t7.type)
      return;
    const e5 = g3(t7, { loadImagery: this._loadImagery, createFlowMesh: this._createFlowMesh, timeExtent: this.timeExtent });
    this.container.flowStyle = e5, this.layerView.requestUpdate();
  }
};
e([y()], c5.prototype, "_strategy", void 0), e([y()], c5.prototype, "attached", void 0), e([y()], c5.prototype, "container", void 0), e([y()], c5.prototype, "layer", void 0), e([y()], c5.prototype, "layerView", void 0), e([y()], c5.prototype, "type", void 0), e([y()], c5.prototype, "updating", null), e([y()], c5.prototype, "timeExtent", void 0), c5 = e([c("esri.views.2d.engine.flow.FlowView2D")], c5);
var h6 = c5;

// node_modules/@arcgis/core/views/2d/engine/imagery/BrushVectorField.js
var n3 = new Float32Array([0.27058823529411763, 0.4588235294117647, 0.7098039215686275, 1, 0.396078431372549, 0.5372549019607843, 0.7215686274509804, 1, 0.5176470588235295, 0.6196078431372549, 0.7294117647058823, 1, 0.6352941176470588, 0.7058823529411765, 0.7411764705882353, 1, 0.7529411764705882, 0.8, 0.7450980392156863, 1, 0.8705882352941177, 0.8901960784313725, 0.7490196078431373, 1, 1, 1, 0.7490196078431373, 1, 1, 0.8627450980392157, 0.6313725490196078, 1, 0.9803921568627451, 0.7254901960784313, 0.5176470588235295, 1, 0.9607843137254902, 0.596078431372549, 0.4117647058823529, 1, 0.9294117647058824, 0.4588235294117647, 0.3176470588235294, 1, 0.9098039215686274, 0.08235294117647059, 0.08235294117647059, 1]);
var i4 = new Float32Array([0, 92 / 255, 230 / 255, 1]);
var l5 = { beaufort_ft: n3, beaufort_m: n3, beaufort_km: n3, beaufort_mi: n3, beaufort_kn: new Float32Array([0.1568627450980392, 0.5725490196078431, 0.7803921568627451, 1, 0.34901960784313724, 0.6352941176470588, 0.7294117647058823, 1, 0.5058823529411764, 0.7019607843137254, 0.6705882352941176, 1, 0.6274509803921569, 0.7607843137254902, 0.6078431372549019, 1, 0.7490196078431373, 0.8313725490196079, 0.5411764705882353, 1, 0.8549019607843137, 0.9019607843137255, 0.4666666666666667, 1, 0.9803921568627451, 0.9803921568627451, 0.39215686274509803, 1, 0.9882352941176471, 0.8352941176470589, 0.3254901960784314, 1, 0.9882352941176471, 0.7019607843137254, 0.4, 1, 0.9803921568627451, 0.5529411764705883, 0.20392156862745098, 1, 0.9686274509803922, 0.43137254901960786, 0.16470588235294117, 1, 0.9411764705882353, 0.2784313725490196, 0.11372549019607843, 1]), classified_arrow: new Float32Array([0.2196078431372549, 0.6588235294117647, 0, 1, 0.5450980392156862, 1.2117647058823529, 0, 1, 1, 1, 0, 1, 1, 0.5019607843137255, 0, 1, 1, 0, 0, 1]), ocean_current_m: new Float32Array([0.3058823529411765, 0.10196078431372549, 0.6, 1, 0.7019607843137254, 0.10588235294117647, 0.10196078431372549, 1, 0.792156862745098, 0.5019607843137255, 0.10196078431372549, 1, 0.6941176470588235, 0.6941176470588235, 0.6941176470588235, 1]), ocean_current_kn: new Float32Array([0, 0, 0, 1, 0, 0.1450980392156863, 0.39215686274509803, 1, 0.3058823529411765, 0.10196078431372549, 0.6, 1, 0.592156862745098, 0, 0.39215686274509803, 1, 0.7019607843137254, 0.10588235294117647, 0.10196078431372549, 1, 0.6941176470588235, 0.3058823529411765, 0.10196078431372549, 1, 0.792156862745098, 0.5019607843137255, 0.10196078431372549, 1, 0.6941176470588235, 0.7019607843137254, 0.20392156862745098, 1, 0.6941176470588235, 0.6941176470588235, 0.6941176470588235, 1]), simple_scalar: i4, single_arrow: i4, wind_speed: new Float32Array([0, 0, 0, 1]) };
var c6 = [0, 20];
var d6 = class extends t3 {
  constructor() {
    super(...arguments), this._desc = { magdir: { vsPath: "raster/magdir", fsPath: "raster/magdir", attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_offset", 1], ["a_vv", 2]]) }, scalar: { vsPath: "raster/scalar", fsPath: "raster/scalar", attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_offset", 1], ["a_vv", 2]]) } };
  }
  dispose() {
  }
  prepareState({ context: e5 }) {
    e5.setBlendingEnabled(true), e5.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), e5.setColorMask(true, true, true, true), e5.setStencilWriteMask(0), e5.setStencilTestEnabled(true), e5.setStencilOp(I.KEEP, I.KEEP, I.REPLACE);
  }
  draw(e5, t7) {
    if (null == t7.source || 0 === t7.source.validPixelCount)
      return;
    const { context: a3, timeline: s5 } = e5;
    if (s5.begin(this.name), a3.setStencilFunction(O.EQUAL, t7.stencilRef, 255), t7.updateVectorFieldVAO(e5), "scalar" === e5.renderPass) {
      const a4 = t7.vaoData.scalar;
      a4 && this._drawScalars(e5, t7, a4.vao, a4.elementCount);
    } else {
      const a4 = t7.vaoData.magdir;
      a4 && this._drawTriangles(e5, t7, a4.vao, a4.elementCount);
    }
    s5.end(this.name);
  }
  _drawTriangles(e5, t7, a3, r3) {
    const { context: n4, painter: i5, requestRender: d7, allowDelayedRender: m3 } = e5, { symbolizerParameters: u5 } = t7, f9 = u5.dataRange ? ["dataRange"] : [];
    "geographic" === u5.rotationType && f9.push("rotationGeographic");
    const _4 = i5.materialManager.getProgram(this._desc.magdir, f9);
    if (m3 && null != d7 && !_4.compiled)
      return void d7();
    n4.useProgram(_4);
    const { coordScale: g4, opacity: p3, transforms: y4 } = t7;
    _4.setUniform2fv("u_coordScale", g4), _4.setUniform1f("u_opacity", p3), _4.setUniformMatrix3fv("u_dvsMat3", y4.dvs);
    const { style: v, dataRange: S, rotation: b3, symbolPercentRange: h7 } = u5;
    _4.setUniform4fv("u_colors", l5[v]), _4.setUniform2fv("u_dataRange", S || c6), _4.setUniform1f("u_rotation", b3), _4.setUniform2fv("u_symbolPercentRange", h7);
    const w2 = this._getSymbolSize(e5, t7);
    _4.setUniform2fv("u_symbolSize", w2), n4.bindVAO(a3), n4.drawElements(E.TRIANGLES, r3, C.UNSIGNED_INT, 0);
  }
  _drawScalars(e5, t7, a3, r3) {
    const { context: n4, painter: i5, requestRender: l6, allowDelayedRender: d7 } = e5, { symbolizerParameters: m3 } = t7, u5 = [];
    "wind_speed" === m3.style ? u5.push("innerCircle") : m3.dataRange && u5.push("dataRange"), "geographic" === m3.rotationType && u5.push("rotationGeographic");
    const f9 = i5.materialManager.getProgram(this._desc.scalar, u5);
    if (d7 && null != l6 && !f9.compiled)
      return void l6();
    n4.useProgram(f9);
    const { coordScale: _4, opacity: g4, transforms: p3 } = t7;
    f9.setUniform2fv("u_coordScale", _4), f9.setUniform1f("u_opacity", g4), f9.setUniformMatrix3fv("u_dvsMat3", p3.dvs);
    const { dataRange: y4, symbolPercentRange: v } = m3;
    f9.setUniform2fv("u_dataRange", y4 || c6), f9.setUniform2fv("u_symbolPercentRange", v);
    const S = this._getSymbolSize(e5, t7);
    f9.setUniform2fv("u_symbolSize", S), n4.bindVAO(a3), n4.drawElements(E.TRIANGLES, r3, C.UNSIGNED_INT, 0);
  }
  _getSymbolSize(e5, t7) {
    const a3 = t7.key ? 2 ** (e5.displayLevel - t7.key.level) : t7.resolution / e5.state.resolution, { symbolTileSize: r3 } = t7.symbolizerParameters;
    return [r3 / (Math.round((t7.width - t7.offset[0]) / r3) * r3) / a3, r3 / (Math.round((t7.height - t7.offset[1]) / r3) * r3) / a3];
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFDisplayObject.js
var f8 = class extends i2 {
  constructor(t7 = null) {
    super(), this._source = null, this._symbolizerParameters = null, this._vaoInvalidated = true, this.coordScale = [1, 1], this.height = null, this.key = null, this.offset = null, this.stencilRef = 0, this.resolution = null, this.pixelRatio = 1, this.x = 0, this.y = 0, this.rotation = 0, this.rawPixelData = null, this.vaoData = null, this.width = null, this.source = t7;
  }
  destroy() {
    var _a, _b;
    null != this.vaoData && ((_a = this.vaoData.magdir) == null ? void 0 : _a.vao.dispose(), (_b = this.vaoData.scalar) == null ? void 0 : _b.vao.dispose(), this.vaoData = null);
  }
  get symbolizerParameters() {
    return this._symbolizerParameters;
  }
  set symbolizerParameters(t7) {
    JSON.stringify(this._symbolizerParameters) !== JSON.stringify(t7) && (this._symbolizerParameters = t7, this.invalidateVAO());
  }
  get source() {
    return this._source;
  }
  set source(t7) {
    this._source = t7, this.invalidateVAO();
  }
  invalidateVAO() {
    var _a, _b;
    this._vaoInvalidated || null == this.vaoData || ((_a = this.vaoData.magdir) == null ? void 0 : _a.vao.dispose(), (_b = this.vaoData.scalar) == null ? void 0 : _b.vao.dispose(), this.vaoData = null, this._vaoInvalidated = true, this.requestRender());
  }
  updateVectorFieldVAO(t7) {
    if (this._vaoInvalidated) {
      if (this._vaoInvalidated = false, null != this.source && null == this.vaoData) {
        const { style: e5 } = this.symbolizerParameters;
        switch (e5) {
          case "beaufort_ft":
          case "beaufort_km":
          case "beaufort_kn":
          case "beaufort_m":
          case "beaufort_mi":
          case "classified_arrow":
          case "ocean_current_kn":
          case "ocean_current_m":
          case "single_arrow":
            {
              const e6 = U(this.source, this.symbolizerParameters), s5 = this._createVectorFieldVAO(t7.context, e6);
              this.vaoData = { magdir: s5 };
            }
            break;
          case "simple_scalar":
            {
              const e6 = _(this.source, this.symbolizerParameters), s5 = this._createVectorFieldVAO(t7.context, e6);
              this.vaoData = { scalar: s5 };
            }
            break;
          case "wind_speed": {
            const e6 = U(this.source, this.symbolizerParameters), s5 = this._createVectorFieldVAO(t7.context, e6), a3 = _(this.source, this.symbolizerParameters), r3 = this._createVectorFieldVAO(t7.context, a3);
            this.vaoData = { magdir: s5, scalar: r3 };
          }
        }
      }
      this.ready(), this.requestRender();
    }
  }
  _createTransforms() {
    return { dvs: e2() };
  }
  setTransform(i5) {
    const l6 = r(this.transforms.dvs), [n4, c7] = i5.toScreenNoRotation([0, 0], [this.x, this.y]), h7 = this.resolution / this.pixelRatio / i5.resolution, m3 = h7 * this.width, u5 = h7 * this.height, d7 = Math.PI * this.rotation / 180;
    M3(l6, l6, t2(n4, c7)), M3(l6, l6, t2(m3 / 2, u5 / 2)), h(l6, l6, -d7), M3(l6, l6, t2(-m3 / 2, -u5 / 2)), b2(l6, l6, t2(m3, u5)), i(this.transforms.dvs, i5.displayViewMat3, l6);
  }
  onAttach() {
    this.invalidateVAO();
  }
  onDetach() {
    this.invalidateVAO();
  }
  _createVectorFieldVAO(t7, e5) {
    const { vertexData: s5, indexData: a3 } = e5, r3 = h2.createVertex(t7, F.STATIC_DRAW, new Float32Array(s5)), i5 = h2.createIndex(t7, F.STATIC_DRAW, new Uint32Array(a3)), o3 = ee("vector-field", { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.FLOAT, normalized: false }, { location: 1, name: "a_offset", count: 2, type: C.FLOAT, normalized: false }, { location: 2, name: "a_vv", count: 2, type: C.FLOAT, normalized: false }] });
    return { vao: new f2(t7, o3.attributes, o3.bufferLayouts, { geometry: r3 }, i5), elementCount: a3.length };
  }
};

export {
  h6 as h,
  d6 as d,
  f8 as f
};
//# sourceMappingURL=chunk-WKC2TOHI.js.map
